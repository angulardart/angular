// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'injectables.dart';
export 'injectables.dart';
import 'dart:html' as html;
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'injectables.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import6;
import 'package:angular/angular.dart';
import 'dart:core';

const List<dynamic> styles$InjectableComponent = const [];

class ViewInjectableComponent0 extends AppView<import1.InjectableComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewInjectableComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('test-injectables');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$InjectableComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('Inject!');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponent0(parentView, parentIndex);
}

const List<dynamic> styles$InjectableComponentHost = const [];

class _ViewInjectableComponentHost0 extends AppView<dynamic> {
  ViewInjectableComponent0 _compView_0;
  dynamic _const_OpaqueToken__test___0_4;
  import1.InjectableComponent _InjectableComponent_0_5;
  dynamic __SomeDep_0_6;
  dynamic __BaseService_0_7;
  static RenderComponentType _renderType;
  _ViewInjectableComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$InjectableComponentHost);
    setupComponentType(_renderType);
  }
  dynamic get _SomeDep_0_6 {
    if ((this.__SomeDep_0_6 == null)) {
      (__SomeDep_0_6 =
          import1.createLinkedHashMap(this._const_OpaqueToken__test___0_4));
    }
    return this.__SomeDep_0_6;
  }

  dynamic get _BaseService_0_7 {
    if ((this.__BaseService_0_7 == null)) {
      (__BaseService_0_7 = import1.createLinkedHashMap(
          this._SomeDep_0_6,
          this.injectorGet(import1.SomeDep, this.viewData.parentIndex),
          this._SomeDep_0_6));
    }
    return this.__BaseService_0_7;
  }

  @override
  ComponentRef build() {
    _compView_0 = new ViewInjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _const_OpaqueToken__test___0_4 = import1.injectableFactory(
        this.injectorGet(import2.Window, viewData.parentIndex));
    _InjectableComponent_0_5 = new import1.InjectableComponent(
        null,
        this.injectorGet(import1.InjectableService, viewData.parentIndex, null),
        _const_OpaqueToken__test___0_4,
        this.injectorGet(String, viewData.parentIndex, null));
    _compView_0.create(_InjectableComponent_0_5, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _InjectableComponent_0_5);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const OpaqueToken('test')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__test___0_4;
    }
    if ((identical(token, import1.InjectableComponent) && (0 == nodeIndex))) {
      return _InjectableComponent_0_5;
    }
    if ((identical(token, import1.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_6;
    }
    if ((identical(token, import1.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_7;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInjectableComponentHost0(parentView, parentIndex);
}

const ComponentFactory _InjectableComponentNgFactory = const ComponentFactory(
    'test-injectables',
    viewFactory_InjectableComponentHost0,
    import1.InjectableComponent,
    _InjectableComponentMetadata);
final ComponentFactory InjectableComponentNgFactory =
    _InjectableComponentNgFactory;
const _InjectableComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerFactory(
    injectableFactory,
    injectableFactory,
  );
  _ngRef.registerDependencies(
    injectableFactory,
    const [
      const [
        html.Window,
      ],
    ],
  );

  _ngRef.registerComponent(
    InjectableComponent,
    InjectableComponentNgFactory,
  );
  _ngRef.registerFactory(
    SomeDep,
    () => new SomeDep(),
  );

  _ngRef.registerFactory(
    BaseService,
    () => new BaseService(),
  );

  _ngRef.registerFactory(
    InjectableService,
    () => new InjectableService(),
  );
}
