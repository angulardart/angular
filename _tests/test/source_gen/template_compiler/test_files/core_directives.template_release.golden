// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'core_directives.dart';
export 'core_directives.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'core_directives.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/common/directives/ng_for.dart'
    as import4;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import8;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/facade/lang.dart'
    as import12;

const List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_7;
  ViewContainer _appEl_3;
  import4.NgFor _NgFor_3_7;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import8.document.createElement('test-foo');
    _renderType ??= import9.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import8.HtmlElement parentRenderNode = initViewRoot(rootEl);
    import8.Text _text_0 = new import8.Text('    ');
    parentRenderNode.append(_text_0);
    var _anchor_1 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_1);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_6 =
        new TemplateRef(_appEl_1, viewFactory_TestFooComponent1);
    _NgIf_1_7 = new NgIf(_appEl_1, _TemplateRef_1_6);
    import8.Text _text_2 = new import8.Text('\n    ');
    parentRenderNode.append(_text_2);
    var _anchor_3 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_3);
    _appEl_3 = new ViewContainer(3, null, this, _anchor_3);
    TemplateRef _TemplateRef_3_6 =
        new TemplateRef(_appEl_3, viewFactory_TestFooComponent2);
    _NgFor_3_7 = new import4.NgFor(_appEl_3, _TemplateRef_3_6);
    import8.Text _text_4 = new import8.Text('\n    ');
    parentRenderNode.append(_text_4);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.TestFooComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    _NgIf_1_7.ngIf = _ctx.foo;
    if (firstCheck) {
      if (!identical(_ctx.bars, null)) {
        (_NgFor_3_7.ngForOf = _ctx.bars);
      }
    }
    _NgFor_3_7.ngDoCheck();
    _appEl_1.detectChangesInNestedViews();
    _appEl_3.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1?.destroyNestedViews();
    _appEl_3?.destroyNestedViews();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

class _ViewTestFooComponent1 extends AppView<import1.TestFooComponent> {
  import8.DivElement _el_0;
  _ViewTestFooComponent1(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.EMBEDDED, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestFooComponent0._renderType;
  }
  @override
  ComponentRef build() {
    var doc = import8.document;
    _el_0 = doc.createElement('div');
    import8.Text _text_1 = new import8.Text('Foo');
    _el_0.append(_text_1);
    init([_el_0], null);
    return null;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent1(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestFooComponent1(parentView, parentIndex);
}

class _ViewTestFooComponent2 extends AppView<import1.TestFooComponent> {
  import8.DivElement _el_0;
  import8.Element _el_2;
  import8.Text _text_3;
  var _expr_0;
  _ViewTestFooComponent2(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.EMBEDDED, {'\$implicit': null}, parentView,
            parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestFooComponent0._renderType;
  }
  @override
  ComponentRef build() {
    var doc = import8.document;
    _el_0 = doc.createElement('div');
    import8.Text _text_1 = new import8.Text('\n      ');
    _el_0.append(_text_1);
    _el_2 = createAndAppend(doc, 'span', _el_0);
    _text_3 = new import8.Text('');
    _el_2.append(_text_3);
    import8.Text _text_4 = new import8.Text('\n    ');
    _el_0.append(_text_4);
    init([_el_0], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final currVal_0 = import9.interpolate0(locals['\$implicit']);
    if (!import12.looseIdentical(_expr_0, currVal_0)) {
      _text_3.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent2(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestFooComponent2(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_4;
  static RenderComponentType _renderType;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import9.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestFooComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_4 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory _TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import1.TestFooComponent,
    _TestFooComponentMetadata);
final ComponentFactory TestFooComponentNgFactory = _TestFooComponentNgFactory;
const _TestFooComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    TestFooComponent,
    TestFooComponentNgFactory,
  );
  _ngRef.registerFactory(
    TestFooComponent,
    () => new TestFooComponent(),
  );
}
