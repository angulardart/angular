// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'core_directives.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _i1;
export 'core_directives.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/common/directives/ng_for.dart'
    as import3;
import 'package:angular/src/debug/debug_app_view.dart';
import 'core_directives.dart' as import5;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.template.dart'
    as import7;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import10;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import12;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import13;
import 'package:angular/angular.dart';

const List<dynamic> styles$TestFooComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [
  null,
  new StaticNodeDebugInfo([TemplateRef, NgIf], null, <String, dynamic>{}),
  null,
  new StaticNodeDebugInfo(
      [TemplateRef, import3.NgFor], null, <String, dynamic>{}),
  null
];

class ViewTestFooComponent0 extends DebugAppView<import5.TestFooComponent> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_5;
  ViewContainer _appEl_3;
  import7.NgForNgCd _NgFor_3_5;
  static RenderComponentType renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import10.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent0) {
    rootEl = import12.document.createElement('test-foo');
    renderType ??= import13.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/core_directives.dart class TestFooComponent - inline template',
        ViewEncapsulation.None,
        styles$TestFooComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import12.HtmlElement parentRenderNode = initViewRoot(rootEl);
    import12.Text _text_0 = new import12.Text('    ');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    var _anchor_1 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_1);
    dbgElm(this, _anchor_1, 1, 0, 4);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_4 =
        new TemplateRef(_appEl_1, viewFactory_TestFooComponent1);
    _NgIf_1_5 = new NgIf(_appEl_1, _TemplateRef_1_4);
    import12.Text _text_2 = new import12.Text('\n    ');
    parentRenderNode.append(_text_2);
    dbgElm(this, _text_2, 2, 0, 30);
    var _anchor_3 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_3);
    dbgElm(this, _anchor_3, 3, 1, 4);
    _appEl_3 = new ViewContainer(3, null, this, _anchor_3);
    TemplateRef _TemplateRef_3_4 =
        new TemplateRef(_appEl_3, viewFactory_TestFooComponent2);
    _NgFor_3_5 =
        new import7.NgForNgCd(new import3.NgFor(_appEl_3, _TemplateRef_3_4));
    import12.Text _text_4 = new import12.Text('\n    ');
    parentRenderNode.append(_text_4);
    dbgElm(this, _text_4, 4, 3, 10);
    init(const [], const [], [_text_0, _anchor_1, _text_2, _anchor_3, _text_4]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import5.TestFooComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    dbg(1, 0, 9);
    _NgIf_1_5.ngIf = _ctx.foo;
    dbg(3, 1, 9);
    if (firstCheck) {
      _NgFor_3_5.ngSet$ngForOf(_ctx.bars);
    }
    if (!import13.AppViewUtils.throwOnChanges) {
      _NgFor_3_5.instance.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
    _appEl_3.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1.destroyNestedViews();
    _appEl_3.destroyNestedViews();
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent1 = [null, null];

class ViewTestFooComponent1 extends DebugAppView<import5.TestFooComponent> {
  import12.DivElement _el_0;
  ViewTestFooComponent1(AppView<dynamic> parentView, num parentIndex)
      : super(
            import10.ViewType.EMBEDDED,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent1) {
    componentType = ViewTestFooComponent0.renderType;
  }
  @override
  ComponentRef build() {
    var doc = import12.document;
    _el_0 = doc.createElement('div');
    dbgElm(this, _el_0, 0, 0, 4);
    import12.Text _text_1 = new import12.Text('Foo');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 21);
    init([_el_0], const [], [_el_0, _text_1]);
    return null;
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent1(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent1(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent2 = [
  null,
  null,
  null,
  null,
  null
];

class ViewTestFooComponent2 extends DebugAppView<import5.TestFooComponent> {
  import12.DivElement _el_0;
  import12.Element _el_2;
  import12.Text _text_3;
  var _expr_0;
  ViewTestFooComponent2(AppView<dynamic> parentView, num parentIndex)
      : super(
            import10.ViewType.EMBEDDED,
            {'\$implicit': null},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent2) {
    componentType = ViewTestFooComponent0.renderType;
  }
  @override
  ComponentRef build() {
    var doc = import12.document;
    _el_0 = doc.createElement('div');
    dbgElm(this, _el_0, 0, 1, 4);
    import12.Text _text_1 = new import12.Text('\n      ');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 1, 34);
    _el_2 = createAndAppendDbg(this, doc, 'span', _el_0, 2, 2, 6);
    _text_3 = new import12.Text('');
    _el_2.append(_text_3);
    dbgElm(this, _text_3, 3, 2, 12);
    import12.Text _text_4 = new import12.Text('\n    ');
    _el_0.append(_text_4);
    dbgElm(this, _text_4, 4, 2, 26);
    init([_el_0], const [], [_el_0, _text_1, _el_2, _text_3, _text_4]);
    return null;
  }

  @override
  void detectChangesInternal() {
    dbg(3, 2, 12);
    final currVal_0 = import13.interpolate0(locals['\$implicit']);
    if (import13.checkBinding(_expr_0, currVal_0)) {
      _text_3.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent2(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent2(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo(
      [import5.TestFooComponent], import5.TestFooComponent, <String, dynamic>{})
];

class ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import5.TestFooComponent _TestFooComponent_0_2;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import10.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponentHost0) {
    renderType ??= import13.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestFooComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_2 = new import5.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import5.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import5.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestFooComponentNgFactory],
          const [], () => new TestFooComponent()));
  _i1.initReflector();
}
