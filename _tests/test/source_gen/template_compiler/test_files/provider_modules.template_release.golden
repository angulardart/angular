// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'provider_modules.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _i1;
export 'provider_modules.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'provider_modules.dart' as import1;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import6;
import 'package:angular/angular.dart';
import 'dart:core';

const List<dynamic> styles$ProviderModulesComponent = const [];

class ViewProviderModulesComponent0
    extends AppView<import1.ProviderModulesComponent> {
  static RenderComponentType _renderType;
  ViewProviderModulesComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import3.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('provider-modules');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$ProviderModulesComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import5.HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], const []);
    return null;
  }
}

AppView<import1.ProviderModulesComponent> viewFactory_ProviderModulesComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewProviderModulesComponent0(parentView, parentIndex);
}

const List<dynamic> styles$ProviderModulesComponentHost = const [];

class _ViewProviderModulesComponentHost0 extends AppView<dynamic> {
  ViewProviderModulesComponent0 _compView_0;
  import1.ProviderModulesComponent _ProviderModulesComponent_0_4;
  import1.FooService __FooService_0_5;
  Duration __const_OpaqueToken__fooToken___0_6;
  List<dynamic> __const_OpaqueToken__barToken___0_7;
  dynamic __const_OpaqueToken__bazToken___0_8;
  static RenderComponentType _renderType;
  _ViewProviderModulesComponentHost0(
      AppView<dynamic> parentView, num parentIndex)
      : super(import3.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$ProviderModulesComponentHost);
    setupComponentType(_renderType);
  }
  import1.FooService get _FooService_0_5 {
    if ((this.__FooService_0_5 == null)) {
      (__FooService_0_5 = new import1.FooService());
    }
    return this.__FooService_0_5;
  }

  Duration get _const_OpaqueToken__fooToken___0_6 {
    if ((this.__const_OpaqueToken__fooToken___0_6 == null)) {
      (__const_OpaqueToken__fooToken___0_6 = const Duration(seconds: 500));
    }
    return this.__const_OpaqueToken__fooToken___0_6;
  }

  List<dynamic> get _const_OpaqueToken__barToken___0_7 {
    if ((this.__const_OpaqueToken__barToken___0_7 == null)) {
      (__const_OpaqueToken__barToken___0_7 = const ['a', 'b', 'c']);
    }
    return this.__const_OpaqueToken__barToken___0_7;
  }

  dynamic get _const_OpaqueToken__bazToken___0_8 {
    if ((this.__const_OpaqueToken__bazToken___0_8 == null)) {
      (__const_OpaqueToken__bazToken___0_8 = import1.getSomeValues());
    }
    return this.__const_OpaqueToken__bazToken___0_8;
  }

  @override
  ComponentRef build() {
    _compView_0 = new ViewProviderModulesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _ProviderModulesComponent_0_4 = new import1.ProviderModulesComponent();
    _compView_0.create(_ProviderModulesComponent_0_4, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _ProviderModulesComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.ProviderModulesComponent) &&
        (0 == nodeIndex))) {
      return _ProviderModulesComponent_0_4;
    }
    if ((identical(token, import1.FooService) && (0 == nodeIndex))) {
      return _FooService_0_5;
    }
    if ((identical(token, const OpaqueToken('fooToken')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__fooToken___0_6;
    }
    if ((identical(token, const OpaqueToken('barToken')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__barToken___0_7;
    }
    if ((identical(token, const OpaqueToken('bazToken')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__bazToken___0_8;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_ProviderModulesComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewProviderModulesComponentHost0(parentView, parentIndex);
}

const ComponentFactory _ProviderModulesComponentNgFactory =
    const ComponentFactory(
        'provider-modules',
        viewFactory_ProviderModulesComponentHost0,
        import1.ProviderModulesComponent,
        _METADATA);
final ComponentFactory ProviderModulesComponentNgFactory =
    _ProviderModulesComponentNgFactory;
const _METADATA = const <dynamic>[
  getSomeValues,
  const <dynamic>[const Injectable()],
  FooService,
  const <dynamic>[const Injectable()],
  ProviderModulesComponent,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerFunction(getSomeValues,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const []));
  _ngRef.reflector.registerType(
      FooService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new FooService()));
  _ngRef.reflector.registerType(
      ProviderModulesComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[_ProviderModulesComponentNgFactory],
          const [],
          () => new ProviderModulesComponent()));
  _i1.initReflector();
}
