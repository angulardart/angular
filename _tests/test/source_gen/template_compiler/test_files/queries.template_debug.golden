// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'queries.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _i1;
export 'queries.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'queries.dart' as import1;
import 'package:angular/src/debug/debug_app_view.dart';
import 'package:angular/src/core/linker/query_list.dart'
    as import3;
import 'dart:html';
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import7;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/element_ref.dart';

const List<dynamic> styles$QueriesComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_QueriesComponent0 = [
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q1': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q2': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q3': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q4': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q5': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q6': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q7': null}),
  null,
  new StaticNodeDebugInfo(
      [import1.AnotherDirective], null, <String, dynamic>{'q8': null}),
  null
];

class ViewQueriesComponent0 extends DebugAppView<import1.QueriesComponent> {
  import3.QueryList _viewQuery_q6_0;
  import3.QueryList _viewQuery_q8_1;
  import3.QueryList _viewQuery_q8_2;
  import3.QueryList _viewQuery_AnotherDirective_3;
  Element _el_1;
  import1.AnotherDirective _AnotherDirective_1_2;
  Element _el_3;
  import1.AnotherDirective _AnotherDirective_3_2;
  Element _el_5;
  import1.AnotherDirective _AnotherDirective_5_2;
  Element _el_7;
  import1.AnotherDirective _AnotherDirective_7_2;
  Element _el_9;
  import1.AnotherDirective _AnotherDirective_9_2;
  Element _el_11;
  import1.AnotherDirective _AnotherDirective_11_2;
  Element _el_13;
  import1.AnotherDirective _AnotherDirective_13_2;
  Element _el_15;
  import1.AnotherDirective _AnotherDirective_15_2;
  static RenderComponentType renderType;
  ViewQueriesComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import7.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_QueriesComponent0) {
    rootEl = document.createElement('queries');
    renderType ??= import9.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/queries.dart class QueriesComponent - inline template',
        ViewEncapsulation.None,
        styles$QueriesComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    _viewQuery_q6_0 = new import3.QueryList();
    _viewQuery_q8_1 = new import3.QueryList();
    _viewQuery_q8_2 = new import3.QueryList();
    _viewQuery_AnotherDirective_3 = new import3.QueryList();
    Text _text_0 = new Text('    ');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    var doc = document;
    _el_1 = createAndAppendDbg(this, doc, 'another', parentRenderNode, 1, 0, 4);
    _AnotherDirective_1_2 = new import1.AnotherDirective();
    Text _text_2 = new Text('\n    ');
    parentRenderNode.append(_text_2);
    dbgElm(this, _text_2, 2, 0, 27);
    _el_3 = createAndAppendDbg(this, doc, 'another', parentRenderNode, 3, 1, 4);
    _AnotherDirective_3_2 = new import1.AnotherDirective();
    Text _text_4 = new Text('\n    ');
    parentRenderNode.append(_text_4);
    dbgElm(this, _text_4, 4, 1, 27);
    _el_5 = createAndAppendDbg(this, doc, 'another', parentRenderNode, 5, 2, 4);
    _AnotherDirective_5_2 = new import1.AnotherDirective();
    Text _text_6 = new Text('\n    ');
    parentRenderNode.append(_text_6);
    dbgElm(this, _text_6, 6, 2, 27);
    _el_7 = createAndAppendDbg(this, doc, 'another', parentRenderNode, 7, 3, 4);
    _AnotherDirective_7_2 = new import1.AnotherDirective();
    Text _text_8 = new Text('\n    ');
    parentRenderNode.append(_text_8);
    dbgElm(this, _text_8, 8, 3, 27);
    _el_9 = createAndAppendDbg(this, doc, 'another', parentRenderNode, 9, 4, 4);
    _AnotherDirective_9_2 = new import1.AnotherDirective();
    Text _text_10 = new Text('\n    ');
    parentRenderNode.append(_text_10);
    dbgElm(this, _text_10, 10, 4, 27);
    _el_11 =
        createAndAppendDbg(this, doc, 'another', parentRenderNode, 11, 5, 4);
    _AnotherDirective_11_2 = new import1.AnotherDirective();
    Text _text_12 = new Text('\n    ');
    parentRenderNode.append(_text_12);
    dbgElm(this, _text_12, 12, 5, 27);
    _el_13 =
        createAndAppendDbg(this, doc, 'another', parentRenderNode, 13, 6, 4);
    _AnotherDirective_13_2 = new import1.AnotherDirective();
    Text _text_14 = new Text('\n    ');
    parentRenderNode.append(_text_14);
    dbgElm(this, _text_14, 14, 6, 27);
    _el_15 =
        createAndAppendDbg(this, doc, 'another', parentRenderNode, 15, 7, 4);
    _AnotherDirective_15_2 = new import1.AnotherDirective();
    Text _text_16 = new Text('\n  ');
    parentRenderNode.append(_text_16);
    dbgElm(this, _text_16, 16, 7, 27);
    _viewQuery_q8_1.reset([new ElementRef(_el_15)]);
    ctx.viewChildFromField = _viewQuery_q8_1.first;
    _viewQuery_q8_2.reset([new ElementRef(_el_15)]);
    ctx.readDIFromElement = _viewQuery_q8_2.first;
    init(const [], const [], [
      _text_0,
      _el_1,
      _text_2,
      _el_3,
      _text_4,
      _el_5,
      _text_6,
      _el_7,
      _text_8,
      _el_9,
      _text_10,
      _el_11,
      _text_12,
      _el_13,
      _text_14,
      _el_15,
      _text_16
    ]);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.AnotherDirective) && (1 == nodeIndex))) {
      return _AnotherDirective_1_2;
    }
    if ((identical(token, import1.AnotherDirective) && (3 == nodeIndex))) {
      return _AnotherDirective_3_2;
    }
    if ((identical(token, import1.AnotherDirective) && (5 == nodeIndex))) {
      return _AnotherDirective_5_2;
    }
    if ((identical(token, import1.AnotherDirective) && (7 == nodeIndex))) {
      return _AnotherDirective_7_2;
    }
    if ((identical(token, import1.AnotherDirective) && (9 == nodeIndex))) {
      return _AnotherDirective_9_2;
    }
    if ((identical(token, import1.AnotherDirective) && (11 == nodeIndex))) {
      return _AnotherDirective_11_2;
    }
    if ((identical(token, import1.AnotherDirective) && (13 == nodeIndex))) {
      return _AnotherDirective_13_2;
    }
    if ((identical(token, import1.AnotherDirective) && (15 == nodeIndex))) {
      return _AnotherDirective_15_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    if (!import9.AppViewUtils.throwOnChanges) {
      if (_viewQuery_q6_0.dirty) {
        _viewQuery_q6_0.reset([new ElementRef(_el_11)]);
        ctx.viewChildrenFromField = _viewQuery_q6_0;
        _viewQuery_q6_0.notifyOnChanges();
      }
      if (_viewQuery_AnotherDirective_3.dirty) {
        _viewQuery_AnotherDirective_3.reset([
          _AnotherDirective_1_2,
          _AnotherDirective_3_2,
          _AnotherDirective_5_2,
          _AnotherDirective_7_2,
          _AnotherDirective_9_2,
          _AnotherDirective_11_2,
          _AnotherDirective_13_2,
          _AnotherDirective_15_2
        ]);
        ctx.usingTypeFromField = _viewQuery_AnotherDirective_3;
        _viewQuery_AnotherDirective_3.notifyOnChanges();
      }
    }
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewQueriesComponent0(parentView, parentIndex);
}

const List<dynamic> styles$QueriesComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_QueriesComponentHost0 = [
  new StaticNodeDebugInfo(
      [import1.QueriesComponent], import1.QueriesComponent, <String, dynamic>{})
];

class ViewQueriesComponentHost0 extends DebugAppView<dynamic> {
  ViewQueriesComponent0 _compView_0;
  import1.QueriesComponent _QueriesComponent_0_2;
  import3.QueryList _query_q1_0_0;
  import3.QueryList _query_q2_0_1;
  import3.QueryList _query_q3_0_2;
  import3.QueryList _query_q4_0_3;
  import3.QueryList _query_q5_0_4;
  import3.QueryList _query_q7_0_5;
  static RenderComponentType renderType;
  ViewQueriesComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import7.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_QueriesComponentHost0) {
    renderType ??= import9.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$QueriesComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewQueriesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _QueriesComponent_0_2 = new import1.QueriesComponent();
    _query_q1_0_0 = new import3.QueryList();
    _query_q2_0_1 = new import3.QueryList();
    _query_q3_0_2 = new import3.QueryList();
    _query_q4_0_3 = new import3.QueryList();
    _query_q5_0_4 = new import3.QueryList();
    _query_q7_0_5 = new import3.QueryList();
    _query_q3_0_2.reset([]);
    _QueriesComponent_0_2.contentChildFromAnnotation = _query_q3_0_2.first;
    _query_q4_0_3.reset([]);
    _QueriesComponent_0_2.viewChildFromAnnotation = _query_q4_0_3.first;
    _query_q7_0_5.reset([]);
    _QueriesComponent_0_2.contentChildFromField = _query_q7_0_5.first;
    _compView_0.create(_QueriesComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _QueriesComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.QueriesComponent) && (0 == nodeIndex))) {
      return _QueriesComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    if (!import9.AppViewUtils.throwOnChanges) {
      if (_query_q1_0_0.dirty) {
        _query_q1_0_0.reset([]);
        _QueriesComponent_0_2.contentChildrenFromAnnotation = _query_q1_0_0;
        _query_q1_0_0.notifyOnChanges();
      }
      if (_query_q2_0_1.dirty) {
        _query_q2_0_1.reset([]);
        _QueriesComponent_0_2.viewChildrenFromAnnotation = _query_q2_0_1;
        _query_q2_0_1.notifyOnChanges();
      }
      if (_query_q5_0_4.dirty) {
        _query_q5_0_4.reset([]);
        _QueriesComponent_0_2.contentChildrenFromField = _query_q5_0_4;
        _query_q5_0_4.notifyOnChanges();
      }
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_QueriesComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewQueriesComponentHost0(parentView, parentIndex);
}

const ComponentFactory QueriesComponentNgFactory = const ComponentFactory(
    'queries',
    viewFactory_QueriesComponentHost0,
    import1.QueriesComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  QueriesComponent,
  const <dynamic>[],
  AnotherDirective,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      QueriesComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[QueriesComponentNgFactory],
          const [], () => new QueriesComponent()));
  _ngRef.reflector
      .registerSimpleType(AnotherDirective, () => new AnotherDirective());
  _i1.initReflector();
}
