// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'events.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'dart:async';
import 'package:angular/angular.template.dart'
    as _i1;
export 'events.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'events.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$UsesNativeEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesNativeEvents0 = [null, null, null];

class ViewUsesNativeEvents0 extends DebugAppView<import2.UsesNativeEvents> {
  import3.ButtonElement _el_1;
  static RenderComponentType renderType;
  ViewUsesNativeEvents0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_UsesNativeEvents0) {
    rootEl = import3.document.createElement('uses-native-events');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/events.dart class UsesNativeEvents - inline template',
        ViewEncapsulation.None,
        styles$UsesNativeEvents);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import2.UsesNativeEvents _ctx = ctx;
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    import3.Text _text_0 = new import3.Text('    ');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    var doc = import3.document;
    _el_1 = createAndAppendDbg(this, doc, 'button', parentRenderNode, 1, 0, 4);
    import3.Text _text_2 = new import3.Text('\n  ');
    parentRenderNode.append(_text_2);
    dbgElm(this, _text_2, 2, 0, 41);
    _el_1.addEventListener('click', eventHandler0(ctx.onClick));
    init(const [], const [], [_text_0, _el_1, _text_2]);
    rootEl.addEventListener('focus', eventHandler0(_ctx.onFocus));
    return null;
  }
}

AppView<import2.UsesNativeEvents> viewFactory_UsesNativeEvents0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewUsesNativeEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesNativeEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesNativeEventsHost0 = [
  new StaticNodeDebugInfo(
      [import2.UsesNativeEvents], import2.UsesNativeEvents, <String, dynamic>{})
];

class ViewUsesNativeEventsHost0 extends DebugAppView<dynamic> {
  ViewUsesNativeEvents0 _compView_0;
  import2.UsesNativeEvents _UsesNativeEvents_0_4;
  static RenderComponentType renderType;
  ViewUsesNativeEventsHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_UsesNativeEventsHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$UsesNativeEventsHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesNativeEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _UsesNativeEvents_0_4 = new import2.UsesNativeEvents();
    _compView_0.create(_UsesNativeEvents_0_4, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _UsesNativeEvents_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.UsesNativeEvents) && (0 == nodeIndex))) {
      return _UsesNativeEvents_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_UsesNativeEventsHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewUsesNativeEventsHost0(parentView, parentIndex);
}

const ComponentFactory UsesNativeEventsNgFactory = const ComponentFactory(
    'uses-native-events',
    viewFactory_UsesNativeEventsHost0,
    import2.UsesNativeEvents,
    _METADATA);
const List<dynamic> styles$UsesAngularEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesAngularEvents0 = [
  null,
  new StaticNodeDebugInfo([import2.HasAngularEvents], import2.HasAngularEvents,
      <String, dynamic>{}),
  null
];

class ViewUsesAngularEvents0 extends DebugAppView<import2.UsesAngularEvents> {
  import3.Element _el_1;
  ViewHasAngularEvents0 _compView_1;
  import2.HasAngularEvents _HasAngularEvents_1_4;
  static RenderComponentType renderType;
  ViewUsesAngularEvents0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_UsesAngularEvents0) {
    rootEl = import3.document.createElement('uses-angular-events');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/events.dart class UsesAngularEvents - inline template',
        ViewEncapsulation.None,
        styles$UsesAngularEvents);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    import3.Text _text_0 = new import3.Text('    ');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    _compView_1 = new ViewHasAngularEvents0(this, 1);
    _el_1 = _compView_1.rootEl;
    parentRenderNode.append(_el_1);
    dbgElm(this, _el_1, 1, 0, 4);
    _HasAngularEvents_1_4 = new import2.HasAngularEvents();
    _compView_1.create(_HasAngularEvents_1_4, []);
    import3.Text _text_2 = new import3.Text('\n  ');
    parentRenderNode.append(_text_2);
    dbgElm(this, _text_2, 2, 0, 61);
    final subscription_0 =
        _HasAngularEvents_1_4.foo.listen(eventHandler0(ctx.onFoo));
    init(const [], [subscription_0], [_text_0, _el_1, _text_2]);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.HasAngularEvents) && (1 == nodeIndex))) {
      return _HasAngularEvents_1_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_1.destroy();
  }
}

AppView<import2.UsesAngularEvents> viewFactory_UsesAngularEvents0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewUsesAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesAngularEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesAngularEventsHost0 = [
  new StaticNodeDebugInfo([import2.UsesAngularEvents],
      import2.UsesAngularEvents, <String, dynamic>{})
];

class ViewUsesAngularEventsHost0 extends DebugAppView<dynamic> {
  ViewUsesAngularEvents0 _compView_0;
  import2.UsesAngularEvents _UsesAngularEvents_0_4;
  static RenderComponentType renderType;
  ViewUsesAngularEventsHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_UsesAngularEventsHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$UsesAngularEventsHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _UsesAngularEvents_0_4 = new import2.UsesAngularEvents();
    _compView_0.create(_UsesAngularEvents_0_4, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _UsesAngularEvents_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.UsesAngularEvents) && (0 == nodeIndex))) {
      return _UsesAngularEvents_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_UsesAngularEventsHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewUsesAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory UsesAngularEventsNgFactory = const ComponentFactory(
    'uses-angular-events',
    viewFactory_UsesAngularEventsHost0,
    import2.UsesAngularEvents,
    _METADATA);
const List<dynamic> styles$HasAngularEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasAngularEvents0 = [];

class ViewHasAngularEvents0 extends DebugAppView<import2.HasAngularEvents> {
  static RenderComponentType renderType;
  ViewHasAngularEvents0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasAngularEvents0) {
    rootEl = import3.document.createElement('has-angular-events');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/events.dart class HasAngularEvents - inline template',
        ViewEncapsulation.None,
        styles$HasAngularEvents);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], const [], []);
    return null;
  }
}

AppView<import2.HasAngularEvents> viewFactory_HasAngularEvents0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHasAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$HasAngularEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasAngularEventsHost0 = [
  new StaticNodeDebugInfo(
      [import2.HasAngularEvents], import2.HasAngularEvents, <String, dynamic>{})
];

class ViewHasAngularEventsHost0 extends DebugAppView<dynamic> {
  ViewHasAngularEvents0 _compView_0;
  import2.HasAngularEvents _HasAngularEvents_0_4;
  static RenderComponentType renderType;
  ViewHasAngularEventsHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasAngularEventsHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$HasAngularEventsHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _HasAngularEvents_0_4 = new import2.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_4, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _HasAngularEvents_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.HasAngularEvents) && (0 == nodeIndex))) {
      return _HasAngularEvents_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_HasAngularEventsHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHasAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory HasAngularEventsNgFactory = const ComponentFactory(
    'has-angular-events',
    viewFactory_HasAngularEventsHost0,
    import2.HasAngularEvents,
    _METADATA);
const _METADATA = const <dynamic>[
  UsesNativeEvents,
  const <dynamic>[],
  UsesAngularEvents,
  const <dynamic>[],
  HasAngularEvents,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      UsesNativeEvents,
      new _ngRef.ReflectionInfo(const <dynamic>[UsesNativeEventsNgFactory],
          const [], () => new UsesNativeEvents()));
  _ngRef.reflector.registerType(
      UsesAngularEvents,
      new _ngRef.ReflectionInfo(const <dynamic>[UsesAngularEventsNgFactory],
          const [], () => new UsesAngularEvents()));
  _ngRef.reflector.registerType(
      HasAngularEvents,
      new _ngRef.ReflectionInfo(const <dynamic>[HasAngularEventsNgFactory],
          const [], () => new HasAngularEvents()));
  _i1.initReflector();
}
