// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'providers.dart';
export 'providers.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'providers.dart' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/core/zone/ng_zone.dart'
    as import10;

const List<dynamic> styles$ProvidersComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_ProvidersComponent0 = [null];

class ViewProvidersComponent0 extends DebugAppView<import2.ProvidersComponent> {
  static RenderComponentType _renderType;
  ViewProvidersComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_ProvidersComponent0) {
    rootEl = import7.document.createElement('providers');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/providers.dart class ProvidersComponent - inline template',
        ViewEncapsulation.None,
        styles$ProvidersComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import7.HtmlElement parentRenderNode = initViewRoot(rootEl);
    import7.Text _text_0 = new import7.Text('Hello');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    init(const [], null, [_text_0]);
    return null;
  }
}

AppView<import2.ProvidersComponent> viewFactory_ProvidersComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewProvidersComponent0(parentView, parentIndex);
}

const List<dynamic> styles$ProvidersComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_ProvidersComponentHost0 = [
  new StaticNodeDebugInfo(
      [
        import2.ProvidersComponent,
        import2.MyInjectableTypeAnnotation,
        import2.MyUseFactory,
        import2.MyUseClass,
        import2.MyUseExisting,
        import2.MyUseExistingNested,
        import2.MyUseValue,
        const OpaqueToken('useValueString'),
        import2.MyMulti,
        const OpaqueToken('useValueList'),
        const OpaqueToken('useValueMap'),
        const OpaqueToken('useEnums')
      ],
      import2.ProvidersComponent,
      <String, dynamic>{})
];

class _ViewProvidersComponentHost0 extends DebugAppView<dynamic> {
  ViewProvidersComponent0 _compView_0;
  import2.ProvidersComponent _ProvidersComponent_0_4;
  import2.MyInjectableTypeAnnotation __MyInjectableTypeAnnotation_0_5;
  dynamic __MyUseFactory_0_6;
  import2.MyUseClass __MyUseClass_0_7;
  import2.MyUseValue __MyUseValue_0_10;
  String __const_OpaqueToken__useValueString___0_11;
  List<dynamic> __MyMulti_0_12;
  List<dynamic> __const_OpaqueToken__useValueList___0_13;
  Map<String, dynamic> __const_OpaqueToken__useValueMap___0_14;
  dynamic __const_OpaqueToken__useEnums___0_15;
  static RenderComponentType _renderType;
  _ViewProvidersComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_ProvidersComponentHost0) {
    _renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$ProvidersComponentHost);
    setupComponentType(_renderType);
  }
  import2.MyInjectableTypeAnnotation get _MyInjectableTypeAnnotation_0_5 {
    dbg(0, 0, 0);
    if ((this.__MyInjectableTypeAnnotation_0_5 == null)) {
      (__MyInjectableTypeAnnotation_0_5 =
          new import2.MyInjectableTypeAnnotation());
    }
    return this.__MyInjectableTypeAnnotation_0_5;
  }

  dynamic get _MyUseFactory_0_6 {
    dbg(0, 0, 0);
    if ((this.__MyUseFactory_0_6 == null)) {
      (__MyUseFactory_0_6 = import2.ProvidersComponent.createService(
          this.injectorGet(import10.NgZone, this.viewData.parentIndex)));
    }
    return this.__MyUseFactory_0_6;
  }

  import2.MyUseClass get _MyUseClass_0_7 {
    dbg(0, 0, 0);
    if ((this.__MyUseClass_0_7 == null)) {
      (__MyUseClass_0_7 = new import2.MyUseClass());
    }
    return this.__MyUseClass_0_7;
  }

  import2.MyUseValue get _MyUseValue_0_10 {
    dbg(0, 0, 0);
    if ((this.__MyUseValue_0_10 == null)) {
      (__MyUseValue_0_10 = const import2.MyUseValue('Matan'));
    }
    return this.__MyUseValue_0_10;
  }

  String get _const_OpaqueToken__useValueString___0_11 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueString___0_11 == null)) {
      (__const_OpaqueToken__useValueString___0_11 = 'foo');
    }
    return this.__const_OpaqueToken__useValueString___0_11;
  }

  List<dynamic> get _MyMulti_0_12 {
    dbg(0, 0, 0);
    if ((this.__MyMulti_0_12 == null)) {
      (__MyMulti_0_12 = [null]);
    }
    return this.__MyMulti_0_12;
  }

  List<dynamic> get _const_OpaqueToken__useValueList___0_13 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueList___0_13 == null)) {
      (__const_OpaqueToken__useValueList___0_13 = const [
        const import2.MyUseValue('Andrew'),
        const import2.MyUseValue('Matan'),
        const import2.MyUseValue.named(optional: true)
      ]);
    }
    return this.__const_OpaqueToken__useValueList___0_13;
  }

  Map<String, dynamic> get _const_OpaqueToken__useValueMap___0_14 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueMap___0_14 == null)) {
      (__const_OpaqueToken__useValueMap___0_14 = const {
        'Andrew': const import2.MyUseValue('Andrew'),
        'Matan': const import2.MyUseValue('Matan')
      });
    }
    return this.__const_OpaqueToken__useValueMap___0_14;
  }

  dynamic get _const_OpaqueToken__useEnums___0_15 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useEnums___0_15 == null)) {
      (__const_OpaqueToken__useEnums___0_15 = import2.MyEnum.first);
    }
    return this.__const_OpaqueToken__useEnums___0_15;
  }

  @override
  ComponentRef build() {
    _compView_0 = new ViewProvidersComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _ProvidersComponent_0_4 = new import2.ProvidersComponent();
    _compView_0.create(_ProvidersComponent_0_4, projectableNodes);
    init([rootEl], null, [rootEl]);
    return new ComponentRef(0, this, rootEl, _ProvidersComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.ProvidersComponent) && (0 == nodeIndex))) {
      return _ProvidersComponent_0_4;
    }
    if ((identical(token, import2.MyInjectableTypeAnnotation) &&
        (0 == nodeIndex))) {
      return _MyInjectableTypeAnnotation_0_5;
    }
    if ((identical(token, import2.MyUseFactory) && (0 == nodeIndex))) {
      return _MyUseFactory_0_6;
    }
    if ((((identical(token, import2.MyUseClass) ||
                identical(token, import2.MyUseExisting)) ||
            identical(token, import2.MyUseExistingNested)) &&
        (0 == nodeIndex))) {
      return _MyUseClass_0_7;
    }
    if ((identical(token, import2.MyUseValue) && (0 == nodeIndex))) {
      return _MyUseValue_0_10;
    }
    if ((identical(token, const OpaqueToken('useValueString')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueString___0_11;
    }
    if ((identical(token, import2.MyMulti) && (0 == nodeIndex))) {
      return _MyMulti_0_12;
    }
    if ((identical(token, const OpaqueToken('useValueList')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueList___0_13;
    }
    if ((identical(token, const OpaqueToken('useValueMap')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueMap___0_14;
    }
    if ((identical(token, const OpaqueToken('useEnums')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__useEnums___0_15;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_ProvidersComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewProvidersComponentHost0(parentView, parentIndex);
}

const ComponentFactory _ProvidersComponentNgFactory = const ComponentFactory(
    'providers',
    viewFactory_ProvidersComponentHost0,
    import2.ProvidersComponent,
    _ProvidersComponentMetadata);
final ComponentFactory ProvidersComponentNgFactory =
    _ProvidersComponentNgFactory;
const _ProvidersComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    ProvidersComponent,
    ProvidersComponentNgFactory,
  );
  _ngRef.registerFactory(
    ProvidersComponent,
    () => new ProvidersComponent(),
  );

  _ngRef.registerFactory(
    MyInjectableTypeAnnotation,
    () => new MyInjectableTypeAnnotation(),
  );
}
