// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'change_detection.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/facade/lang.dart'
    as import8;

const List<dynamic> styles$CheckOnceComponent = const [];

class ViewCheckOnceComponent0 extends AppView<import1.CheckOnceComponent> {
  import2.DivElement _el_0;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewCheckOnceComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('CheckOnce');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$CheckOnceComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('CheckOnce');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }

  void detectHostChanges(bool firstCheck) {
    final currVal_0 = ctx.id;
    if (!import8.looseIdentical(_expr_0, currVal_0)) {
      setProp(rootEl, 'id', currVal_0);
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.CheckOnceComponent> viewFactory_CheckOnceComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewCheckOnceComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckOnceComponentHost = const [];

class _ViewCheckOnceComponentHost0 extends AppView<dynamic> {
  ViewCheckOnceComponent0 _compView_0;
  import1.CheckOnceComponent _CheckOnceComponent_0_4;
  static RenderComponentType _renderType;
  _ViewCheckOnceComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$CheckOnceComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckOnceComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckOnceComponent_0_4 = new import1.CheckOnceComponent();
    _compView_0.create(_CheckOnceComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _CheckOnceComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.CheckOnceComponent) && (0 == nodeIndex))) {
      return _CheckOnceComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckOnceComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewCheckOnceComponentHost0(parentView, parentIndex);
}

const ComponentFactory _CheckOnceComponentNgFactory = const ComponentFactory(
    'CheckOnce',
    viewFactory_CheckOnceComponentHost0,
    import1.CheckOnceComponent,
    _CheckOnceComponentMetadata);
final ComponentFactory CheckOnceComponentNgFactory =
    _CheckOnceComponentNgFactory;
const List<dynamic> styles$CheckedComponent = const [];

class ViewCheckedComponent0 extends AppView<import1.CheckedComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckedComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('Checked');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$CheckedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('Checked');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.CheckedComponent> viewFactory_CheckedComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewCheckedComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckedComponentHost = const [];

class _ViewCheckedComponentHost0 extends AppView<dynamic> {
  ViewCheckedComponent0 _compView_0;
  import1.CheckedComponent _CheckedComponent_0_4;
  static RenderComponentType _renderType;
  _ViewCheckedComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$CheckedComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckedComponent_0_4 = new import1.CheckedComponent();
    _compView_0.create(_CheckedComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _CheckedComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.CheckedComponent) && (0 == nodeIndex))) {
      return _CheckedComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckedComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewCheckedComponentHost0(parentView, parentIndex);
}

const ComponentFactory _CheckedComponentNgFactory = const ComponentFactory(
    'Checked',
    viewFactory_CheckedComponentHost0,
    import1.CheckedComponent,
    _CheckedComponentMetadata);
final ComponentFactory CheckedComponentNgFactory = _CheckedComponentNgFactory;
const List<dynamic> styles$CheckAlwaysComponent = const [];

class ViewCheckAlwaysComponent0 extends AppView<import1.CheckAlwaysComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckAlwaysComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('CheckAlways');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$CheckAlwaysComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('CheckAlways');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.CheckAlwaysComponent> viewFactory_CheckAlwaysComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewCheckAlwaysComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckAlwaysComponentHost = const [];

class _ViewCheckAlwaysComponentHost0 extends AppView<dynamic> {
  ViewCheckAlwaysComponent0 _compView_0;
  import1.CheckAlwaysComponent _CheckAlwaysComponent_0_4;
  static RenderComponentType _renderType;
  _ViewCheckAlwaysComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$CheckAlwaysComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckAlwaysComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckAlwaysComponent_0_4 = new import1.CheckAlwaysComponent();
    _compView_0.create(_CheckAlwaysComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _CheckAlwaysComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.CheckAlwaysComponent) && (0 == nodeIndex))) {
      return _CheckAlwaysComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckAlwaysComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewCheckAlwaysComponentHost0(parentView, parentIndex);
}

const ComponentFactory _CheckAlwaysComponentNgFactory = const ComponentFactory(
    'CheckAlways',
    viewFactory_CheckAlwaysComponentHost0,
    import1.CheckAlwaysComponent,
    _CheckAlwaysComponentMetadata);
final ComponentFactory CheckAlwaysComponentNgFactory =
    _CheckAlwaysComponentNgFactory;
const List<dynamic> styles$DetachedComponent = const [];

class ViewDetachedComponent0 extends AppView<import1.DetachedComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDetachedComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('Detached');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$DetachedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('Detached');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.DetachedComponent> viewFactory_DetachedComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewDetachedComponent0(parentView, parentIndex);
}

const List<dynamic> styles$DetachedComponentHost = const [];

class _ViewDetachedComponentHost0 extends AppView<dynamic> {
  ViewDetachedComponent0 _compView_0;
  import1.DetachedComponent _DetachedComponent_0_4;
  static RenderComponentType _renderType;
  _ViewDetachedComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$DetachedComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewDetachedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DetachedComponent_0_4 = new import1.DetachedComponent();
    _compView_0.create(_DetachedComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _DetachedComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.DetachedComponent) && (0 == nodeIndex))) {
      return _DetachedComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_DetachedComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewDetachedComponentHost0(parentView, parentIndex);
}

const ComponentFactory _DetachedComponentNgFactory = const ComponentFactory(
    'Detached',
    viewFactory_DetachedComponentHost0,
    import1.DetachedComponent,
    _DetachedComponentMetadata);
final ComponentFactory DetachedComponentNgFactory = _DetachedComponentNgFactory;
const List<dynamic> styles$OnPushComponent = const [];

class ViewOnPushComponent0 extends AppView<import1.OnPushComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewOnPushComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('OnPush');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$OnPushComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('OnPush');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.OnPushComponent> viewFactory_OnPushComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewOnPushComponent0(parentView, parentIndex);
}

const List<dynamic> styles$OnPushComponentHost = const [];

class _ViewOnPushComponentHost0 extends AppView<dynamic> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_4;
  static RenderComponentType _renderType;
  _ViewOnPushComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$OnPushComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewOnPushComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _OnPushComponent_0_4 = new import1.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _OnPushComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.OnPushComponent) && (0 == nodeIndex))) {
      return _OnPushComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_OnPushComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewOnPushComponentHost0(parentView, parentIndex);
}

const ComponentFactory _OnPushComponentNgFactory = const ComponentFactory(
    'OnPush',
    viewFactory_OnPushComponentHost0,
    import1.OnPushComponent,
    _OnPushComponentMetadata);
final ComponentFactory OnPushComponentNgFactory = _OnPushComponentNgFactory;
const List<dynamic> styles$StatefulComponent = const [];

class ViewStatefulComponent0 extends AppView<import1.StatefulComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewStatefulComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckOnce) {
    rootEl = import2.document.createElement('Stateful');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$StatefulComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import1.StatefulComponent _ctx = ctx;
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('Stateful');
    _el_0.append(_text_1);
    init(const [], null);
    _ctx.stateChangeCallback = markStateChanged;
    return null;
  }
}

AppView<import1.StatefulComponent> viewFactory_StatefulComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewStatefulComponent0(parentView, parentIndex);
}

const List<dynamic> styles$StatefulComponentHost = const [];

class _ViewStatefulComponentHost0 extends AppView<dynamic> {
  ViewStatefulComponent0 _compView_0;
  import1.StatefulComponent _StatefulComponent_0_4;
  static RenderComponentType _renderType;
  _ViewStatefulComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$StatefulComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewStatefulComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _StatefulComponent_0_4 = new import1.StatefulComponent();
    _compView_0.create(_StatefulComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _StatefulComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.StatefulComponent) && (0 == nodeIndex))) {
      return _StatefulComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_StatefulComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewStatefulComponentHost0(parentView, parentIndex);
}

const ComponentFactory _StatefulComponentNgFactory = const ComponentFactory(
    'Stateful',
    viewFactory_StatefulComponentHost0,
    import1.StatefulComponent,
    _StatefulComponentMetadata);
final ComponentFactory StatefulComponentNgFactory = _StatefulComponentNgFactory;
const List<dynamic> styles$DefaultComponent = const [];

class ViewDefaultComponent0 extends AppView<import1.DefaultComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDefaultComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('Default');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$DefaultComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    import2.Text _text_1 = new import2.Text('Default');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.DefaultComponent> viewFactory_DefaultComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewDefaultComponent0(parentView, parentIndex);
}

const List<dynamic> styles$DefaultComponentHost = const [];

class _ViewDefaultComponentHost0 extends AppView<dynamic> {
  ViewDefaultComponent0 _compView_0;
  import1.DefaultComponent _DefaultComponent_0_4;
  static RenderComponentType _renderType;
  _ViewDefaultComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$DefaultComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewDefaultComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DefaultComponent_0_4 = new import1.DefaultComponent();
    _compView_0.create(_DefaultComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _DefaultComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.DefaultComponent) && (0 == nodeIndex))) {
      return _DefaultComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_DefaultComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewDefaultComponentHost0(parentView, parentIndex);
}

const ComponentFactory _DefaultComponentNgFactory = const ComponentFactory(
    'Default',
    viewFactory_DefaultComponentHost0,
    import1.DefaultComponent,
    _DefaultComponentMetadata);
final ComponentFactory DefaultComponentNgFactory = _DefaultComponentNgFactory;
const _CheckOnceComponentMetadata = const [];
const _CheckedComponentMetadata = const [];
const _CheckAlwaysComponentMetadata = const [];
const _DetachedComponentMetadata = const [];
const _OnPushComponentMetadata = const [];
const _StatefulComponentMetadata = const [];
const _DefaultComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    CheckOnceComponent,
    CheckOnceComponentNgFactory,
  );
  _ngRef.registerFactory(
    CheckOnceComponent,
    () => new CheckOnceComponent(),
  );

  _ngRef.registerComponent(
    CheckedComponent,
    CheckedComponentNgFactory,
  );
  _ngRef.registerFactory(
    CheckedComponent,
    () => new CheckedComponent(),
  );

  _ngRef.registerComponent(
    CheckAlwaysComponent,
    CheckAlwaysComponentNgFactory,
  );
  _ngRef.registerFactory(
    CheckAlwaysComponent,
    () => new CheckAlwaysComponent(),
  );

  _ngRef.registerComponent(
    DetachedComponent,
    DetachedComponentNgFactory,
  );
  _ngRef.registerFactory(
    DetachedComponent,
    () => new DetachedComponent(),
  );

  _ngRef.registerComponent(
    OnPushComponent,
    OnPushComponentNgFactory,
  );
  _ngRef.registerFactory(
    OnPushComponent,
    () => new OnPushComponent(),
  );

  _ngRef.registerComponent(
    StatefulComponent,
    StatefulComponentNgFactory,
  );
  _ngRef.registerFactory(
    StatefulComponent,
    () => new StatefulComponent(),
  );

  _ngRef.registerComponent(
    DefaultComponent,
    DefaultComponentNgFactory,
  );
  _ngRef.registerFactory(
    DefaultComponent,
    () => new DefaultComponent(),
  );
}
