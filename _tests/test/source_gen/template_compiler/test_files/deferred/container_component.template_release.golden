// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'container_component.dart';
export 'container_component.dart';
import 'package:angular/angular.dart';
import 'deferred_component.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'deferred_component.template.dart' as _ref0;
import 'package:angular/angular.template.dart'
    as _ref1;

import 'package:angular/src/core/linker/app_view.dart';
import 'container_component.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'deferred_component.template.dart' deferred as deflib1;
import 'deferred_component.dart' deferred as deflib0;

const List<dynamic> styles$TestContainerComponent = const [];

class ViewTestContainerComponent0
    extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  static RenderComponentType _renderType;
  ViewTestContainerComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import6.document.createElement('test-container');
    _renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$TestContainerComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var _anchor_0 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_0);
    _appEl_0 = new ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_5 =
        new TemplateRef(_appEl_0, viewFactory_TestContainerComponent1);
    loadDeferred(
        deflib0.loadLibrary, deflib1.loadLibrary, _appEl_0, _TemplateRef_0_5,
        () {
      deflib1.initReflector();
    });
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    _appEl_0.detectChangesInNestedViews();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestContainerComponent0(parentView, parentIndex);
}

class _ViewTestContainerComponent1
    extends AppView<import1.TestContainerComponent> {
  import6.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChildComponent_0_4;
  _ViewTestContainerComponent1(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.EMBEDDED, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = deflib1.viewFactory_DeferredChildComponent0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChildComponent_0_4 = new deflib0.DeferredChildComponent();
    import6.Text _text_1 = new import6.Text('Foo');
    _compView_0.create(_DeferredChildComponent_0_4, []);
    init([_el_0], null);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, deflib0.DeferredChildComponent) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _DeferredChildComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent1(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestContainerComponent1(parentView, parentIndex);
}

const List<dynamic> styles$TestContainerComponentHost = const [];

class _ViewTestContainerComponentHost0 extends AppView<dynamic> {
  ViewTestContainerComponent0 _compView_0;
  import1.TestContainerComponent _TestContainerComponent_0_4;
  static RenderComponentType _renderType;
  _ViewTestContainerComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestContainerComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestContainerComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestContainerComponent_0_4 = new import1.TestContainerComponent();
    _compView_0.create(_TestContainerComponent_0_4, projectableNodes);
    init([rootEl], null);
    return new ComponentRef<import1.TestContainerComponent>(
        0, this, rootEl, _TestContainerComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestContainerComponent) &&
        (0 == nodeIndex))) {
      return _TestContainerComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestContainerComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestContainerComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.TestContainerComponent>
    TestContainerComponentNgFactory =
    const ComponentFactory<import1.TestContainerComponent>(
        'test-container',
        viewFactory_TestContainerComponentHost0,
        _TestContainerComponentMetadata);
const _TestContainerComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ref1.initReflector();
  _ngRef.registerComponent(
    TestContainerComponent,
    TestContainerComponentNgFactory,
  );
}
