// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'opaque_token.dart';
export 'opaque_token.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'opaque_token.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import6;
import 'package:angular/angular.dart';

const List<dynamic> styles$HasOpaqueTokens = const [];

class ViewHasOpaqueTokens0 extends AppView<import1.HasOpaqueTokens> {
  import2.Text _text_0;
  static RenderComponentType _renderType;
  ViewHasOpaqueTokens0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('has-opaque-tokens');
    _renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$HasOpaqueTokens);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    _text_0 = new import2.Text('');
    parentRenderNode.append(_text_0);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.HasOpaqueTokens _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      (_text_0.text = (_ctx.baseUrl ?? ''));
    }
  }
}

AppView<import1.HasOpaqueTokens> viewFactory_HasOpaqueTokens0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHasOpaqueTokens0(parentView, parentIndex);
}

const List<dynamic> styles$HasOpaqueTokensHost = const [];

class _ViewHasOpaqueTokensHost0 extends AppView<dynamic> {
  ViewHasOpaqueTokens0 _compView_0;
  String _const_OpaqueToken__baseUrlDescription___0_4;
  import1.HasOpaqueTokens _HasOpaqueTokens_0_5;
  static RenderComponentType _renderType;
  _ViewHasOpaqueTokensHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$HasOpaqueTokensHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasOpaqueTokens0(this, 0);
    rootEl = _compView_0.rootEl;
    _const_OpaqueToken__baseUrlDescription___0_4 = 'https://localhost';
    _HasOpaqueTokens_0_5 = new import1.HasOpaqueTokens(
        _const_OpaqueToken__baseUrlDescription___0_4);
    _compView_0.create(_HasOpaqueTokens_0_5, projectableNodes);
    init([rootEl], null);
    return new ComponentRef(0, this, rootEl, _HasOpaqueTokens_0_5);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const OpaqueToken('baseUrlDescription')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__baseUrlDescription___0_4;
    }
    if ((identical(token, import1.HasOpaqueTokens) && (0 == nodeIndex))) {
      return _HasOpaqueTokens_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HasOpaqueTokensHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewHasOpaqueTokensHost0(parentView, parentIndex);
}

const ComponentFactory _HasOpaqueTokensNgFactory = const ComponentFactory(
    'has-opaque-tokens',
    viewFactory_HasOpaqueTokensHost0,
    import1.HasOpaqueTokens,
    _HasOpaqueTokensMetadata);
final ComponentFactory HasOpaqueTokensNgFactory = _HasOpaqueTokensNgFactory;
const _HasOpaqueTokensMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    HasOpaqueTokens,
    HasOpaqueTokensNgFactory,
  );
}
