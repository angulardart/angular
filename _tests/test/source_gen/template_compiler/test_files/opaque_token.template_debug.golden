// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'opaque_token.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _i1;
export 'opaque_token.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'opaque_token.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$HasOpaqueTokens = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasOpaqueTokens0 = [null];

class ViewHasOpaqueTokens0 extends DebugAppView<import2.HasOpaqueTokens> {
  import3.Text _text_0;
  var _expr_0;
  static RenderComponentType renderType;
  ViewHasOpaqueTokens0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasOpaqueTokens0) {
    rootEl = import3.document.createElement('has-opaque-tokens');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/opaque_token.dart class HasOpaqueTokens - inline template',
        ViewEncapsulation.None,
        styles$HasOpaqueTokens);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    _text_0 = new import3.Text('');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    init(const [], const [], [_text_0]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import2.HasOpaqueTokens _ctx = ctx;
    dbg(0, 0, 0);
    final currVal_0 = import8.interpolate0(_ctx.baseUrl);
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _text_0.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import2.HasOpaqueTokens> viewFactory_HasOpaqueTokens0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHasOpaqueTokens0(parentView, parentIndex);
}

const List<dynamic> styles$HasOpaqueTokensHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasOpaqueTokensHost0 = [
  new StaticNodeDebugInfo(
      [const OpaqueToken('baseUrlDescription'), import2.HasOpaqueTokens],
      import2.HasOpaqueTokens,
      <String, dynamic>{})
];

class ViewHasOpaqueTokensHost0 extends DebugAppView<dynamic> {
  ViewHasOpaqueTokens0 _compView_0;
  String _const_OpaqueToken__baseUrlDescription___0_2;
  import2.HasOpaqueTokens _HasOpaqueTokens_0_3;
  static RenderComponentType renderType;
  ViewHasOpaqueTokensHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasOpaqueTokensHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$HasOpaqueTokensHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasOpaqueTokens0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _const_OpaqueToken__baseUrlDescription___0_2 = 'https://localhost';
    _HasOpaqueTokens_0_3 = new import2.HasOpaqueTokens(
        _const_OpaqueToken__baseUrlDescription___0_2);
    _compView_0.create(_HasOpaqueTokens_0_3, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _HasOpaqueTokens_0_3);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const OpaqueToken('baseUrlDescription')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__baseUrlDescription___0_2;
    }
    if ((identical(token, import2.HasOpaqueTokens) && (0 == nodeIndex))) {
      return _HasOpaqueTokens_0_3;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_HasOpaqueTokensHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHasOpaqueTokensHost0(parentView, parentIndex);
}

const ComponentFactory HasOpaqueTokensNgFactory = const ComponentFactory(
    'has-opaque-tokens',
    viewFactory_HasOpaqueTokensHost0,
    import2.HasOpaqueTokens,
    _METADATA);
const _METADATA = const <dynamic>[HasOpaqueTokens, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      HasOpaqueTokens,
      new _ngRef.ReflectionInfo(const <dynamic>[
        HasOpaqueTokensNgFactory
      ], const [
        const <dynamic>[String, const Inject(baseUrlToken)]
      ], (String baseUrl) => new HasOpaqueTokens(baseUrl)));
  _i1.initReflector();
}
