// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'components.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _i1;
export 'components.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'components.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$TestSubComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestSubComponent0 = [null, null];

class ViewTestSubComponent0 extends DebugAppView<import2.TestSubComponent> {
  import3.DivElement _el_0;
  static RenderComponentType renderType;
  ViewTestSubComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestSubComponent0) {
    rootEl = import3.document.createElement('test-bar');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/directives/components.dart class TestSubComponent - inline template',
        ViewEncapsulation.None,
        styles$TestSubComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Bar');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], const [], [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.TestSubComponent> viewFactory_TestSubComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestSubComponent0(parentView, parentIndex);
}

const List<dynamic> styles$TestSubComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestSubComponentHost0 = [
  new StaticNodeDebugInfo(
      [import2.TestSubComponent], import2.TestSubComponent, <String, dynamic>{})
];

class ViewTestSubComponentHost0 extends DebugAppView<dynamic> {
  ViewTestSubComponent0 _compView_0;
  import2.TestSubComponent _TestSubComponent_0_2;
  static RenderComponentType renderType;
  ViewTestSubComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestSubComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestSubComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestSubComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestSubComponent_0_2 = new import2.TestSubComponent();
    _compView_0.create(_TestSubComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _TestSubComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.TestSubComponent) && (0 == nodeIndex))) {
      return _TestSubComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestSubComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestSubComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestSubComponentNgFactory = const ComponentFactory(
    'test-bar',
    viewFactory_TestSubComponentHost0,
    import2.TestSubComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestSubComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestSubComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestSubComponentNgFactory],
          const [], () => new TestSubComponent()));
  _i1.initReflector();
}
