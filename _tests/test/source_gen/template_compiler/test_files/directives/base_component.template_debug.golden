// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'base_component.dart';
import 'package:angular/src/core/reflection/reflection.dart'
    as _ngRef;
import 'components.dart';
import 'directives.dart' as directive;
import 'package:angular/angular.template.dart'
    as _i1;
import 'components.template.dart' as _i2;
import 'directives.template.dart' as _i3;
export 'base_component.dart';
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'base_component.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$TestFooComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [null, null];

class ViewTestFooComponent0 extends DebugAppView<import2.TestFooComponent> {
  import3.DivElement _el_0;
  static RenderComponentType renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent0) {
    rootEl = import3.document.createElement('test-foo');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:_tests/test/source_gen/template_compiler/test_files/directives/base_component.dart class TestFooComponent - inline template',
        ViewEncapsulation.None,
        styles$TestFooComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Foo');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], const [], [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo(
      [import2.TestFooComponent], import2.TestFooComponent, <String, dynamic>{})
];

class ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import2.TestFooComponent _TestFooComponent_0_4;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestFooComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_4 = new import2.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_4, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import2.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestFooComponentNgFactory],
          const [], () => new TestFooComponent()));
  _i1.initReflector();
  _i2.initReflector();
  _i3.initReflector();
}
