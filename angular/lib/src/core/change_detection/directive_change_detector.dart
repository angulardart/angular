import 'dart:html';
import 'dart:js_util' as js_util;

import '../metadata/lifecycle_hooks.dart';
import 'change_detection_util.dart';

/// Base class for directive change detectors that are generated by compiler.
///
/// A directive change detector only extends this class if it requires lifecycle
/// calls. Goal is to share code for ngOnChanges implementation and other
/// lifecycle methods.
class DirectiveChangeDetector {
  dynamic directive;
  Map<String, SimpleChange> changes;

  /// Buffers a new change to be delivered at the end of parent change
  /// detection cycle.
  void addChange(String key, dynamic previousValue, dynamic currentValue) {
    changes ??= {};
    changes[key] = new SimpleChange(previousValue, currentValue);
  }

  /// Delivers ngOnChanges to directive and clears map.
  void deliverChanges() {
    OnChanges target = directive;
    if (changes != null) {
      target.ngOnChanges(changes);
      changes = null;
    }
  }

  // Updates classes for non html nodes such as svg.
  void updateElemClass(Element element, String className, bool isAdd) {
    if (isAdd) {
      element.classes.add(className);
    } else {
      element.classes.remove(className);
    }
  }

  void setAttr(
      Element renderElement, String attributeName, String attributeValue) {
    if (attributeValue != null) {
      renderElement.setAttribute(attributeName, attributeValue);
    } else {
      renderElement.attributes.remove(attributeName);
    }
  }

  void createAttr(
      Element renderElement, String attributeName, String attributeValue) {
    renderElement.setAttribute(attributeName, attributeValue);
  }

  void setAttrNS(Element renderElement, String attrNS, String attributeName,
      String attributeValue) {
    if (attributeValue != null) {
      renderElement.setAttributeNS(attrNS, attributeName, attributeValue);
    } else {
      renderElement.getNamespacedAttributes(attrNS).remove(attributeName);
    }
  }

  void setProp(Element element, String name, Object value) {
    js_util.setProperty(element, name, value);
  }
}
