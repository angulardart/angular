import 'dart:html';
import 'dart:js_util' as js_util;

/// Base class for directive change detectors that are generated by compiler.
///
/// A directive change detector only extends this class if it requires lifecycle
/// calls. Goal is to share code for ngOnChanges implementation and other
/// lifecycle methods.
class DirectiveChangeDetector {
  // Updates classes for non html nodes such as svg.
  void updateElemClass(Element element, String className, bool isAdd) {
    if (isAdd) {
      element.classes.add(className);
    } else {
      element.classes.remove(className);
    }
  }

  void setAttr(
      Element renderElement, String attributeName, String attributeValue) {
    if (attributeValue != null) {
      renderElement.setAttribute(attributeName, attributeValue);
    } else {
      renderElement.attributes.remove(attributeName);
    }
  }

  void createAttr(
      Element renderElement, String attributeName, String attributeValue) {
    renderElement.setAttribute(attributeName, attributeValue);
  }

  void setAttrNS(Element renderElement, String attrNS, String attributeName,
      String attributeValue) {
    if (attributeValue != null) {
      renderElement.setAttributeNS(attrNS, attributeName, attributeValue);
    } else {
      renderElement.getNamespacedAttributes(attrNS).remove(attributeName);
    }
  }

  void setProp(Element element, String name, Object value) {
    js_util.setProperty(element, name, value);
  }
}
