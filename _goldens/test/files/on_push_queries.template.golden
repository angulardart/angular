// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'on_push_queries.dart';
export 'on_push_queries.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'on_push_queries.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import8;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/runtime/queries.dart' as import13;
import 'package:angular/src/core/linker/views/embedded_view.dart' as import14;
import 'package:angular/src/core/linker/views/render_view.dart' as import15;

final List<dynamic> styles$Child = const [];

class ViewChild0 extends import0.ComponentView<import1.Child> {
  static import2.ComponentStyles _componentStyles;
  ViewChild0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('child');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/on_push_queries.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$Child, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildNgFactory = ComponentFactory<import1.Child>('child', viewFactory_ChildHost0);
ComponentFactory<import1.Child> get ChildNgFactory {
  return _ChildNgFactory;
}

ComponentFactory<import1.Child> createChildFactory() {
  return ComponentFactory('child', viewFactory_ChildHost0);
}

final List<dynamic> styles$ChildHost = const [];

class _ViewChildHost0 extends import8.HostView<import1.Child> {
  @override
  void build() {
    this.componentView = ViewChild0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Child();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Interface) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import8.HostView<import1.Child> viewFactory_ChildHost0() {
  return _ViewChildHost0();
}

final List<dynamic> styles$Query = const [];

class ViewQuery0 extends import0.ComponentView<import1.Query> {
  bool _viewQuery_Child_1_isDirty = true;
  ViewChild0 _compView_0;
  import1.Child _Child_0_5;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  static import2.ComponentStyles _componentStyles;
  ViewQuery0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('query');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/on_push_queries.dart' : null);
  }

  @override
  void build() {
    final _ctx = this.ctx;
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
    this._compView_0 = ViewChild0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._Child_0_5 = import1.Child();
    this._compView_0.create(this._Child_0_5);
    final _anchor_1 = import11.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_Query1);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    import3.View.queryChangeDetectorRefs[this._Child_0_5] = this._compView_0;
    _ctx.viewInterface = this._Child_0_5;
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Interface) && (0 == nodeIndex))) {
      return this._Child_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.isVisible;
    this._appEl_1.detectChangesInNestedViews();
    if ((!import6.debugThrowIfChanged)) {
      if (this._viewQuery_Child_1_isDirty) {
        import3.View.queryChangeDetectorRefs[this._Child_0_5] = this._compView_0;
        _ctx.viewChildren = import13.flattenNodes([
          [this._Child_0_5],
          this._appEl_1.mapNestedViewsWithSingleResult((_ViewQuery1 nestedView) {
            import3.View.queryChangeDetectorRefs[nestedView._Child_0_5] = nestedView._compView_0;
            return nestedView._Child_0_5;
          })
        ]);
        this._viewQuery_Child_1_isDirty = false;
      }
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
    this._compView_0.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$Query, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _QueryNgFactory = ComponentFactory<import1.Query>('query', viewFactory_QueryHost0);
ComponentFactory<import1.Query> get QueryNgFactory {
  return _QueryNgFactory;
}

ComponentFactory<import1.Query> createQueryFactory() {
  return ComponentFactory('query', viewFactory_QueryHost0);
}

class _ViewQuery1 extends import14.EmbeddedView<import1.Query> {
  ViewChild0 _compView_0;
  import1.Child _Child_0_5;
  _ViewQuery1(import15.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewChild0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._Child_0_5 = import1.Child();
    this._compView_0.create(this._Child_0_5);
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Interface) && (0 == nodeIndex))) {
      return this._Child_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import6.unsafeCast<ViewQuery0>(this.parentView)._viewQuery_Child_1_isDirty = true;
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import14.EmbeddedView<void> viewFactory_Query1(import15.RenderView parentView, int parentIndex) {
  return _ViewQuery1(parentView, parentIndex);
}

final List<dynamic> styles$QueryHost = const [];

class _ViewQueryHost0 extends import8.HostView<import1.Query> {
  @override
  void build() {
    this.componentView = ViewQuery0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Query();
    this.component.contentChildren = [];
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.Query> viewFactory_QueryHost0() {
  return _ViewQueryHost0();
}

final List<dynamic> styles$Test = const [];

class ViewTest0 extends import0.ComponentView<import1.Test> {
  ViewQuery0 _compView_0;
  import1.Query _Query_0_5;
  ViewChild0 _compView_1;
  import1.Child _Child_1_5;
  ViewChild0 _compView_2;
  import1.Child _Child_2_5;
  static import2.ComponentStyles _componentStyles;
  ViewTest0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('test');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/on_push_queries.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewQuery0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._Query_0_5 = import1.Query();
    this._compView_1 = ViewChild0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    this._Child_1_5 = import1.Child();
    this._compView_1.create(this._Child_1_5);
    this._compView_2 = ViewChild0(this, 2);
    final _el_2 = this._compView_2.rootElement;
    this._Child_2_5 = import1.Child();
    this._compView_2.create(this._Child_2_5);
    import3.View.queryChangeDetectorRefs[this._Child_1_5] = this._compView_1;
    import3.View.queryChangeDetectorRefs[this._Child_2_5] = this._compView_2;
    this._Query_0_5.contentChildren = [this._Child_1_5, this._Child_2_5];
    this._compView_0.createAndProject(this._Query_0_5, [
      [_el_1, _el_2]
    ]);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Interface) && (1 == nodeIndex))) {
      return this._Child_1_5;
    }
    if ((identical(token, import1.Interface) && (2 == nodeIndex))) {
      return this._Child_2_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_2.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_2.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$Test, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _TestNgFactory = ComponentFactory<import1.Test>('test', viewFactory_TestHost0);
ComponentFactory<import1.Test> get TestNgFactory {
  return _TestNgFactory;
}

ComponentFactory<import1.Test> createTestFactory() {
  return ComponentFactory('test', viewFactory_TestHost0);
}

final List<dynamic> styles$TestHost = const [];

class _ViewTestHost0 extends import8.HostView<import1.Test> {
  @override
  void build() {
    this.componentView = ViewTest0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Test();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.Test> viewFactory_TestHost0() {
  return _ViewTestHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(Child, createChildFactory());
  _ngRef.registerComponent(Query, createQueryFactory());
  _ngRef.registerComponent(Test, createTestFactory());
  _ref0.initReflector();
}
