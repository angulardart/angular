// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'nested_ng_for.dart';
export 'nested_ng_for.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'nested_ng_for.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import3;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/view.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import12;
import 'package:angular/src/core/linker/views/render_view.dart' as import13;
import 'dart:core';
import 'package:angular/src/runtime/text_binding.dart' as import15;
import 'package:angular/src/core/linker/views/host_view.dart' as import16;

final List<dynamic> styles$NestedNgForComponent = const [];

class ViewNestedNgForComponent0 extends import0.ComponentView<import1.NestedNgForComponent> {
  ViewContainer _appEl_0;
  import3.NgFor _NgFor_0_9;
  var _expr_0;
  static import4.ComponentStyles _componentStyles;
  ViewNestedNgForComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('nested-ng-for');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/directives/nested_ng_for.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_NestedNgForComponent1);
    this._NgFor_0_9 = import3.NgFor(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.matrix;
    if (import8.checkBinding(this._expr_0, currVal_0, 'matrix', 'asset:_goldens/test/files/directives/nested_ng_for.dart')) {
      this._NgFor_0_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$NestedNgForComponent, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _NestedNgForComponentNgFactory = ComponentFactory<import1.NestedNgForComponent>('nested-ng-for', viewFactory_NestedNgForComponentHost0);
ComponentFactory<import1.NestedNgForComponent> get NestedNgForComponentNgFactory {
  return _NestedNgForComponentNgFactory;
}

ComponentFactory<import1.NestedNgForComponent> createNestedNgForComponentFactory() {
  return ComponentFactory('nested-ng-for', viewFactory_NestedNgForComponentHost0);
}

class _ViewNestedNgForComponent1 extends import12.EmbeddedView<import1.NestedNgForComponent> {
  ViewContainer _appEl_1;
  import3.NgFor _NgFor_1_9;
  var _expr_0;
  _ViewNestedNgForComponent1(import13.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('span');
    final _anchor_1 = import9.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_NestedNgForComponent2);
    this._NgFor_1_9 = import3.NgFor(this._appEl_1, _TemplateRef_1_8);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_row = import8.unsafeCast<List<int>>(this.locals['\$implicit']);
    final currVal_0 = local_row;
    if (import8.checkBinding(this._expr_0, currVal_0, 'row', 'asset:_goldens/test/files/directives/nested_ng_for.dart')) {
      this._NgFor_1_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

import12.EmbeddedView<void> viewFactory_NestedNgForComponent1(import13.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForComponent1(parentView, parentIndex);
}

class _ViewNestedNgForComponent2 extends import12.EmbeddedView<import1.NestedNgForComponent> {
  final import15.TextBinding _textBinding_1 = import15.TextBinding();
  _ViewNestedNgForComponent2(import13.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    _el_0.append(this._textBinding_1.element);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_value = import8.unsafeCast<int>(this.locals['\$implicit']);
    this._textBinding_1.updateTextWithPrimitive(local_value);
  }
}

import12.EmbeddedView<void> viewFactory_NestedNgForComponent2(import13.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForComponent2(parentView, parentIndex);
}

final List<dynamic> styles$NestedNgForComponentHost = const [];

class _ViewNestedNgForComponentHost0 extends import16.HostView<import1.NestedNgForComponent> {
  @override
  void build() {
    this.componentView = ViewNestedNgForComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.NestedNgForComponent();
    this.initRootNode(_el_0);
  }
}

import16.HostView<import1.NestedNgForComponent> viewFactory_NestedNgForComponentHost0() {
  return _ViewNestedNgForComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(NestedNgForComponent, createNestedNgForComponentFactory());
  _ref0.initReflector();
}
