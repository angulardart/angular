// ignore_for_file: library_prefixes,unused_import,strict_raw_type,undefined_hidden_name
// The .template.dart files also export the user code.
export 'import_prefixes.dart';

// Required for referencing runtime code.
import 'dart:html' as _html;
import 'package:angular/angular.dart' as _ng;
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as _ng;
import 'package:angular/src/core/linker/views/component_view.dart' as _ng;
import 'package:angular/src/core/linker/views/render_view.dart' as _ng;
import 'package:angular/src/core/linker/views/view.dart' as _ng;

// Required for specifically referencing user code.
import 'import_prefixes.dart';

// Required for "type inference" (scoping).
import 'package:angular/angular.dart' as angular;
import 'import_prefixes.dart' as prefixed;
import 'import_prefixes.dart' as prefixed2 show ChildComponent;
import 'import_prefixes.dart' as prefixed3 hide ChildComponent;

// For @Component class ParentComponent.
external List<dynamic> get styles$ParentComponent;
external _ng.ComponentFactory<ParentComponent> get ParentComponentNgFactory;
external _ng.ComponentFactory<ParentComponent> createParentComponentFactory();
class ViewParentComponent0 extends _ng.ComponentView<ParentComponent> {
  external ViewParentComponent0(_ng.View parentView, int parentIndex);
}
// For @Component class ChildComponent.
external List<dynamic> get styles$ChildComponent;
external _ng.ComponentFactory<ChildComponent> get ChildComponentNgFactory;
external _ng.ComponentFactory<ChildComponent> createChildComponentFactory();
class ViewChildComponent0 extends _ng.ComponentView<ChildComponent> {
  external ViewChildComponent0(_ng.View parentView, int parentIndex);
}

external void initReflector();
