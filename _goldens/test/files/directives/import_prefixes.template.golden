// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'import_prefixes.dart';
export 'import_prefixes.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'import_prefixes.template.dart' as _ref0;
import 'import_prefixes.template.dart' as _ref1;
import 'import_prefixes.template.dart' as _ref2;
import 'package:angular/angular.template.dart' as _ref3;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'import_prefixes.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import8;
import 'package:angular/src/runtime/text_binding.dart' as import9;
import 'package:angular/src/runtime/interpolate.dart' as import10;

final List<dynamic> styles$ParentComponent = const [];

class ViewParentComponent0 extends import0.ComponentView<import1.ParentComponent> {
  ViewChildComponent0 _compView_0;
  import1.ChildComponent _ChildComponent_0_5;
  static import2.ComponentStyles _componentStyles;
  ViewParentComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('parent-comp');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/directives/import_prefixes.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._ChildComponent_0_5 = import1.ChildComponent();
    this._compView_0.create(this._ChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.input, null)) {
        (this._ChildComponent_0_5.myType = _ctx.input);
      }
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ParentComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ParentComponentNgFactory = ComponentFactory<import1.ParentComponent>('parent-comp', viewFactory_ParentComponentHost0);
ComponentFactory<import1.ParentComponent> get ParentComponentNgFactory {
  return _ParentComponentNgFactory;
}

ComponentFactory<import1.ParentComponent> createParentComponentFactory() {
  return ComponentFactory('parent-comp', viewFactory_ParentComponentHost0);
}

final List<dynamic> styles$ParentComponentHost = const [];

class _ViewParentComponentHost0 extends import8.HostView<import1.ParentComponent> {
  @override
  void build() {
    this.componentView = ViewParentComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ParentComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.ParentComponent> viewFactory_ParentComponentHost0() {
  return _ViewParentComponentHost0();
}

final List<dynamic> styles$ChildComponent = const [];

class ViewChildComponent0 extends import0.ComponentView<import1.ChildComponent> {
  final import9.TextBinding _textBinding_0 = import9.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewChildComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('child-comp');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/directives/import_prefixes.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    parentRenderNode.append(this._textBinding_0.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_0.updateText(import10.interpolate0(_ctx.myType));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ChildComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentNgFactory = ComponentFactory<import1.ChildComponent>('child-comp', viewFactory_ChildComponentHost0);
ComponentFactory<import1.ChildComponent> get ChildComponentNgFactory {
  return _ChildComponentNgFactory;
}

ComponentFactory<import1.ChildComponent> createChildComponentFactory() {
  return ComponentFactory('child-comp', viewFactory_ChildComponentHost0);
}

final List<dynamic> styles$ChildComponentHost = const [];

class _ViewChildComponentHost0 extends import8.HostView<import1.ChildComponent> {
  @override
  void build() {
    this.componentView = ViewChildComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.ChildComponent> viewFactory_ChildComponentHost0() {
  return _ViewChildComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ParentComponent, createParentComponentFactory());
  _ngRef.registerComponent(ChildComponent, createChildComponentFactory());
  _ref0.initReflector();
  _ref1.initReflector();
  _ref2.initReflector();
  _ref3.initReflector();
}
