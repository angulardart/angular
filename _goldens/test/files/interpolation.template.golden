// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'interpolation.dart';
export 'interpolation.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'interpolation.dart' as import1;
import 'package:angular/src/runtime/text_binding.dart' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/view.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/runtime/interpolate.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import11;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import13;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import15;
import 'package:angular/src/core/linker/views/render_view.dart' as import16;
import 'dart:core';
import 'package:angular/src/core/linker/app_view_utils.dart' as import18;

final List<dynamic> styles$InterpolationComponent = const [];

class ViewInterpolationComponent0 extends import0.ComponentView<import1.InterpolationComponent> {
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationComponent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import8.appendText(parentRenderNode, '    ');
    final doc = import6.document;
    final _el_1 = import8.appendDiv(doc, parentRenderNode);
    final _text_2 = import8.appendText(_el_1, '\n      ');
    _el_1.append(this._textBinding_3.element);
    final _text_4 = import8.appendText(_el_1, '\n    ');
    final _text_5 = import8.appendText(parentRenderNode, '\n  ');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_3.updateText(import9.interpolateString0(_ctx.foo));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationComponent, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationComponentNgFactory = ComponentFactory<import1.InterpolationComponent>('interpolation', viewFactory_InterpolationComponentHost0);
ComponentFactory<import1.InterpolationComponent> get InterpolationComponentNgFactory {
  return _InterpolationComponentNgFactory;
}

ComponentFactory<import1.InterpolationComponent> createInterpolationComponentFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationComponentHost0);
}

final List<dynamic> styles$InterpolationComponentHost = const [];

class _ViewInterpolationComponentHost0 extends import11.HostView<import1.InterpolationComponent> {
  @override
  void build() {
    this.componentView = ViewInterpolationComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationComponent();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationComponent> viewFactory_InterpolationComponentHost0() {
  return _ViewInterpolationComponentHost0();
}

final List<dynamic> styles$InterpolationComponentNoWhitespace = const [];

class ViewInterpolationComponentNoWhitespace0 extends import0.ComponentView<import1.InterpolationComponentNoWhitespace> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationComponentNoWhitespace0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.foo));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationComponentNoWhitespace, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationComponentNoWhitespaceNgFactory = ComponentFactory<import1.InterpolationComponentNoWhitespace>('interpolation', viewFactory_InterpolationComponentNoWhitespaceHost0);
ComponentFactory<import1.InterpolationComponentNoWhitespace> get InterpolationComponentNoWhitespaceNgFactory {
  return _InterpolationComponentNoWhitespaceNgFactory;
}

ComponentFactory<import1.InterpolationComponentNoWhitespace> createInterpolationComponentNoWhitespaceFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationComponentNoWhitespaceHost0);
}

final List<dynamic> styles$InterpolationComponentNoWhitespaceHost = const [];

class _ViewInterpolationComponentNoWhitespaceHost0 extends import11.HostView<import1.InterpolationComponentNoWhitespace> {
  @override
  void build() {
    this.componentView = ViewInterpolationComponentNoWhitespace0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationComponentNoWhitespace();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationComponentNoWhitespace> viewFactory_InterpolationComponentNoWhitespaceHost0() {
  return _ViewInterpolationComponentNoWhitespaceHost0();
}

final List<dynamic> styles$InterpolationNumber = const [];

class ViewInterpolationNumber0 extends import0.ComponentView<import1.InterpolationNumber> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationNumber0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateTextWithPrimitive(_ctx.foo);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationNumber, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationNumberNgFactory = ComponentFactory<import1.InterpolationNumber>('interpolation', viewFactory_InterpolationNumberHost0);
ComponentFactory<import1.InterpolationNumber> get InterpolationNumberNgFactory {
  return _InterpolationNumberNgFactory;
}

ComponentFactory<import1.InterpolationNumber> createInterpolationNumberFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationNumberHost0);
}

final List<dynamic> styles$InterpolationNumberHost = const [];

class _ViewInterpolationNumberHost0 extends import11.HostView<import1.InterpolationNumber> {
  @override
  void build() {
    this.componentView = ViewInterpolationNumber0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationNumber();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationNumber> viewFactory_InterpolationNumberHost0() {
  return _ViewInterpolationNumberHost0();
}

final List<dynamic> styles$InterpolationBoolean = const [];

class ViewInterpolationBoolean0 extends import0.ComponentView<import1.InterpolationBoolean> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationBoolean0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateTextWithPrimitive(_ctx.foo);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationBoolean, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationBooleanNgFactory = ComponentFactory<import1.InterpolationBoolean>('interpolation', viewFactory_InterpolationBooleanHost0);
ComponentFactory<import1.InterpolationBoolean> get InterpolationBooleanNgFactory {
  return _InterpolationBooleanNgFactory;
}

ComponentFactory<import1.InterpolationBoolean> createInterpolationBooleanFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationBooleanHost0);
}

final List<dynamic> styles$InterpolationBooleanHost = const [];

class _ViewInterpolationBooleanHost0 extends import11.HostView<import1.InterpolationBoolean> {
  @override
  void build() {
    this.componentView = ViewInterpolationBoolean0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationBoolean();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationBoolean> viewFactory_InterpolationBooleanHost0() {
  return _ViewInterpolationBooleanHost0();
}

final List<dynamic> styles$InterpolationConst = const [];

class ViewInterpolationConst0 extends import0.ComponentView<import1.InterpolationConst> {
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationConst0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, import9.interpolate0(import1.InterpolationConst.foo));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationConst, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationConstNgFactory = ComponentFactory<import1.InterpolationConst>('interpolation', viewFactory_InterpolationConstHost0);
ComponentFactory<import1.InterpolationConst> get InterpolationConstNgFactory {
  return _InterpolationConstNgFactory;
}

ComponentFactory<import1.InterpolationConst> createInterpolationConstFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationConstHost0);
}

final List<dynamic> styles$InterpolationConstHost = const [];

class _ViewInterpolationConstHost0 extends import11.HostView<import1.InterpolationConst> {
  @override
  void build() {
    this.componentView = ViewInterpolationConst0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationConst();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationConst> viewFactory_InterpolationConstHost0() {
  return _ViewInterpolationConstHost0();
}

final List<dynamic> styles$InterpolationMethod = const [];

class ViewInterpolationMethod0 extends import0.ComponentView<import1.InterpolationMethod> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationMethod0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateTextWithPrimitive(_ctx.foo());
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationMethod, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationMethodNgFactory = ComponentFactory<import1.InterpolationMethod>('interpolation', viewFactory_InterpolationMethodHost0);
ComponentFactory<import1.InterpolationMethod> get InterpolationMethodNgFactory {
  return _InterpolationMethodNgFactory;
}

ComponentFactory<import1.InterpolationMethod> createInterpolationMethodFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationMethodHost0);
}

final List<dynamic> styles$InterpolationMethodHost = const [];

class _ViewInterpolationMethodHost0 extends import11.HostView<import1.InterpolationMethod> {
  @override
  void build() {
    this.componentView = ViewInterpolationMethod0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationMethod();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationMethod> viewFactory_InterpolationMethodHost0() {
  return _ViewInterpolationMethodHost0();
}

final List<dynamic> styles$InterpolationTwoAdjacent = const [];

class ViewInterpolationTwoAdjacent0 extends import0.ComponentView<import1.InterpolationTwoAdjacent> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationTwoAdjacent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
    final _text_2 = import8.appendText(_el_0, ' ');
    _el_0.append(this._textBinding_3.element);
    final _text_4 = import8.appendText(_el_0, '!');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.greeting));
    this._textBinding_3.updateText(import9.interpolateString0(_ctx.noun));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationTwoAdjacent, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationTwoAdjacentNgFactory = ComponentFactory<import1.InterpolationTwoAdjacent>('interpolation', viewFactory_InterpolationTwoAdjacentHost0);
ComponentFactory<import1.InterpolationTwoAdjacent> get InterpolationTwoAdjacentNgFactory {
  return _InterpolationTwoAdjacentNgFactory;
}

ComponentFactory<import1.InterpolationTwoAdjacent> createInterpolationTwoAdjacentFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationTwoAdjacentHost0);
}

final List<dynamic> styles$InterpolationTwoAdjacentHost = const [];

class _ViewInterpolationTwoAdjacentHost0 extends import11.HostView<import1.InterpolationTwoAdjacent> {
  @override
  void build() {
    this.componentView = ViewInterpolationTwoAdjacent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationTwoAdjacent();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationTwoAdjacent> viewFactory_InterpolationTwoAdjacentHost0() {
  return _ViewInterpolationTwoAdjacentHost0();
}

final List<dynamic> styles$InterpolationLongerSentence = const [];

class ViewInterpolationLongerSentence0 extends import0.ComponentView<import1.InterpolationLongerSentence> {
  final import2.TextBinding _textBinding_2 = import2.TextBinding();
  final import2.TextBinding _textBinding_4 = import2.TextBinding();
  final import2.TextBinding _textBinding_6 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLongerSentence0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Welcome ');
    _el_0.append(this._textBinding_2.element);
    final _text_3 = import8.appendText(_el_0, ' to the ');
    _el_0.append(this._textBinding_4.element);
    final _text_5 = import8.appendText(_el_0, ' of ');
    _el_0.append(this._textBinding_6.element);
    final _text_7 = import8.appendText(_el_0, '!');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_2.updateText(import9.interpolateString0(_ctx.name));
    this._textBinding_4.updateText(import9.interpolateString0(_ctx.business));
    this._textBinding_6.updateText(import9.interpolateString0(_ctx.location));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLongerSentence, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationLongerSentenceNgFactory = ComponentFactory<import1.InterpolationLongerSentence>('interpolation', viewFactory_InterpolationLongerSentenceHost0);
ComponentFactory<import1.InterpolationLongerSentence> get InterpolationLongerSentenceNgFactory {
  return _InterpolationLongerSentenceNgFactory;
}

ComponentFactory<import1.InterpolationLongerSentence> createInterpolationLongerSentenceFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationLongerSentenceHost0);
}

final List<dynamic> styles$InterpolationLongerSentenceHost = const [];

class _ViewInterpolationLongerSentenceHost0 extends import11.HostView<import1.InterpolationLongerSentence> {
  @override
  void build() {
    this.componentView = ViewInterpolationLongerSentence0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLongerSentence();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLongerSentence> viewFactory_InterpolationLongerSentenceHost0() {
  return _ViewInterpolationLongerSentenceHost0();
}

final List<dynamic> styles$InterpolationLiterals = const [];

class ViewInterpolationLiterals0 extends import0.ComponentView<import1.InterpolationLiterals> {
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLiterals0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Welcome');
    final _text_2 = import8.appendText(_el_0, ' ');
    final _text_3 = import8.appendText(_el_0, 'Home');
    final _text_4 = import8.appendText(_el_0, '!');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLiterals, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationLiteralsNgFactory = ComponentFactory<import1.InterpolationLiterals>('interpolation', viewFactory_InterpolationLiteralsHost0);
ComponentFactory<import1.InterpolationLiterals> get InterpolationLiteralsNgFactory {
  return _InterpolationLiteralsNgFactory;
}

ComponentFactory<import1.InterpolationLiterals> createInterpolationLiteralsFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationLiteralsHost0);
}

final List<dynamic> styles$InterpolationLiteralsHost = const [];

class _ViewInterpolationLiteralsHost0 extends import11.HostView<import1.InterpolationLiterals> {
  @override
  void build() {
    this.componentView = ViewInterpolationLiterals0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLiterals();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLiterals> viewFactory_InterpolationLiteralsHost0() {
  return _ViewInterpolationLiteralsHost0();
}

final List<dynamic> styles$InterpolationLocals = const [];

class ViewInterpolationLocals0 extends import0.ComponentView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import13.NgFor _NgFor_0_9;
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLocals0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import8.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InterpolationLocals1);
    this._NgFor_0_9 = import13.NgFor(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.bars, null)) {
        (this._NgFor_0_9.ngForOf = _ctx.bars);
      }
    }
    if ((!import7.debugThrowIfChanged)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLocals, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationLocalsNgFactory = ComponentFactory<import1.InterpolationLocals>('interpolation', viewFactory_InterpolationLocalsHost0);
ComponentFactory<import1.InterpolationLocals> get InterpolationLocalsNgFactory {
  return _InterpolationLocalsNgFactory;
}

ComponentFactory<import1.InterpolationLocals> createInterpolationLocalsFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationLocalsHost0);
}

class _ViewInterpolationLocals1 extends import15.EmbeddedView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import13.NgFor _NgFor_0_9;
  var _expr_0;
  _ViewInterpolationLocals1(import16.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final _anchor_0 = import8.createAnchor();
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InterpolationLocals2);
    this._NgFor_0_9 = import13.NgFor(this._appEl_0, _TemplateRef_0_8);
    this.initRootNode(this._appEl_0);
  }

  @override
  void detectChangesInternal() {
    final local_bar = import7.unsafeCast<List<int>>(this.locals['\$implicit']);
    final currVal_0 = local_bar;
    if (import7.checkBinding(this._expr_0, currVal_0, 'bar', 'asset:_goldens/test/files/interpolation.dart')) {
      this._NgFor_0_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import7.debugThrowIfChanged)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }
}

import15.EmbeddedView<void> viewFactory_InterpolationLocals1(import16.RenderView parentView, int parentIndex) {
  return _ViewInterpolationLocals1(parentView, parentIndex);
}

class _ViewInterpolationLocals2 extends import15.EmbeddedView<import1.InterpolationLocals> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  _ViewInterpolationLocals2(import16.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final _text_0 = import8.createText('Hello ');
    final _text_2 = import8.createText(': ');
    final _text_4 = import8.createText('!');
    this.initRootNodesAndSubscriptions([_text_0, this._textBinding_1.element, _text_2, this._textBinding_3.element, _text_4], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final local_bar = import7.unsafeCast<List<int>>(import7.unsafeCast<_ViewInterpolationLocals1>(this.parentView).locals['\$implicit']);
    final local_foo = import7.unsafeCast<int>(this.locals['\$implicit']);
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.callMethod(local_bar)));
    this._textBinding_3.updateTextWithPrimitive(local_foo);
  }
}

import15.EmbeddedView<void> viewFactory_InterpolationLocals2(import16.RenderView parentView, int parentIndex) {
  return _ViewInterpolationLocals2(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLocalsHost = const [];

class _ViewInterpolationLocalsHost0 extends import11.HostView<import1.InterpolationLocals> {
  @override
  void build() {
    this.componentView = ViewInterpolationLocals0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLocals();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLocals> viewFactory_InterpolationLocalsHost0() {
  return _ViewInterpolationLocalsHost0();
}

final List<dynamic> styles$InterpolationProperty = const [];

class ViewInterpolationProperty0 extends import0.ComponentView<import1.InterpolationProperty> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationProperty0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateTextWithPrimitive(((_ctx.state == null) ? null : _ctx.state.count));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationProperty, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InterpolationPropertyNgFactory = ComponentFactory<import1.InterpolationProperty>('interpolation', viewFactory_InterpolationPropertyHost0);
ComponentFactory<import1.InterpolationProperty> get InterpolationPropertyNgFactory {
  return _InterpolationPropertyNgFactory;
}

ComponentFactory<import1.InterpolationProperty> createInterpolationPropertyFactory() {
  return ComponentFactory('interpolation', viewFactory_InterpolationPropertyHost0);
}

final List<dynamic> styles$InterpolationPropertyHost = const [];

class _ViewInterpolationPropertyHost0 extends import11.HostView<import1.InterpolationProperty> {
  @override
  void build() {
    this.componentView = ViewInterpolationProperty0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationProperty();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationProperty> viewFactory_InterpolationPropertyHost0() {
  return _ViewInterpolationPropertyHost0();
}

final List<dynamic> styles$Attribute = const [];

class ViewAttribute0 extends import0.ComponentView<import1.Attribute> {
  var _expr_0;
  var _expr_1;
  import6.Element _el_0;
  import6.Element _el_2;
  static import3.ComponentStyles _componentStyles;
  ViewAttribute0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendElement(doc, parentRenderNode, 'img');
    final _text_1 = import8.appendText(parentRenderNode, ' ');
    this._el_2 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString0(_ctx.altText);
    if (import7.checkBinding(this._expr_0, currVal_0, '\n{{altText}}\n', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_0, 'alt', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = import9.interpolateString2('', _ctx.altText, '\n', _ctx.altText, '');
    if (import7.checkBinding(this._expr_1, currVal_1, '\n{{altText}}\n{{altText}}\n', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_2, 'alt', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$Attribute, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AttributeNgFactory = ComponentFactory<import1.Attribute>('attribute', viewFactory_AttributeHost0);
ComponentFactory<import1.Attribute> get AttributeNgFactory {
  return _AttributeNgFactory;
}

ComponentFactory<import1.Attribute> createAttributeFactory() {
  return ComponentFactory('attribute', viewFactory_AttributeHost0);
}

final List<dynamic> styles$AttributeHost = const [];

class _ViewAttributeHost0 extends import11.HostView<import1.Attribute> {
  @override
  void build() {
    this.componentView = ViewAttribute0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Attribute();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.Attribute> viewFactory_AttributeHost0() {
  return _ViewAttributeHost0();
}

final List<dynamic> styles$AttributePW = const [];

class ViewAttributePW0 extends import0.ComponentView<import1.AttributePW> {
  var _expr_0;
  var _expr_1;
  import6.Element _el_1;
  import6.Element _el_3;
  static import3.ComponentStyles _componentStyles;
  ViewAttributePW0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import8.appendText(parentRenderNode, '    ');
    final doc = import6.document;
    this._el_1 = import8.appendElement(doc, parentRenderNode, 'img');
    final _text_2 = import8.appendText(parentRenderNode, '\n    ');
    this._el_3 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString1('\n', _ctx.altText, '\n');
    if (import7.checkBinding(this._expr_0, currVal_0, '\n{{altText}}\n', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_1, 'alt', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = import9.interpolateString2('\n', _ctx.altText, '\n', _ctx.altText, '\n');
    if (import7.checkBinding(this._expr_1, currVal_1, '\n{{altText}}\n{{altText}}\n', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_3, 'alt', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$AttributePW, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AttributePWNgFactory = ComponentFactory<import1.AttributePW>('attribute', viewFactory_AttributePWHost0);
ComponentFactory<import1.AttributePW> get AttributePWNgFactory {
  return _AttributePWNgFactory;
}

ComponentFactory<import1.AttributePW> createAttributePWFactory() {
  return ComponentFactory('attribute', viewFactory_AttributePWHost0);
}

final List<dynamic> styles$AttributePWHost = const [];

class _ViewAttributePWHost0 extends import11.HostView<import1.AttributePW> {
  @override
  void build() {
    this.componentView = ViewAttributePW0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AttributePW();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.AttributePW> viewFactory_AttributePWHost0() {
  return _ViewAttributePWHost0();
}

final List<dynamic> styles$AttributePrimitive = const [];

class ViewAttributePrimitive0 extends import0.ComponentView<import1.AttributePrimitive> {
  var _expr_0;
  import6.Element _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewAttributePrimitive0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.altText;
    if (import7.checkBinding(this._expr_0, currVal_0, '{{altText}}', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_0, 'alt', import9.interpolate0(currVal_0));
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$AttributePrimitive, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AttributePrimitiveNgFactory = ComponentFactory<import1.AttributePrimitive>('attribute', viewFactory_AttributePrimitiveHost0);
ComponentFactory<import1.AttributePrimitive> get AttributePrimitiveNgFactory {
  return _AttributePrimitiveNgFactory;
}

ComponentFactory<import1.AttributePrimitive> createAttributePrimitiveFactory() {
  return ComponentFactory('attribute', viewFactory_AttributePrimitiveHost0);
}

final List<dynamic> styles$AttributePrimitiveHost = const [];

class _ViewAttributePrimitiveHost0 extends import11.HostView<import1.AttributePrimitive> {
  @override
  void build() {
    this.componentView = ViewAttributePrimitive0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AttributePrimitive();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.AttributePrimitive> viewFactory_AttributePrimitiveHost0() {
  return _ViewAttributePrimitiveHost0();
}

final List<dynamic> styles$AttributePrimitiveWithStrings = const [];

class ViewAttributePrimitiveWithStrings0 extends import0.ComponentView<import1.AttributePrimitiveWithStrings> {
  var _expr_0;
  import6.Element _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewAttributePrimitiveWithStrings0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.altText;
    if (import7.checkBinding(this._expr_0, currVal_0, 'Pre{{altText}}Suf', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_0, 'alt', import9.interpolate1('Pre', currVal_0, 'Suf'));
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$AttributePrimitiveWithStrings, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AttributePrimitiveWithStringsNgFactory = ComponentFactory<import1.AttributePrimitiveWithStrings>('attribute', viewFactory_AttributePrimitiveWithStringsHost0);
ComponentFactory<import1.AttributePrimitiveWithStrings> get AttributePrimitiveWithStringsNgFactory {
  return _AttributePrimitiveWithStringsNgFactory;
}

ComponentFactory<import1.AttributePrimitiveWithStrings> createAttributePrimitiveWithStringsFactory() {
  return ComponentFactory('attribute', viewFactory_AttributePrimitiveWithStringsHost0);
}

final List<dynamic> styles$AttributePrimitiveWithStringsHost = const [];

class _ViewAttributePrimitiveWithStringsHost0 extends import11.HostView<import1.AttributePrimitiveWithStrings> {
  @override
  void build() {
    this.componentView = ViewAttributePrimitiveWithStrings0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AttributePrimitiveWithStrings();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.AttributePrimitiveWithStrings> viewFactory_AttributePrimitiveWithStringsHost0() {
  return _ViewAttributePrimitiveWithStringsHost0();
}

final List<dynamic> styles$AttributeMethod = const [];

class ViewAttributeMethod0 extends import0.ComponentView<import1.AttributeMethod> {
  var _expr_0;
  import6.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewAttributeMethod0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(this._el_0, 'Hello World');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.isSelected();
    if (import7.checkBinding(this._expr_0, currVal_0, '{{isSelected()}}', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setAttribute(this._el_0, 'aria-selected', import9.interpolate0(currVal_0));
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$AttributeMethod, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AttributeMethodNgFactory = ComponentFactory<import1.AttributeMethod>('attribute', viewFactory_AttributeMethodHost0);
ComponentFactory<import1.AttributeMethod> get AttributeMethodNgFactory {
  return _AttributeMethodNgFactory;
}

ComponentFactory<import1.AttributeMethod> createAttributeMethodFactory() {
  return ComponentFactory('attribute', viewFactory_AttributeMethodHost0);
}

final List<dynamic> styles$AttributeMethodHost = const [];

class _ViewAttributeMethodHost0 extends import11.HostView<import1.AttributeMethod> {
  @override
  void build() {
    this.componentView = ViewAttributeMethod0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AttributeMethod();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.AttributeMethod> viewFactory_AttributeMethodHost0() {
  return _ViewAttributeMethodHost0();
}

final List<dynamic> styles$ClassString = const [];

class ViewClassString0 extends import0.ComponentView<import1.ClassString> {
  var _expr_0;
  import6.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewClassString0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendDiv(doc, parentRenderNode);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString1('pre', _ctx.theme, '');
    if (import7.checkBinding(this._expr_0, currVal_0, 'pre{{theme}}', 'asset:_goldens/test/files/interpolation.dart')) {
      this.updateChildClass(this._el_0, currVal_0);
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$ClassString, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ClassStringNgFactory = ComponentFactory<import1.ClassString>('interpolation', viewFactory_ClassStringHost0);
ComponentFactory<import1.ClassString> get ClassStringNgFactory {
  return _ClassStringNgFactory;
}

ComponentFactory<import1.ClassString> createClassStringFactory() {
  return ComponentFactory('interpolation', viewFactory_ClassStringHost0);
}

final List<dynamic> styles$ClassStringHost = const [];

class _ViewClassStringHost0 extends import11.HostView<import1.ClassString> {
  @override
  void build() {
    this.componentView = ViewClassString0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ClassString();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.ClassString> viewFactory_ClassStringHost0() {
  return _ViewClassStringHost0();
}

final List<dynamic> styles$StyleString = const [];

class ViewStyleString0 extends import0.ComponentView<import1.StyleString> {
  var _expr_0;
  import6.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewStyleString0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendDiv(doc, parentRenderNode);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString1('width:', _ctx.width, 'px');
    if (import7.checkBinding(this._expr_0, currVal_0, 'width:{{width}}px', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_0, 'style', import18.appViewUtils.sanitizer.sanitizeStyle(currVal_0));
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$StyleString, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _StyleStringNgFactory = ComponentFactory<import1.StyleString>('interpolation', viewFactory_StyleStringHost0);
ComponentFactory<import1.StyleString> get StyleStringNgFactory {
  return _StyleStringNgFactory;
}

ComponentFactory<import1.StyleString> createStyleStringFactory() {
  return ComponentFactory('interpolation', viewFactory_StyleStringHost0);
}

final List<dynamic> styles$StyleStringHost = const [];

class _ViewStyleStringHost0 extends import11.HostView<import1.StyleString> {
  @override
  void build() {
    this.componentView = ViewStyleString0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.StyleString();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.StyleString> viewFactory_StyleStringHost0() {
  return _ViewStyleStringHost0();
}

final List<dynamic> styles$StyleFinalPrimitive = const [];

class ViewStyleFinalPrimitive0 extends import0.ComponentView<import1.StyleFinalPrimitive> {
  import6.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewStyleFinalPrimitive0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendDiv(doc, parentRenderNode);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      import8.setProperty(this._el_0, 'style', import18.appViewUtils.sanitizer.sanitizeStyle(import9.interpolate1('width:', _ctx.width, 'px')));
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$StyleFinalPrimitive, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _StyleFinalPrimitiveNgFactory = ComponentFactory<import1.StyleFinalPrimitive>('interpolation', viewFactory_StyleFinalPrimitiveHost0);
ComponentFactory<import1.StyleFinalPrimitive> get StyleFinalPrimitiveNgFactory {
  return _StyleFinalPrimitiveNgFactory;
}

ComponentFactory<import1.StyleFinalPrimitive> createStyleFinalPrimitiveFactory() {
  return ComponentFactory('interpolation', viewFactory_StyleFinalPrimitiveHost0);
}

final List<dynamic> styles$StyleFinalPrimitiveHost = const [];

class _ViewStyleFinalPrimitiveHost0 extends import11.HostView<import1.StyleFinalPrimitive> {
  @override
  void build() {
    this.componentView = ViewStyleFinalPrimitive0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.StyleFinalPrimitive();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.StyleFinalPrimitive> viewFactory_StyleFinalPrimitiveHost0() {
  return _ViewStyleFinalPrimitiveHost0();
}

final List<dynamic> styles$StylePrimitive = const [];

class ViewStylePrimitive0 extends import0.ComponentView<import1.StylePrimitive> {
  var _expr_0;
  import6.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewStylePrimitive0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendDiv(doc, parentRenderNode);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.getWidth();
    if (import7.checkBinding(this._expr_0, currVal_0, 'width:{{getWidth()}}px', 'asset:_goldens/test/files/interpolation.dart')) {
      import8.setProperty(this._el_0, 'style', import18.appViewUtils.sanitizer.sanitizeStyle(import9.interpolate1('width:', currVal_0, 'px')));
      this._expr_0 = currVal_0;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$StylePrimitive, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _StylePrimitiveNgFactory = ComponentFactory<import1.StylePrimitive>('interpolation', viewFactory_StylePrimitiveHost0);
ComponentFactory<import1.StylePrimitive> get StylePrimitiveNgFactory {
  return _StylePrimitiveNgFactory;
}

ComponentFactory<import1.StylePrimitive> createStylePrimitiveFactory() {
  return ComponentFactory('interpolation', viewFactory_StylePrimitiveHost0);
}

final List<dynamic> styles$StylePrimitiveHost = const [];

class _ViewStylePrimitiveHost0 extends import11.HostView<import1.StylePrimitive> {
  @override
  void build() {
    this.componentView = ViewStylePrimitive0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.StylePrimitive();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.StylePrimitive> viewFactory_StylePrimitiveHost0() {
  return _ViewStylePrimitiveHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InterpolationComponent, createInterpolationComponentFactory());
  _ngRef.registerComponent(InterpolationComponentNoWhitespace, createInterpolationComponentNoWhitespaceFactory());
  _ngRef.registerComponent(InterpolationNumber, createInterpolationNumberFactory());
  _ngRef.registerComponent(InterpolationBoolean, createInterpolationBooleanFactory());
  _ngRef.registerComponent(InterpolationConst, createInterpolationConstFactory());
  _ngRef.registerComponent(InterpolationMethod, createInterpolationMethodFactory());
  _ngRef.registerComponent(InterpolationTwoAdjacent, createInterpolationTwoAdjacentFactory());
  _ngRef.registerComponent(InterpolationLongerSentence, createInterpolationLongerSentenceFactory());
  _ngRef.registerComponent(InterpolationLiterals, createInterpolationLiteralsFactory());
  _ngRef.registerComponent(InterpolationLocals, createInterpolationLocalsFactory());
  _ngRef.registerComponent(InterpolationProperty, createInterpolationPropertyFactory());
  _ngRef.registerComponent(Attribute, createAttributeFactory());
  _ngRef.registerComponent(AttributePW, createAttributePWFactory());
  _ngRef.registerComponent(AttributePrimitive, createAttributePrimitiveFactory());
  _ngRef.registerComponent(AttributePrimitiveWithStrings, createAttributePrimitiveWithStringsFactory());
  _ngRef.registerComponent(AttributeMethod, createAttributeMethodFactory());
  _ngRef.registerComponent(ClassString, createClassStringFactory());
  _ngRef.registerComponent(StyleString, createStyleStringFactory());
  _ngRef.registerComponent(StyleFinalPrimitive, createStyleFinalPrimitiveFactory());
  _ngRef.registerComponent(StylePrimitive, createStylePrimitiveFactory());
  _ref0.initReflector();
}
