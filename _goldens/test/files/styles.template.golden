// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'styles.dart';
export 'styles.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'styles.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/view.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;

final List<dynamic> styles$StylesComponent = const [];

class ViewStylesComponent0 extends import0.ComponentView<import1.StylesComponent> {
  import2.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewStylesComponent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import2.document.createElement('styles');
    this.updateChildClassNonHtml(this.rootElement, import1.StylesComponent.baz);
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/styles.dart' : null);
  }

  @override
  void build() {
    final import2.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import2.document;
    this._el_0 = import7.appendDiv(doc, parentRenderNode);
    this.updateChildClass(this._el_0, 'foo');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      this._el_0.style.setProperty('width', '5px;');
      if (!identical(_ctx.bar, null)) {
        this.updateChildClass(this._el_0, _ctx.bar);
      }
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$StylesComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _StylesComponentNgFactory = ComponentFactory<import1.StylesComponent>('styles', viewFactory_StylesComponentHost0);
ComponentFactory<import1.StylesComponent> get StylesComponentNgFactory {
  return _StylesComponentNgFactory;
}

ComponentFactory<import1.StylesComponent> createStylesComponentFactory() {
  return ComponentFactory('styles', viewFactory_StylesComponentHost0);
}

final List<dynamic> styles$StylesComponentHost = const [];

class _ViewStylesComponentHost0 extends import9.HostView<import1.StylesComponent> {
  @override
  void build() {
    this.componentView = ViewStylesComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.StylesComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.StylesComponent> viewFactory_StylesComponentHost0() {
  return _ViewStylesComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(StylesComponent, createStylesComponentFactory());
  _ref0.initReflector();
}
