// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'dart2js_golden.dart';
export 'dart2js_golden.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'dart2js_golden.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/src/di/injector/injector.dart' as _i1;
import 'package:angular/src/di/injector/hierarchical.dart' as _i2;
import 'dart2js_golden.dart' as _i3;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'dart2js_golden.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/view.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;
import 'package:angular_compiler/v1/src/metadata/di_tokens.dart' as import11;
import 'dart:core';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/runtime/queries.dart' as import14;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import16;
import 'package:angular/src/core/linker/views/render_view.dart' as import17;
import 'package:angular/src/core/linker/views/host_view.dart' as import18;
import 'package:angular/src/runtime/text_binding.dart' as import19;
import 'package:angular/src/runtime/interpolate.dart' as import20;
import 'dart:async' as import21;
import 'package:angular/src/common/directives/ng_for.dart' as import22;
import 'package:angular/src/common/directives/ng_class.dart' as import23;
import 'package:angular/src/common/directives/ng_style.dart' as import24;

final List<dynamic> styles$RootComponent = const [];

class ViewRootComponent0 extends import0.ComponentView<import1.RootComponent> {
  bool _query_Child_14_0_isDirty = true;
  import1.HasProviders _HasProviders_0_5;
  import1.A __A_0_6;
  import1.B __B_0_7;
  import1.C __C_0_8;
  import1.HasProvider _HasProvider_1_5;
  import1.C2 __C_1_6;
  import1.HasProvider _HasProvider_2_5;
  import1.C2 __C_2_6;
  ViewUsesDefaultChangeDetectionAndInputs0 _compView_3;
  import1.UsesDefaultChangeDetectionAndInputs _UsesDefaultChangeDetectionAndInputs_3_5;
  ViewUsesOnPushChangeDetectionAndInputs0 _compView_4;
  import1.UsesOnPushChangeDetectionAndInputs _UsesOnPushChangeDetectionAndInputs_4_5;
  ViewInlinedNgIf0 _compView_5;
  import1.InlinedNgIf _InlinedNgIf_5_5;
  ViewEmbeddedNgIf0 _compView_6;
  import1.EmbeddedNgIf _EmbeddedNgIf_6_5;
  ViewEmbeddedNgFor0 _compView_7;
  import1.EmbeddedNgFor _EmbeddedNgFor_7_5;
  ViewInjectsFromArbitraryParent0 _compView_8;
  import1.InjectsFromArbitraryParent _InjectsFromArbitraryParent_8_5;
  ViewComponentConditionalFeatures0 _compView_9;
  import1.ComponentConditionalFeatures _ComponentConditionalFeatures_9_5;
  ViewUsesDomBindings0 _compView_10;
  import1.UsesDomBindings _UsesDomBindings_10_5;
  ViewUsesNgDirectives0 _compView_11;
  import1.UsesNgDirectives _UsesNgDirectives_11_5;
  ViewHasNestedProviderLookups0 _compView_12;
  import1.HasNestedProviderLookups _HasNestedProviderLookups_12_5;
  ViewHasHostListeners0 _compView_13;
  import1.HasHostListeners _HasHostListeners_13_5;
  ViewHasContentChildren0 _compView_14;
  import1.HasContentChildren _HasContentChildren_14_5;
  ViewChild0 _compView_15;
  import1.Child _Child_15_5;
  ViewOnPushChild0 _compView_16;
  import1.OnPushChild _OnPushChild_16_5;
  ViewContainer _appEl_17;
  NgIf _NgIf_17_9;
  ViewHasViewChildren0 _compView_18;
  import1.HasViewChildren _HasViewChildren_18_5;
  ViewHasLargeProviders0 _compView_19;
  import1.HasLargeProviders _HasLargeProviders_19_5;
  import1.UtilA0 __UtilA0_19_6;
  import1.UtilA1 __UtilA1_19_7;
  import1.UtilA2 __UtilA2_19_8;
  import1.UtilA3 __UtilA3_19_9;
  import1.UtilA4 __UtilA4_19_10;
  import1.UtilA5 __UtilA5_19_11;
  import1.UtilA6 __UtilA6_19_12;
  import1.UtilA7 __UtilA7_19_13;
  import1.UtilA8 __UtilA8_19_14;
  import1.UtilA9 __UtilA9_19_15;
  import1.AppUtil __AppUtil_19_26;
  import1.BaseUtil __BaseUtil_19_27;
  static import4.ComponentStyles _componentStyles;
  ViewRootComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('root-component');
  }
  import1.A get _A_0_6 {
    if ((this.__A_0_6 == null)) {
      (this.__A_0_6 = import1.A());
    }
    return this.__A_0_6;
  }

  import1.B get _B_0_7 {
    if ((this.__B_0_7 == null)) {
      (this.__B_0_7 = import1.B());
    }
    return this.__B_0_7;
  }

  import1.C get _C_0_8 {
    if ((this.__C_0_8 == null)) {
      (this.__C_0_8 = import1.C());
    }
    return this.__C_0_8;
  }

  import1.C2 get _C_1_6 {
    if ((this.__C_1_6 == null)) {
      (this.__C_1_6 = import1.C2());
    }
    return this.__C_1_6;
  }

  import1.C2 get _C_2_6 {
    if ((this.__C_2_6 == null)) {
      (this.__C_2_6 = import1.C2());
    }
    return this.__C_2_6;
  }

  import1.UtilA0 get _UtilA0_19_6 {
    if ((this.__UtilA0_19_6 == null)) {
      (this.__UtilA0_19_6 = import1.UtilA0());
    }
    return this.__UtilA0_19_6;
  }

  import1.UtilA1 get _UtilA1_19_7 {
    if ((this.__UtilA1_19_7 == null)) {
      (this.__UtilA1_19_7 = import1.UtilA1());
    }
    return this.__UtilA1_19_7;
  }

  import1.UtilA2 get _UtilA2_19_8 {
    if ((this.__UtilA2_19_8 == null)) {
      (this.__UtilA2_19_8 = import1.UtilA2());
    }
    return this.__UtilA2_19_8;
  }

  import1.UtilA3 get _UtilA3_19_9 {
    if ((this.__UtilA3_19_9 == null)) {
      (this.__UtilA3_19_9 = import1.UtilA3());
    }
    return this.__UtilA3_19_9;
  }

  import1.UtilA4 get _UtilA4_19_10 {
    if ((this.__UtilA4_19_10 == null)) {
      (this.__UtilA4_19_10 = import1.UtilA4());
    }
    return this.__UtilA4_19_10;
  }

  import1.UtilA5 get _UtilA5_19_11 {
    if ((this.__UtilA5_19_11 == null)) {
      (this.__UtilA5_19_11 = import1.UtilA5());
    }
    return this.__UtilA5_19_11;
  }

  import1.UtilA6 get _UtilA6_19_12 {
    if ((this.__UtilA6_19_12 == null)) {
      (this.__UtilA6_19_12 = import1.UtilA6());
    }
    return this.__UtilA6_19_12;
  }

  import1.UtilA7 get _UtilA7_19_13 {
    if ((this.__UtilA7_19_13 == null)) {
      (this.__UtilA7_19_13 = import1.UtilA7());
    }
    return this.__UtilA7_19_13;
  }

  import1.UtilA8 get _UtilA8_19_14 {
    if ((this.__UtilA8_19_14 == null)) {
      (this.__UtilA8_19_14 = import1.UtilA8());
    }
    return this.__UtilA8_19_14;
  }

  import1.UtilA9 get _UtilA9_19_15 {
    if ((this.__UtilA9_19_15 == null)) {
      (this.__UtilA9_19_15 = import1.UtilA9());
    }
    return this.__UtilA9_19_15;
  }

  import1.AppUtil get _AppUtil_19_26 {
    if ((this.__AppUtil_19_26 == null)) {
      (this.__AppUtil_19_26 = import1.AppUtil(this._UtilA0_19_6, this._UtilA1_19_7, this._UtilA2_19_8, this._UtilA3_19_9, this._UtilA4_19_10, this._UtilA5_19_11, this._UtilA6_19_12, this._UtilA7_19_13, this._UtilA8_19_14, this._UtilA9_19_15));
    }
    return this.__AppUtil_19_26;
  }

  import1.BaseUtil get _BaseUtil_19_27 {
    if ((this.__BaseUtil_19_27 == null)) {
      (this.__BaseUtil_19_27 = import1.BaseUtil());
    }
    return this.__BaseUtil_19_27;
  }

  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    import9.setAttribute(_el_0, 'hasProviders', '');
    this._HasProviders_0_5 = import1.HasProviders();
    final _el_1 = import9.appendDiv(doc, _el_0);
    import9.setAttribute(_el_1, 'hasProvider', '');
    this._HasProvider_1_5 = import1.HasProvider();
    final _el_2 = import9.appendDiv(doc, parentRenderNode);
    import9.setAttribute(_el_2, 'hasProvider', '');
    this._HasProvider_2_5 = import1.HasProvider();
    this._compView_3 = ViewUsesDefaultChangeDetectionAndInputs0(this, 3);
    final _el_3 = this._compView_3.rootElement;
    parentRenderNode.append(_el_3);
    this._UsesDefaultChangeDetectionAndInputs_3_5 = import1.UsesDefaultChangeDetectionAndInputs();
    this._compView_3.create(this._UsesDefaultChangeDetectionAndInputs_3_5);
    this._compView_4 = ViewUsesOnPushChangeDetectionAndInputs0(this, 4);
    final _el_4 = this._compView_4.rootElement;
    parentRenderNode.append(_el_4);
    this._UsesOnPushChangeDetectionAndInputs_4_5 = import1.UsesOnPushChangeDetectionAndInputs();
    this._compView_4.create(this._UsesOnPushChangeDetectionAndInputs_4_5);
    this._compView_5 = ViewInlinedNgIf0(this, 5);
    final _el_5 = this._compView_5.rootElement;
    parentRenderNode.append(_el_5);
    this._InlinedNgIf_5_5 = import1.InlinedNgIf();
    this._compView_5.create(this._InlinedNgIf_5_5);
    this._compView_6 = ViewEmbeddedNgIf0(this, 6);
    final _el_6 = this._compView_6.rootElement;
    parentRenderNode.append(_el_6);
    this._EmbeddedNgIf_6_5 = import1.EmbeddedNgIf();
    this._compView_6.create(this._EmbeddedNgIf_6_5);
    this._compView_7 = ViewEmbeddedNgFor0(this, 7);
    final _el_7 = this._compView_7.rootElement;
    parentRenderNode.append(_el_7);
    this._EmbeddedNgFor_7_5 = import1.EmbeddedNgFor();
    this._compView_7.create(this._EmbeddedNgFor_7_5);
    this._compView_8 = ViewInjectsFromArbitraryParent0(this, 8);
    final _el_8 = this._compView_8.rootElement;
    parentRenderNode.append(_el_8);
    this._InjectsFromArbitraryParent_8_5 = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(this.parentView.injectorGet(const import11.MultiToken<String>('usPresidents'), this.parentIndex), this.parentView.injectorGet(const import11.MultiToken<String>('whiteHouse'), this.parentIndex), this.parentView.injectorGet(import1.InjectableService, this.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(this.parentView.injectorGet(const import11.MultiToken<String>('usPresidents'), this.parentIndex), this.parentView.injectorGet(const import11.MultiToken<String>('whiteHouse'), this.parentIndex), this.parentView.injectorGet(import1.InjectableService, this.parentIndex)));
    this._compView_8.create(this._InjectsFromArbitraryParent_8_5);
    this._compView_9 = ViewComponentConditionalFeatures0(this, 9);
    final _el_9 = this._compView_9.rootElement;
    parentRenderNode.append(_el_9);
    this._ComponentConditionalFeatures_9_5 = import1.ComponentConditionalFeatures();
    this._compView_9.create(this._ComponentConditionalFeatures_9_5);
    this._compView_10 = ViewUsesDomBindings0(this, 10);
    final _el_10 = this._compView_10.rootElement;
    parentRenderNode.append(_el_10);
    this._UsesDomBindings_10_5 = import1.UsesDomBindings();
    this._compView_10.create(this._UsesDomBindings_10_5);
    this._compView_11 = ViewUsesNgDirectives0(this, 11);
    final _el_11 = this._compView_11.rootElement;
    parentRenderNode.append(_el_11);
    this._UsesNgDirectives_11_5 = import1.UsesNgDirectives();
    this._compView_11.create(this._UsesNgDirectives_11_5);
    this._compView_12 = ViewHasNestedProviderLookups0(this, 12);
    final _el_12 = this._compView_12.rootElement;
    parentRenderNode.append(_el_12);
    this._HasNestedProviderLookups_12_5 = import1.HasNestedProviderLookups();
    this._compView_12.create(this._HasNestedProviderLookups_12_5);
    this._compView_13 = ViewHasHostListeners0(this, 13);
    final _el_13 = this._compView_13.rootElement;
    parentRenderNode.append(_el_13);
    this._HasHostListeners_13_5 = import1.HasHostListeners();
    this._compView_13.create(this._HasHostListeners_13_5);
    this._compView_14 = ViewHasContentChildren0(this, 14);
    final _el_14 = this._compView_14.rootElement;
    parentRenderNode.append(_el_14);
    this._HasContentChildren_14_5 = import1.HasContentChildren();
    this._compView_15 = ViewChild0(this, 15);
    final _el_15 = this._compView_15.rootElement;
    this._Child_15_5 = import1.Child();
    this._compView_15.create(this._Child_15_5);
    this._compView_16 = ViewOnPushChild0(this, 16);
    final _el_16 = this._compView_16.rootElement;
    import9.setAttribute(_el_16, 'onPush', '');
    this._OnPushChild_16_5 = import1.OnPushChild();
    this._compView_16.create(this._OnPushChild_16_5);
    final _anchor_17 = import9.createAnchor();
    this._appEl_17 = ViewContainer(17, 14, this, _anchor_17);
    TemplateRef _TemplateRef_17_8 = TemplateRef(this._appEl_17, viewFactory_RootComponent1);
    this._NgIf_17_9 = NgIf(this._appEl_17, _TemplateRef_17_8);
    this._compView_14.createAndProject(this._HasContentChildren_14_5, [
      [_el_15, _el_16, this._appEl_17]
    ]);
    this._compView_18 = ViewHasViewChildren0(this, 18);
    final _el_18 = this._compView_18.rootElement;
    parentRenderNode.append(_el_18);
    this._HasViewChildren_18_5 = import1.HasViewChildren();
    this._compView_18.create(this._HasViewChildren_18_5);
    this._compView_19 = ViewHasLargeProviders0(this, 19);
    final _el_19 = this._compView_19.rootElement;
    parentRenderNode.append(_el_19);
    this._HasLargeProviders_19_5 = import1.HasLargeProviders(this.injector(19));
    this._compView_19.create(this._HasLargeProviders_19_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((nodeIndex <= 1)) {
      if ((identical(token, import1.C) && (1 == nodeIndex))) {
        return this._C_1_6;
      }
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    if ((identical(token, import1.C) && (2 == nodeIndex))) {
      return this._C_2_6;
    }
    if ((identical(token, import1.Child) && (16 == nodeIndex))) {
      return this._OnPushChild_16_5;
    }
    if ((19 == nodeIndex)) {
      if ((identical(token, import1.UtilA0) || identical(token, import1.UtilB0))) {
        return this._UtilA0_19_6;
      }
      if ((identical(token, import1.UtilA1) || identical(token, import1.UtilB1))) {
        return this._UtilA1_19_7;
      }
      if ((identical(token, import1.UtilA2) || identical(token, import1.UtilB2))) {
        return this._UtilA2_19_8;
      }
      if ((identical(token, import1.UtilA3) || identical(token, import1.UtilB3))) {
        return this._UtilA3_19_9;
      }
      if ((identical(token, import1.UtilA4) || identical(token, import1.UtilB4))) {
        return this._UtilA4_19_10;
      }
      if ((identical(token, import1.UtilA5) || identical(token, import1.UtilB5))) {
        return this._UtilA5_19_11;
      }
      if ((identical(token, import1.UtilA6) || identical(token, import1.UtilB6))) {
        return this._UtilA6_19_12;
      }
      if ((identical(token, import1.UtilA7) || identical(token, import1.UtilB7))) {
        return this._UtilA7_19_13;
      }
      if ((identical(token, import1.UtilA8) || identical(token, import1.UtilB8))) {
        return this._UtilA8_19_14;
      }
      if ((identical(token, import1.UtilA9) || identical(token, import1.UtilB9))) {
        return this._UtilA9_19_15;
      }
      if (identical(token, import1.AppUtil)) {
        return this._AppUtil_19_26;
      }
      if (identical(token, import1.BaseUtil)) {
        return this._BaseUtil_19_27;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      this._ComponentConditionalFeatures_9_5.useFeatureA = true;
      this._ComponentConditionalFeatures_9_5.useFeatureB = false;
      this._NgIf_17_9.ngIf = false;
    }
    this._appEl_17.detectChangesInNestedViews();
    if ((!import8.debugThrowIfChanged)) {
      if (this._query_Child_14_0_isDirty) {
        import5.View.queryChangeDetectorRefs[this._OnPushChild_16_5] = this._compView_16;
        this._HasContentChildren_14_5.children = import14.flattenNodes([
          [this._Child_15_5, this._OnPushChild_16_5],
          this._appEl_17.mapNestedViewsWithSingleResult((_ViewRootComponent1 nestedView) {
            return nestedView._Child_0_5;
          })
        ]);
        this._query_Child_14_0_isDirty = false;
      }
    }
    this._compView_10.detectHostChanges(firstCheck);
    this._compView_3.detectChanges();
    this._compView_4.detectChanges();
    this._compView_5.detectChanges();
    this._compView_6.detectChanges();
    this._compView_7.detectChanges();
    this._compView_8.detectChanges();
    this._compView_9.detectChanges();
    this._compView_10.detectChanges();
    this._compView_11.detectChanges();
    this._compView_12.detectChanges();
    this._compView_13.detectChanges();
    this._compView_14.detectChanges();
    this._compView_15.detectChanges();
    this._compView_16.detectChanges();
    this._compView_18.detectChanges();
    this._compView_19.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_17.destroyNestedViews();
    this._compView_3.destroyInternalState();
    this._compView_4.destroyInternalState();
    this._compView_5.destroyInternalState();
    this._compView_6.destroyInternalState();
    this._compView_7.destroyInternalState();
    this._compView_8.destroyInternalState();
    this._compView_9.destroyInternalState();
    this._compView_10.destroyInternalState();
    this._compView_11.destroyInternalState();
    this._compView_12.destroyInternalState();
    this._compView_13.destroyInternalState();
    this._compView_14.destroyInternalState();
    this._compView_15.destroyInternalState();
    this._compView_16.destroyInternalState();
    this._compView_18.destroyInternalState();
    this._compView_19.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$RootComponent, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _RootComponentNgFactory = ComponentFactory<import1.RootComponent>('root-component', viewFactory_RootComponentHost0);
ComponentFactory<import1.RootComponent> get RootComponentNgFactory {
  return _RootComponentNgFactory;
}

ComponentFactory<import1.RootComponent> createRootComponentFactory() {
  return ComponentFactory('root-component', viewFactory_RootComponentHost0);
}

class _ViewRootComponent1 extends import16.EmbeddedView<import1.RootComponent> {
  ViewChild0 _compView_0;
  import1.Child _Child_0_5;
  _ViewRootComponent1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewChild0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._Child_0_5 = import1.Child();
    this._compView_0.create(this._Child_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewRootComponent0>(this.parentView)._query_Child_14_0_isDirty = true;
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_RootComponent1(import17.RenderView parentView, int parentIndex) {
  return _ViewRootComponent1(parentView, parentIndex);
}

final List<dynamic> styles$RootComponentHost = const [];

class _ViewRootComponentHost0 extends import18.HostView<import1.RootComponent> {
  @override
  void build() {
    this.componentView = ViewRootComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.RootComponent();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.RootComponent> viewFactory_RootComponentHost0() {
  return _ViewRootComponentHost0();
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputs = const [];

class ViewUsesDefaultChangeDetectionAndInputs0 extends import0.ComponentView<import1.UsesDefaultChangeDetectionAndInputs> {
  ViewDefaultChangeDetectionAndInputs0 _compView_0;
  import1.DefaultChangeDetectionAndInputs _DefaultChangeDetectionAndInputs_0_5;
  var _expr_1;
  static import4.ComponentStyles _componentStyles;
  ViewUsesDefaultChangeDetectionAndInputs0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('uses-default-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._DefaultChangeDetectionAndInputs_0_5 = import1.DefaultChangeDetectionAndInputs();
    this._compView_0.create(this._DefaultChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        (this._DefaultChangeDetectionAndInputs_0_5.title = _ctx.title);
      }
    }
    final currVal_1 = _ctx.name;
    if (import8.checkBinding(this._expr_1, currVal_1, 'name', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._DefaultChangeDetectionAndInputs_0_5.name = currVal_1;
      this._expr_1 = currVal_1;
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesDefaultChangeDetectionAndInputs, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesDefaultChangeDetectionAndInputsNgFactory = ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs>('uses-default-change-detection-and-inputs', viewFactory_UsesDefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> get UsesDefaultChangeDetectionAndInputsNgFactory {
  return _UsesDefaultChangeDetectionAndInputsNgFactory;
}

ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> createUsesDefaultChangeDetectionAndInputsFactory() {
  return ComponentFactory('uses-default-change-detection-and-inputs', viewFactory_UsesDefaultChangeDetectionAndInputsHost0);
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputsHost = const [];

class _ViewUsesDefaultChangeDetectionAndInputsHost0 extends import18.HostView<import1.UsesDefaultChangeDetectionAndInputs> {
  @override
  void build() {
    this.componentView = ViewUsesDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesDefaultChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.UsesDefaultChangeDetectionAndInputs> viewFactory_UsesDefaultChangeDetectionAndInputsHost0() {
  return _ViewUsesDefaultChangeDetectionAndInputsHost0();
}

final List<dynamic> styles$DefaultChangeDetectionAndInputs = const [];

class ViewDefaultChangeDetectionAndInputs0 extends import0.ComponentView<import1.DefaultChangeDetectionAndInputs> {
  final import19.TextBinding _textBinding_1 = import19.TextBinding();
  final import19.TextBinding _textBinding_3 = import19.TextBinding();
  static import4.ComponentStyles _componentStyles;
  ViewDefaultChangeDetectionAndInputs0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('default-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(this._textBinding_1.element);
    final _text_2 = import9.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_3.element);
    final _text_4 = import9.appendText(parentRenderNode, ' ');
    final _text_5 = import9.appendText(parentRenderNode, '3');
    final _text_6 = import9.appendText(parentRenderNode, ' ');
    final _text_7 = import9.appendText(parentRenderNode, '');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import20.interpolateString0(_ctx.title));
    this._textBinding_3.updateText(import20.interpolateString0(_ctx.name));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$DefaultChangeDetectionAndInputs, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DefaultChangeDetectionAndInputsNgFactory = ComponentFactory<import1.DefaultChangeDetectionAndInputs>('default-change-detection-and-inputs', viewFactory_DefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.DefaultChangeDetectionAndInputs> get DefaultChangeDetectionAndInputsNgFactory {
  return _DefaultChangeDetectionAndInputsNgFactory;
}

ComponentFactory<import1.DefaultChangeDetectionAndInputs> createDefaultChangeDetectionAndInputsFactory() {
  return ComponentFactory('default-change-detection-and-inputs', viewFactory_DefaultChangeDetectionAndInputsHost0);
}

final List<dynamic> styles$DefaultChangeDetectionAndInputsHost = const [];

class _ViewDefaultChangeDetectionAndInputsHost0 extends import18.HostView<import1.DefaultChangeDetectionAndInputs> {
  @override
  void build() {
    this.componentView = ViewDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DefaultChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.DefaultChangeDetectionAndInputs> viewFactory_DefaultChangeDetectionAndInputsHost0() {
  return _ViewDefaultChangeDetectionAndInputsHost0();
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputs = const [];

class ViewUsesOnPushChangeDetectionAndInputs0 extends import0.ComponentView<import1.UsesOnPushChangeDetectionAndInputs> {
  ViewOnPushChangeDetectionAndInputs0 _compView_0;
  import1.OnPushChangeDetectionAndInputs _OnPushChangeDetectionAndInputs_0_5;
  var _expr_1;
  static import4.ComponentStyles _componentStyles;
  ViewUsesOnPushChangeDetectionAndInputs0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('uses-on-push-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._OnPushChangeDetectionAndInputs_0_5 = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.OnPushChangeDetectionAndInputs, () {
            return import1.OnPushChangeDetectionAndInputs(this._compView_0, this.parentView.injectorGet(import21.Stream, this.parentIndex));
          })
        : import1.OnPushChangeDetectionAndInputs(this._compView_0, this.parentView.injectorGet(import21.Stream, this.parentIndex)));
    this._compView_0.create(this._OnPushChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    bool firstCheck = this.firstCheck;
    changed = false;
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        this._OnPushChangeDetectionAndInputs_0_5.title = _ctx.title;
        changed = true;
      }
    }
    final currVal_1 = _ctx.name;
    if (import8.checkBinding(this._expr_1, currVal_1, 'name', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._OnPushChangeDetectionAndInputs_0_5.name = currVal_1;
      changed = true;
      this._expr_1 = currVal_1;
    }
    if (changed) {
      this._compView_0.markAsCheckOnce();
    }
    if (((!import8.debugThrowIfChanged) && firstCheck)) {
      this._OnPushChangeDetectionAndInputs_0_5.ngOnInit();
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._OnPushChangeDetectionAndInputs_0_5.ngOnDestroy();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesOnPushChangeDetectionAndInputs, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesOnPushChangeDetectionAndInputsNgFactory = ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs>('uses-on-push-change-detection-and-inputs', viewFactory_UsesOnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> get UsesOnPushChangeDetectionAndInputsNgFactory {
  return _UsesOnPushChangeDetectionAndInputsNgFactory;
}

ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> createUsesOnPushChangeDetectionAndInputsFactory() {
  return ComponentFactory('uses-on-push-change-detection-and-inputs', viewFactory_UsesOnPushChangeDetectionAndInputsHost0);
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputsHost = const [];

class _ViewUsesOnPushChangeDetectionAndInputsHost0 extends import18.HostView<import1.UsesOnPushChangeDetectionAndInputs> {
  @override
  void build() {
    this.componentView = ViewUsesOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesOnPushChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.UsesOnPushChangeDetectionAndInputs> viewFactory_UsesOnPushChangeDetectionAndInputsHost0() {
  return _ViewUsesOnPushChangeDetectionAndInputsHost0();
}

final List<dynamic> styles$OnPushChangeDetectionAndInputs = const [];

class ViewOnPushChangeDetectionAndInputs0 extends import0.ComponentView<import1.OnPushChangeDetectionAndInputs> {
  final import19.TextBinding _textBinding_1 = import19.TextBinding();
  final import19.TextBinding _textBinding_3 = import19.TextBinding();
  static import4.ComponentStyles _componentStyles;
  ViewOnPushChangeDetectionAndInputs0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('on-push-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(this._textBinding_1.element);
    final _text_2 = import9.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_3.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import20.interpolateString0(_ctx.title));
    this._textBinding_3.updateText(import20.interpolateString0(_ctx.name));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$OnPushChangeDetectionAndInputs, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _OnPushChangeDetectionAndInputsNgFactory = ComponentFactory<import1.OnPushChangeDetectionAndInputs>('on-push-change-detection-and-inputs', viewFactory_OnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.OnPushChangeDetectionAndInputs> get OnPushChangeDetectionAndInputsNgFactory {
  return _OnPushChangeDetectionAndInputsNgFactory;
}

ComponentFactory<import1.OnPushChangeDetectionAndInputs> createOnPushChangeDetectionAndInputsFactory() {
  return ComponentFactory('on-push-change-detection-and-inputs', viewFactory_OnPushChangeDetectionAndInputsHost0);
}

final List<dynamic> styles$OnPushChangeDetectionAndInputsHost = const [];

class _ViewOnPushChangeDetectionAndInputsHost0 extends import18.HostView<import1.OnPushChangeDetectionAndInputs> {
  @override
  void build() {
    this.componentView = ViewOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.OnPushChangeDetectionAndInputs, () {
            return import1.OnPushChangeDetectionAndInputs(this.componentView, this.injectorGet(import21.Stream, this.parentIndex));
          })
        : import1.OnPushChangeDetectionAndInputs(this.componentView, this.injectorGet(import21.Stream, this.parentIndex)));
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    bool firstCheck = this.firstCheck;
    if (changed) {
      this.componentView.markAsCheckOnce();
    }
    if (((!import8.debugThrowIfChanged) && firstCheck)) {
      this.component.ngOnInit();
    }
    this.componentView.detectChanges();
  }

  @override
  void destroyInternal() {
    this.component.ngOnDestroy();
  }
}

import18.HostView<import1.OnPushChangeDetectionAndInputs> viewFactory_OnPushChangeDetectionAndInputsHost0() {
  return _ViewOnPushChangeDetectionAndInputsHost0();
}

final List<dynamic> styles$InlinedNgIf = const [];

class ViewInlinedNgIf0 extends import0.ComponentView<import1.InlinedNgIf> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewInlinedNgIf0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('inlined-ng-if');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InlinedNgIf1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.showDiv;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$InlinedNgIf, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InlinedNgIfNgFactory = ComponentFactory<import1.InlinedNgIf>('inlined-ng-if', viewFactory_InlinedNgIfHost0);
ComponentFactory<import1.InlinedNgIf> get InlinedNgIfNgFactory {
  return _InlinedNgIfNgFactory;
}

ComponentFactory<import1.InlinedNgIf> createInlinedNgIfFactory() {
  return ComponentFactory('inlined-ng-if', viewFactory_InlinedNgIfHost0);
}

class _ViewInlinedNgIf1 extends import16.EmbeddedView<import1.InlinedNgIf> {
  _ViewInlinedNgIf1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import9.appendText(_el_0, 'Hello World');
    this.initRootNode(_el_0);
  }
}

import16.EmbeddedView<void> viewFactory_InlinedNgIf1(import17.RenderView parentView, int parentIndex) {
  return _ViewInlinedNgIf1(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfHost = const [];

class _ViewInlinedNgIfHost0 extends import18.HostView<import1.InlinedNgIf> {
  @override
  void build() {
    this.componentView = ViewInlinedNgIf0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InlinedNgIf();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.InlinedNgIf> viewFactory_InlinedNgIfHost0() {
  return _ViewInlinedNgIfHost0();
}

final List<dynamic> styles$EmbeddedNgIf = const [];

class ViewEmbeddedNgIf0 extends import0.ComponentView<import1.EmbeddedNgIf> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedNgIf0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('embedded-ng-if');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_EmbeddedNgIf1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.showNull;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$EmbeddedNgIf, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _EmbeddedNgIfNgFactory = ComponentFactory<import1.EmbeddedNgIf>('embedded-ng-if', viewFactory_EmbeddedNgIfHost0);
ComponentFactory<import1.EmbeddedNgIf> get EmbeddedNgIfNgFactory {
  return _EmbeddedNgIfNgFactory;
}

ComponentFactory<import1.EmbeddedNgIf> createEmbeddedNgIfFactory() {
  return ComponentFactory('embedded-ng-if', viewFactory_EmbeddedNgIfHost0);
}

class _ViewEmbeddedNgIf1 extends import16.EmbeddedView<import1.EmbeddedNgIf> {
  ViewNullComponent0 _compView_0;
  import1.NullComponent _NullComponent_0_5;
  _ViewEmbeddedNgIf1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewNullComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._NullComponent_0_5 = import1.NullComponent();
    this._compView_0.create(this._NullComponent_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_EmbeddedNgIf1(import17.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedNgIf1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgIfHost = const [];

class _ViewEmbeddedNgIfHost0 extends import18.HostView<import1.EmbeddedNgIf> {
  @override
  void build() {
    this.componentView = ViewEmbeddedNgIf0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.EmbeddedNgIf();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.EmbeddedNgIf> viewFactory_EmbeddedNgIfHost0() {
  return _ViewEmbeddedNgIfHost0();
}

final List<dynamic> styles$EmbeddedNgFor = const [];

class ViewEmbeddedNgFor0 extends import0.ComponentView<import1.EmbeddedNgFor> {
  ViewContainer _appEl_1;
  import22.NgFor _NgFor_1_9;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedNgFor0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('embedded-ng-for');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    final _el_0 = import9.appendElement(doc, parentRenderNode, 'ul');
    final _anchor_1 = import9.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_EmbeddedNgFor1);
    this._NgFor_1_9 = import22.NgFor(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.items, null)) {
        (this._NgFor_1_9.ngForOf = _ctx.items);
      }
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$EmbeddedNgFor, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _EmbeddedNgForNgFactory = ComponentFactory<import1.EmbeddedNgFor>('embedded-ng-for', viewFactory_EmbeddedNgForHost0);
ComponentFactory<import1.EmbeddedNgFor> get EmbeddedNgForNgFactory {
  return _EmbeddedNgForNgFactory;
}

ComponentFactory<import1.EmbeddedNgFor> createEmbeddedNgForFactory() {
  return ComponentFactory('embedded-ng-for', viewFactory_EmbeddedNgForHost0);
}

class _ViewEmbeddedNgFor1 extends import16.EmbeddedView<import1.EmbeddedNgFor> {
  final import19.TextBinding _textBinding_1 = import19.TextBinding();
  _ViewEmbeddedNgFor1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('li');
    _el_0.append(this._textBinding_1.element);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_item = import8.unsafeCast<String>(this.locals['\$implicit']);
    this._textBinding_1.updateText(import20.interpolateString0(local_item));
  }
}

import16.EmbeddedView<void> viewFactory_EmbeddedNgFor1(import17.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedNgFor1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgForHost = const [];

class _ViewEmbeddedNgForHost0 extends import18.HostView<import1.EmbeddedNgFor> {
  @override
  void build() {
    this.componentView = ViewEmbeddedNgFor0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.EmbeddedNgFor();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.EmbeddedNgFor> viewFactory_EmbeddedNgForHost0() {
  return _ViewEmbeddedNgForHost0();
}

final List<dynamic> styles$NullComponent = const [];

class ViewNullComponent0 extends import0.ComponentView<import1.NullComponent> {
  static import4.ComponentStyles _componentStyles;
  ViewNullComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('null');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$NullComponent, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _NullComponentNgFactory = ComponentFactory<import1.NullComponent>('null', viewFactory_NullComponentHost0);
ComponentFactory<import1.NullComponent> get NullComponentNgFactory {
  return _NullComponentNgFactory;
}

ComponentFactory<import1.NullComponent> createNullComponentFactory() {
  return ComponentFactory('null', viewFactory_NullComponentHost0);
}

final List<dynamic> styles$NullComponentHost = const [];

class _ViewNullComponentHost0 extends import18.HostView<import1.NullComponent> {
  @override
  void build() {
    this.componentView = ViewNullComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.NullComponent();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.NullComponent> viewFactory_NullComponentHost0() {
  return _ViewNullComponentHost0();
}

final List<dynamic> styles$InjectsFromArbitraryParent = const [];

class ViewInjectsFromArbitraryParent0 extends import0.ComponentView<import1.InjectsFromArbitraryParent> {
  static import4.ComponentStyles _componentStyles;
  ViewInjectsFromArbitraryParent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('injects-from-arbitrary-parent');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$InjectsFromArbitraryParent, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InjectsFromArbitraryParentNgFactory = ComponentFactory<import1.InjectsFromArbitraryParent>('injects-from-arbitrary-parent', viewFactory_InjectsFromArbitraryParentHost0);
ComponentFactory<import1.InjectsFromArbitraryParent> get InjectsFromArbitraryParentNgFactory {
  return _InjectsFromArbitraryParentNgFactory;
}

ComponentFactory<import1.InjectsFromArbitraryParent> createInjectsFromArbitraryParentFactory() {
  return ComponentFactory('injects-from-arbitrary-parent', viewFactory_InjectsFromArbitraryParentHost0);
}

final List<dynamic> styles$InjectsFromArbitraryParentHost = const [];

class _ViewInjectsFromArbitraryParentHost0 extends import18.HostView<import1.InjectsFromArbitraryParent> {
  @override
  void build() {
    this.componentView = ViewInjectsFromArbitraryParent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(this.injectorGet(const import11.MultiToken<String>('usPresidents'), this.parentIndex), this.injectorGet(const import11.MultiToken<String>('whiteHouse'), this.parentIndex), this.injectorGet(import1.InjectableService, this.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(this.injectorGet(const import11.MultiToken<String>('usPresidents'), this.parentIndex), this.injectorGet(const import11.MultiToken<String>('whiteHouse'), this.parentIndex), this.injectorGet(import1.InjectableService, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.InjectsFromArbitraryParent> viewFactory_InjectsFromArbitraryParentHost0() {
  return _ViewInjectsFromArbitraryParentHost0();
}

final List<dynamic> styles$ComponentConditionalFeatures = const [];

class ViewComponentConditionalFeatures0 extends import0.ComponentView<import1.ComponentConditionalFeatures> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  static import4.ComponentStyles _componentStyles;
  ViewComponentConditionalFeatures0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('component-conditional-features');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_ComponentConditionalFeatures1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import9.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_ComponentConditionalFeatures2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.useFeatureA;
    this._NgIf_1_9.ngIf = _ctx.useFeatureB;
    this._appEl_0.detectChangesInNestedViews();
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._appEl_1.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$ComponentConditionalFeatures, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ComponentConditionalFeaturesNgFactory = ComponentFactory<import1.ComponentConditionalFeatures>('component-conditional-features', viewFactory_ComponentConditionalFeaturesHost0);
ComponentFactory<import1.ComponentConditionalFeatures> get ComponentConditionalFeaturesNgFactory {
  return _ComponentConditionalFeaturesNgFactory;
}

ComponentFactory<import1.ComponentConditionalFeatures> createComponentConditionalFeaturesFactory() {
  return ComponentFactory('component-conditional-features', viewFactory_ComponentConditionalFeaturesHost0);
}

class _ViewComponentConditionalFeatures1 extends import16.EmbeddedView<import1.ComponentConditionalFeatures> {
  ViewFeatureA0 _compView_0;
  import1.FeatureA _FeatureA_0_5;
  _ViewComponentConditionalFeatures1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewFeatureA0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._FeatureA_0_5 = import1.FeatureA();
    this._compView_0.create(this._FeatureA_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_ComponentConditionalFeatures1(import17.RenderView parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures1(parentView, parentIndex);
}

class _ViewComponentConditionalFeatures2 extends import16.EmbeddedView<import1.ComponentConditionalFeatures> {
  ViewFeatureB0 _compView_0;
  import1.FeatureB _FeatureB_0_5;
  _ViewComponentConditionalFeatures2(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewFeatureB0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._FeatureB_0_5 = import1.FeatureB();
    this._compView_0.create(this._FeatureB_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_ComponentConditionalFeatures2(import17.RenderView parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures2(parentView, parentIndex);
}

final List<dynamic> styles$ComponentConditionalFeaturesHost = const [];

class _ViewComponentConditionalFeaturesHost0 extends import18.HostView<import1.ComponentConditionalFeatures> {
  @override
  void build() {
    this.componentView = ViewComponentConditionalFeatures0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ComponentConditionalFeatures();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.ComponentConditionalFeatures> viewFactory_ComponentConditionalFeaturesHost0() {
  return _ViewComponentConditionalFeaturesHost0();
}

final List<dynamic> styles$FeatureA = const [];

class ViewFeatureA0 extends import0.ComponentView<import1.FeatureA> {
  static import4.ComponentStyles _componentStyles;
  ViewFeatureA0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('feature-a');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'I am Feature A');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$FeatureA, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _FeatureANgFactory = ComponentFactory<import1.FeatureA>('feature-a', viewFactory_FeatureAHost0);
ComponentFactory<import1.FeatureA> get FeatureANgFactory {
  return _FeatureANgFactory;
}

ComponentFactory<import1.FeatureA> createFeatureAFactory() {
  return ComponentFactory('feature-a', viewFactory_FeatureAHost0);
}

final List<dynamic> styles$FeatureAHost = const [];

class _ViewFeatureAHost0 extends import18.HostView<import1.FeatureA> {
  @override
  void build() {
    this.componentView = ViewFeatureA0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.FeatureA();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.FeatureA> viewFactory_FeatureAHost0() {
  return _ViewFeatureAHost0();
}

final List<dynamic> styles$FeatureB = const [];

class ViewFeatureB0 extends import0.ComponentView<import1.FeatureB> {
  static import4.ComponentStyles _componentStyles;
  ViewFeatureB0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('feature-b');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'I am Feature B');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$FeatureB, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _FeatureBNgFactory = ComponentFactory<import1.FeatureB>('feature-b', viewFactory_FeatureBHost0);
ComponentFactory<import1.FeatureB> get FeatureBNgFactory {
  return _FeatureBNgFactory;
}

ComponentFactory<import1.FeatureB> createFeatureBFactory() {
  return ComponentFactory('feature-b', viewFactory_FeatureBHost0);
}

final List<dynamic> styles$FeatureBHost = const [];

class _ViewFeatureBHost0 extends import18.HostView<import1.FeatureB> {
  @override
  void build() {
    this.componentView = ViewFeatureB0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.FeatureB();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.FeatureB> viewFactory_FeatureBHost0() {
  return _ViewFeatureBHost0();
}

final List<dynamic> styles$UsesDomBindings = const [];

class ViewUsesDomBindings0 extends import0.ComponentView<import1.UsesDomBindings> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  import7.ButtonElement _el_0;
  static import4.ComponentStyles _componentStyles;
  ViewUsesDomBindings0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('uses-dom-bindings');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    this._el_0 = import9.appendElement(doc, parentRenderNode, 'button');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.title;
    if (import8.checkBinding(this._expr_0, currVal_0, 'title', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      import9.updateAttribute(this._el_0, 'title', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.isFancy;
    if (import8.checkBinding(this._expr_1, currVal_1, 'isFancy', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      import9.updateClassBinding(this._el_0, 'fancy', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  void detectHostChanges(bool firstCheck) {
    final _ctx = this.ctx;
    final currVal_2 = _ctx.title;
    if (import8.checkBinding(this._expr_2, currVal_2, null, null)) {
      import9.updateAttribute(this.rootElement, 'title', currVal_2);
      this._expr_2 = currVal_2;
    }
    final currVal_3 = _ctx.isFancy;
    if (import8.checkBinding(this._expr_3, currVal_3, null, null)) {
      import9.updateClassBindingNonHtml(this.rootElement, 'fancy', currVal_3);
      this._expr_3 = currVal_3;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesDomBindings, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesDomBindingsNgFactory = ComponentFactory<import1.UsesDomBindings>('uses-dom-bindings', viewFactory_UsesDomBindingsHost0);
ComponentFactory<import1.UsesDomBindings> get UsesDomBindingsNgFactory {
  return _UsesDomBindingsNgFactory;
}

ComponentFactory<import1.UsesDomBindings> createUsesDomBindingsFactory() {
  return ComponentFactory('uses-dom-bindings', viewFactory_UsesDomBindingsHost0);
}

final List<dynamic> styles$UsesDomBindingsHost = const [];

class _ViewUsesDomBindingsHost0 extends import18.HostView<import1.UsesDomBindings> {
  @override
  void build() {
    this.componentView = ViewUsesDomBindings0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesDomBindings();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    this.componentView.detectHostChanges(firstCheck);
    this.componentView.detectChanges();
  }
}

import18.HostView<import1.UsesDomBindings> viewFactory_UsesDomBindingsHost0() {
  return _ViewUsesDomBindingsHost0();
}

final List<dynamic> styles$UsesNgDirectives = const [];

class ViewUsesNgDirectives0 extends import0.ComponentView<import1.UsesNgDirectives> {
  import23.NgClass _NgClass_0_5;
  import23.NgClass _NgClass_2_5;
  import23.NgClass _NgClass_4_5;
  import24.NgStyle _NgStyle_6_5;
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  static import4.ComponentStyles _componentStyles;
  ViewUsesNgDirectives0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('uses-ng-directives');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    this._NgClass_0_5 = import23.NgClass(_el_0);
    final _text_1 = import9.appendText(_el_0, 'Classes From Map');
    final _el_2 = import9.appendDiv(doc, parentRenderNode);
    this._NgClass_2_5 = import23.NgClass(_el_2);
    final _text_3 = import9.appendText(_el_2, 'Classes from List');
    final _el_4 = import9.appendDiv(doc, parentRenderNode);
    this._NgClass_4_5 = import23.NgClass(_el_4);
    final _text_5 = import9.appendText(_el_4, 'Classes from String');
    final _el_6 = import9.appendDiv(doc, parentRenderNode);
    this._NgStyle_6_5 = import24.NgStyle(_el_6);
    final _text_7 = import9.appendText(_el_6, 'Styles');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.ngClassesMap;
    if (import8.checkBinding(this._expr_0, currVal_0, 'ngClassesMap', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._NgClass_0_5.rawClass = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgClass_0_5.ngDoCheck();
    }
    final currVal_1 = _ctx.ngClassesList;
    if (import8.checkBinding(this._expr_1, currVal_1, 'ngClassesList', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._NgClass_2_5.rawClass = currVal_1;
      this._expr_1 = currVal_1;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgClass_2_5.ngDoCheck();
    }
    final currVal_2 = _ctx.ngClassesString;
    if (import8.checkBinding(this._expr_2, currVal_2, 'ngClassesString', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._NgClass_4_5.rawClass = currVal_2;
      this._expr_2 = currVal_2;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgClass_4_5.ngDoCheck();
    }
    final currVal_3 = _ctx.ngStyles;
    if (import8.checkBinding(this._expr_3, currVal_3, 'ngStyles', 'asset:_goldens/test/files/dart2js/dart2js_golden.dart')) {
      this._NgStyle_6_5.rawStyle = currVal_3;
      this._expr_3 = currVal_3;
    }
    if ((!import8.debugThrowIfChanged)) {
      this._NgStyle_6_5.ngDoCheck();
    }
  }

  @override
  void destroyInternal() {
    this._NgClass_0_5.ngOnDestroy();
    this._NgClass_2_5.ngOnDestroy();
    this._NgClass_4_5.ngOnDestroy();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesNgDirectives, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesNgDirectivesNgFactory = ComponentFactory<import1.UsesNgDirectives>('uses-ng-directives', viewFactory_UsesNgDirectivesHost0);
ComponentFactory<import1.UsesNgDirectives> get UsesNgDirectivesNgFactory {
  return _UsesNgDirectivesNgFactory;
}

ComponentFactory<import1.UsesNgDirectives> createUsesNgDirectivesFactory() {
  return ComponentFactory('uses-ng-directives', viewFactory_UsesNgDirectivesHost0);
}

final List<dynamic> styles$UsesNgDirectivesHost = const [];

class _ViewUsesNgDirectivesHost0 extends import18.HostView<import1.UsesNgDirectives> {
  @override
  void build() {
    this.componentView = ViewUsesNgDirectives0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesNgDirectives();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.UsesNgDirectives> viewFactory_UsesNgDirectivesHost0() {
  return _ViewUsesNgDirectivesHost0();
}

final List<dynamic> styles$HasNestedProviderLookups = const [];

class ViewHasNestedProviderLookups0 extends import0.ComponentView<import1.HasNestedProviderLookups> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewHasNestedProviderLookups0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('has-nested-provider-lookups');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_HasNestedProviderLookups1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.maybe1;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$HasNestedProviderLookups, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _HasNestedProviderLookupsNgFactory = ComponentFactory<import1.HasNestedProviderLookups>('has-nested-provider-lookups', viewFactory_HasNestedProviderLookupsHost0);
ComponentFactory<import1.HasNestedProviderLookups> get HasNestedProviderLookupsNgFactory {
  return _HasNestedProviderLookupsNgFactory;
}

ComponentFactory<import1.HasNestedProviderLookups> createHasNestedProviderLookupsFactory() {
  return ComponentFactory('has-nested-provider-lookups', viewFactory_HasNestedProviderLookupsHost0);
}

class _ViewHasNestedProviderLookups1 extends import16.EmbeddedView<import1.HasNestedProviderLookups> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  _ViewHasNestedProviderLookups1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import9.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_HasNestedProviderLookups2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.maybe2;
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

import16.EmbeddedView<void> viewFactory_HasNestedProviderLookups1(import17.RenderView parentView, int parentIndex) {
  return _ViewHasNestedProviderLookups1(parentView, parentIndex);
}

class _ViewHasNestedProviderLookups2 extends import16.EmbeddedView<import1.HasNestedProviderLookups> {
  ViewInjectsManyThingsDynamically0 _compView_1;
  import1.InjectsManyThingsDynamically _InjectsManyThingsDynamically_1_5;
  _ViewHasNestedProviderLookups2(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    this._compView_1 = ViewInjectsManyThingsDynamically0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    _el_0.append(_el_1);
    this._InjectsManyThingsDynamically_1_5 = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.InjectsManyThingsDynamically, () {
            return import1.InjectsManyThingsDynamically(this.parentView.parentView.injectorGet(import1.DepA, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepB, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepC, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepD, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepE, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepF, this.parentView.parentIndex));
          })
        : import1.InjectsManyThingsDynamically(this.parentView.parentView.injectorGet(import1.DepA, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepB, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepC, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepD, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepE, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepF, this.parentView.parentIndex)));
    this._compView_1.create(this._InjectsManyThingsDynamically_1_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_1.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_HasNestedProviderLookups2(import17.RenderView parentView, int parentIndex) {
  return _ViewHasNestedProviderLookups2(parentView, parentIndex);
}

final List<dynamic> styles$HasNestedProviderLookupsHost = const [];

class _ViewHasNestedProviderLookupsHost0 extends import18.HostView<import1.HasNestedProviderLookups> {
  @override
  void build() {
    this.componentView = ViewHasNestedProviderLookups0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasNestedProviderLookups();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.HasNestedProviderLookups> viewFactory_HasNestedProviderLookupsHost0() {
  return _ViewHasNestedProviderLookupsHost0();
}

final List<dynamic> styles$InjectsManyThingsDynamically = const [];

class ViewInjectsManyThingsDynamically0 extends import0.ComponentView<import1.InjectsManyThingsDynamically> {
  static import4.ComponentStyles _componentStyles;
  ViewInjectsManyThingsDynamically0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('injects-many-things-dynamically');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$InjectsManyThingsDynamically, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InjectsManyThingsDynamicallyNgFactory = ComponentFactory<import1.InjectsManyThingsDynamically>('injects-many-things-dynamically', viewFactory_InjectsManyThingsDynamicallyHost0);
ComponentFactory<import1.InjectsManyThingsDynamically> get InjectsManyThingsDynamicallyNgFactory {
  return _InjectsManyThingsDynamicallyNgFactory;
}

ComponentFactory<import1.InjectsManyThingsDynamically> createInjectsManyThingsDynamicallyFactory() {
  return ComponentFactory('injects-many-things-dynamically', viewFactory_InjectsManyThingsDynamicallyHost0);
}

final List<dynamic> styles$InjectsManyThingsDynamicallyHost = const [];

class _ViewInjectsManyThingsDynamicallyHost0 extends import18.HostView<import1.InjectsManyThingsDynamically> {
  @override
  void build() {
    this.componentView = ViewInjectsManyThingsDynamically0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import8.isDevMode
        ? import10.debugInjectorWrap(import1.InjectsManyThingsDynamically, () {
            return import1.InjectsManyThingsDynamically(this.injectorGet(import1.DepA, this.parentIndex), this.injectorGet(import1.DepB, this.parentIndex), this.injectorGet(import1.DepC, this.parentIndex), this.injectorGetOptional(import1.DepD, this.parentIndex), this.injectorGetOptional(import1.DepE, this.parentIndex), this.injectorGetOptional(import1.DepF, this.parentIndex));
          })
        : import1.InjectsManyThingsDynamically(this.injectorGet(import1.DepA, this.parentIndex), this.injectorGet(import1.DepB, this.parentIndex), this.injectorGet(import1.DepC, this.parentIndex), this.injectorGetOptional(import1.DepD, this.parentIndex), this.injectorGetOptional(import1.DepE, this.parentIndex), this.injectorGetOptional(import1.DepF, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.InjectsManyThingsDynamically> viewFactory_InjectsManyThingsDynamicallyHost0() {
  return _ViewInjectsManyThingsDynamicallyHost0();
}

final List<dynamic> styles$HasHostListeners = const [];

class ViewHasHostListeners0 extends import0.ComponentView<import1.HasHostListeners> {
  static import4.ComponentStyles _componentStyles;
  ViewHasHostListeners0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('has-host-listeners');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final _ctx = this.ctx;
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    parentRenderNode.addEventListener('click', this.eventHandler0(_ctx.onClick));
    parentRenderNode.addEventListener('focus', this.eventHandler0(_ctx.onFocus));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$HasHostListeners, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _HasHostListenersNgFactory = ComponentFactory<import1.HasHostListeners>('has-host-listeners', viewFactory_HasHostListenersHost0);
ComponentFactory<import1.HasHostListeners> get HasHostListenersNgFactory {
  return _HasHostListenersNgFactory;
}

ComponentFactory<import1.HasHostListeners> createHasHostListenersFactory() {
  return ComponentFactory('has-host-listeners', viewFactory_HasHostListenersHost0);
}

final List<dynamic> styles$HasHostListenersHost = const [];

class _ViewHasHostListenersHost0 extends import18.HostView<import1.HasHostListeners> {
  @override
  void build() {
    this.componentView = ViewHasHostListeners0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasHostListeners();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.HasHostListeners> viewFactory_HasHostListenersHost0() {
  return _ViewHasHostListenersHost0();
}

final List<dynamic> styles$Child = const [];

class ViewChild0 extends import0.ComponentView<import1.Child> {
  static import4.ComponentStyles _componentStyles;
  ViewChild0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('child');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$Child, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildNgFactory = ComponentFactory<import1.Child>('child', viewFactory_ChildHost0);
ComponentFactory<import1.Child> get ChildNgFactory {
  return _ChildNgFactory;
}

ComponentFactory<import1.Child> createChildFactory() {
  return ComponentFactory('child', viewFactory_ChildHost0);
}

final List<dynamic> styles$ChildHost = const [];

class _ViewChildHost0 extends import18.HostView<import1.Child> {
  @override
  void build() {
    this.componentView = ViewChild0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Child();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.Child> viewFactory_ChildHost0() {
  return _ViewChildHost0();
}

final List<dynamic> styles$OnPushChild = const [];

class ViewOnPushChild0 extends import0.ComponentView<import1.OnPushChild> {
  static import4.ComponentStyles _componentStyles;
  ViewOnPushChild0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('child');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$OnPushChild, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _OnPushChildNgFactory = ComponentFactory<import1.OnPushChild>('child[onPush]', viewFactory_OnPushChildHost0);
ComponentFactory<import1.OnPushChild> get OnPushChildNgFactory {
  return _OnPushChildNgFactory;
}

ComponentFactory<import1.OnPushChild> createOnPushChildFactory() {
  return ComponentFactory('child[onPush]', viewFactory_OnPushChildHost0);
}

final List<dynamic> styles$OnPushChildHost = const [];

class _ViewOnPushChildHost0 extends import18.HostView<import1.OnPushChild> {
  @override
  void build() {
    this.componentView = ViewOnPushChild0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.OnPushChild();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Child) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import18.HostView<import1.OnPushChild> viewFactory_OnPushChildHost0() {
  return _ViewOnPushChildHost0();
}

final List<dynamic> styles$HasContentChildren = const [];

class ViewHasContentChildren0 extends import0.ComponentView<import1.HasContentChildren> {
  static import4.ComponentStyles _componentStyles;
  ViewHasContentChildren0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('has-content-children');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$HasContentChildren, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _HasContentChildrenNgFactory = ComponentFactory<import1.HasContentChildren>('has-content-children', viewFactory_HasContentChildrenHost0);
ComponentFactory<import1.HasContentChildren> get HasContentChildrenNgFactory {
  return _HasContentChildrenNgFactory;
}

ComponentFactory<import1.HasContentChildren> createHasContentChildrenFactory() {
  return ComponentFactory('has-content-children', viewFactory_HasContentChildrenHost0);
}

final List<dynamic> styles$HasContentChildrenHost = const [];

class _ViewHasContentChildrenHost0 extends import18.HostView<import1.HasContentChildren> {
  @override
  void build() {
    this.componentView = ViewHasContentChildren0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasContentChildren();
    this.component.children = [];
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.HasContentChildren> viewFactory_HasContentChildrenHost0() {
  return _ViewHasContentChildrenHost0();
}

final List<dynamic> styles$HasViewChildren = const [];

class ViewHasViewChildren0 extends import0.ComponentView<import1.HasViewChildren> {
  bool _viewQuery_Child_0_isDirty = true;
  ViewOnPushChild0 _compView_0;
  import1.OnPushChild _OnPushChild_0_5;
  ViewChild0 _compView_1;
  import1.Child _Child_1_5;
  ViewContainer _appEl_2;
  NgIf _NgIf_2_9;
  ViewChild0 _compView_3;
  import1.Child _Child_3_5;
  static import4.ComponentStyles _componentStyles;
  ViewHasViewChildren0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('has-view-children');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewOnPushChild0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    import9.setAttribute(_el_0, 'onPush', '');
    this._OnPushChild_0_5 = import1.OnPushChild();
    this._compView_0.create(this._OnPushChild_0_5);
    this._compView_1 = ViewChild0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    parentRenderNode.append(_el_1);
    this._Child_1_5 = import1.Child();
    this._compView_1.create(this._Child_1_5);
    final _anchor_2 = import9.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(this._appEl_2, viewFactory_HasViewChildren1);
    this._NgIf_2_9 = NgIf(this._appEl_2, _TemplateRef_2_8);
    this._compView_3 = ViewChild0(this, 3);
    final _el_3 = this._compView_3.rootElement;
    parentRenderNode.append(_el_3);
    this._Child_3_5 = import1.Child();
    this._compView_3.create(this._Child_3_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Child) && (0 == nodeIndex))) {
      return this._OnPushChild_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      (this._NgIf_2_9.ngIf = false);
    }
    this._appEl_2.detectChangesInNestedViews();
    if ((!import8.debugThrowIfChanged)) {
      if (this._viewQuery_Child_0_isDirty) {
        import5.View.queryChangeDetectorRefs[this._OnPushChild_0_5] = this._compView_0;
        _ctx.children = import14.flattenNodes([
          [this._OnPushChild_0_5, this._Child_1_5],
          this._appEl_2.mapNestedViews((_ViewHasViewChildren1 nestedView) {
            import5.View.queryChangeDetectorRefs[nestedView._OnPushChild_1_5] = nestedView._compView_1;
            return [nestedView._Child_0_5, nestedView._OnPushChild_1_5];
          }),
          [this._Child_3_5]
        ]);
        this._viewQuery_Child_0_isDirty = false;
      }
    }
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_3.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_2.destroyNestedViews();
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_3.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$HasViewChildren, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _HasViewChildrenNgFactory = ComponentFactory<import1.HasViewChildren>('has-view-children', viewFactory_HasViewChildrenHost0);
ComponentFactory<import1.HasViewChildren> get HasViewChildrenNgFactory {
  return _HasViewChildrenNgFactory;
}

ComponentFactory<import1.HasViewChildren> createHasViewChildrenFactory() {
  return ComponentFactory('has-view-children', viewFactory_HasViewChildrenHost0);
}

class _ViewHasViewChildren1 extends import16.EmbeddedView<import1.HasViewChildren> {
  ViewChild0 _compView_0;
  import1.Child _Child_0_5;
  ViewOnPushChild0 _compView_1;
  import1.OnPushChild _OnPushChild_1_5;
  _ViewHasViewChildren1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewChild0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._Child_0_5 = import1.Child();
    this._compView_0.create(this._Child_0_5);
    this._compView_1 = ViewOnPushChild0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    import9.setAttribute(_el_1, 'onPush', '');
    this._OnPushChild_1_5 = import1.OnPushChild();
    this._compView_1.create(this._OnPushChild_1_5);
    this.initRootNodesAndSubscriptions([_el_0, _el_1], null);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Child) && (1 == nodeIndex))) {
      return this._OnPushChild_1_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewHasViewChildren0>(this.parentView)._viewQuery_Child_0_isDirty = true;
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_HasViewChildren1(import17.RenderView parentView, int parentIndex) {
  return _ViewHasViewChildren1(parentView, parentIndex);
}

final List<dynamic> styles$HasViewChildrenHost = const [];

class _ViewHasViewChildrenHost0 extends import18.HostView<import1.HasViewChildren> {
  @override
  void build() {
    this.componentView = ViewHasViewChildren0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasViewChildren();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.HasViewChildren> viewFactory_HasViewChildrenHost0() {
  return _ViewHasViewChildrenHost0();
}

final List<dynamic> styles$HasLargeProviders = const [];

class ViewHasLargeProviders0 extends import0.ComponentView<import1.HasLargeProviders> {
  static import4.ComponentStyles _componentStyles;
  ViewHasLargeProviders0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('has-large-providers');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$HasLargeProviders, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _HasLargeProvidersNgFactory = ComponentFactory<import1.HasLargeProviders>('has-large-providers', viewFactory_HasLargeProvidersHost0);
ComponentFactory<import1.HasLargeProviders> get HasLargeProvidersNgFactory {
  return _HasLargeProvidersNgFactory;
}

ComponentFactory<import1.HasLargeProviders> createHasLargeProvidersFactory() {
  return ComponentFactory('has-large-providers', viewFactory_HasLargeProvidersHost0);
}

final List<dynamic> styles$HasLargeProvidersHost = const [];

class _ViewHasLargeProvidersHost0 extends import18.HostView<import1.HasLargeProviders> {
  import1.UtilA0 __UtilA0_0_6;
  import1.UtilA1 __UtilA1_0_7;
  import1.UtilA2 __UtilA2_0_8;
  import1.UtilA3 __UtilA3_0_9;
  import1.UtilA4 __UtilA4_0_10;
  import1.UtilA5 __UtilA5_0_11;
  import1.UtilA6 __UtilA6_0_12;
  import1.UtilA7 __UtilA7_0_13;
  import1.UtilA8 __UtilA8_0_14;
  import1.UtilA9 __UtilA9_0_15;
  import1.AppUtil __AppUtil_0_26;
  import1.BaseUtil __BaseUtil_0_27;
  import1.UtilA0 get _UtilA0_0_6 {
    if ((this.__UtilA0_0_6 == null)) {
      (this.__UtilA0_0_6 = import1.UtilA0());
    }
    return this.__UtilA0_0_6;
  }

  import1.UtilA1 get _UtilA1_0_7 {
    if ((this.__UtilA1_0_7 == null)) {
      (this.__UtilA1_0_7 = import1.UtilA1());
    }
    return this.__UtilA1_0_7;
  }

  import1.UtilA2 get _UtilA2_0_8 {
    if ((this.__UtilA2_0_8 == null)) {
      (this.__UtilA2_0_8 = import1.UtilA2());
    }
    return this.__UtilA2_0_8;
  }

  import1.UtilA3 get _UtilA3_0_9 {
    if ((this.__UtilA3_0_9 == null)) {
      (this.__UtilA3_0_9 = import1.UtilA3());
    }
    return this.__UtilA3_0_9;
  }

  import1.UtilA4 get _UtilA4_0_10 {
    if ((this.__UtilA4_0_10 == null)) {
      (this.__UtilA4_0_10 = import1.UtilA4());
    }
    return this.__UtilA4_0_10;
  }

  import1.UtilA5 get _UtilA5_0_11 {
    if ((this.__UtilA5_0_11 == null)) {
      (this.__UtilA5_0_11 = import1.UtilA5());
    }
    return this.__UtilA5_0_11;
  }

  import1.UtilA6 get _UtilA6_0_12 {
    if ((this.__UtilA6_0_12 == null)) {
      (this.__UtilA6_0_12 = import1.UtilA6());
    }
    return this.__UtilA6_0_12;
  }

  import1.UtilA7 get _UtilA7_0_13 {
    if ((this.__UtilA7_0_13 == null)) {
      (this.__UtilA7_0_13 = import1.UtilA7());
    }
    return this.__UtilA7_0_13;
  }

  import1.UtilA8 get _UtilA8_0_14 {
    if ((this.__UtilA8_0_14 == null)) {
      (this.__UtilA8_0_14 = import1.UtilA8());
    }
    return this.__UtilA8_0_14;
  }

  import1.UtilA9 get _UtilA9_0_15 {
    if ((this.__UtilA9_0_15 == null)) {
      (this.__UtilA9_0_15 = import1.UtilA9());
    }
    return this.__UtilA9_0_15;
  }

  import1.AppUtil get _AppUtil_0_26 {
    if ((this.__AppUtil_0_26 == null)) {
      (this.__AppUtil_0_26 = import1.AppUtil(this._UtilA0_0_6, this._UtilA1_0_7, this._UtilA2_0_8, this._UtilA3_0_9, this._UtilA4_0_10, this._UtilA5_0_11, this._UtilA6_0_12, this._UtilA7_0_13, this._UtilA8_0_14, this._UtilA9_0_15));
    }
    return this.__AppUtil_0_26;
  }

  import1.BaseUtil get _BaseUtil_0_27 {
    if ((this.__BaseUtil_0_27 == null)) {
      (this.__BaseUtil_0_27 = import1.BaseUtil());
    }
    return this.__BaseUtil_0_27;
  }

  @override
  void build() {
    this.componentView = ViewHasLargeProviders0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasLargeProviders(this.injector(0));
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if ((identical(token, import1.UtilA0) || identical(token, import1.UtilB0))) {
        return this._UtilA0_0_6;
      }
      if ((identical(token, import1.UtilA1) || identical(token, import1.UtilB1))) {
        return this._UtilA1_0_7;
      }
      if ((identical(token, import1.UtilA2) || identical(token, import1.UtilB2))) {
        return this._UtilA2_0_8;
      }
      if ((identical(token, import1.UtilA3) || identical(token, import1.UtilB3))) {
        return this._UtilA3_0_9;
      }
      if ((identical(token, import1.UtilA4) || identical(token, import1.UtilB4))) {
        return this._UtilA4_0_10;
      }
      if ((identical(token, import1.UtilA5) || identical(token, import1.UtilB5))) {
        return this._UtilA5_0_11;
      }
      if ((identical(token, import1.UtilA6) || identical(token, import1.UtilB6))) {
        return this._UtilA6_0_12;
      }
      if ((identical(token, import1.UtilA7) || identical(token, import1.UtilB7))) {
        return this._UtilA7_0_13;
      }
      if ((identical(token, import1.UtilA8) || identical(token, import1.UtilB8))) {
        return this._UtilA8_0_14;
      }
      if ((identical(token, import1.UtilA9) || identical(token, import1.UtilB9))) {
        return this._UtilA9_0_15;
      }
      if (identical(token, import1.AppUtil)) {
        return this._AppUtil_0_26;
      }
      if (identical(token, import1.BaseUtil)) {
        return this._BaseUtil_0_27;
      }
    }
    return notFoundResult;
  }
}

import18.HostView<import1.HasLargeProviders> viewFactory_HasLargeProvidersHost0() {
  return _ViewHasLargeProvidersHost0();
}

_i1.Injector doGenerate$Injector([_i1.Injector parent]) => _Injector$doGenerate._(parent);

class _Injector$doGenerate extends _i2.HierarchicalInjector implements _i1.Injector {
  _Injector$doGenerate._([_i1.Injector parent]) : super(parent);

  _i3.BaseUtil _field0;

  _i3.AppUtil _field1;

  _i3.UtilA9 _field12;

  _i3.UtilA8 _field13;

  _i3.UtilA7 _field14;

  _i3.UtilA6 _field15;

  _i3.UtilA5 _field16;

  _i3.UtilA4 _field17;

  _i3.UtilA3 _field18;

  _i3.UtilA2 _field19;

  _i3.UtilA1 _field20;

  _i3.UtilA0 _field21;

  _i3.BaseUtil _getBaseUtil$0() => _field0 ??= _i3.BaseUtil();
  _i3.AppUtil _getAppUtil$1() => _field1 ??= _i3.AppUtil(this.get(_i3.UtilB0), this.get(_i3.UtilB1), this.get(_i3.UtilB2), this.get(_i3.UtilB3), this.get(_i3.UtilB4), this.get(_i3.UtilB5), this.get(_i3.UtilB6), this.get(_i3.UtilB7), this.get(_i3.UtilB8), this.get(_i3.UtilB9));
  dynamic _getExisting$2() => this.get(_i3.UtilA9);
  dynamic _getExisting$3() => this.get(_i3.UtilA8);
  dynamic _getExisting$4() => this.get(_i3.UtilA7);
  dynamic _getExisting$5() => this.get(_i3.UtilA6);
  dynamic _getExisting$6() => this.get(_i3.UtilA5);
  dynamic _getExisting$7() => this.get(_i3.UtilA4);
  dynamic _getExisting$8() => this.get(_i3.UtilA3);
  dynamic _getExisting$9() => this.get(_i3.UtilA2);
  dynamic _getExisting$10() => this.get(_i3.UtilA1);
  dynamic _getExisting$11() => this.get(_i3.UtilA0);
  _i3.UtilA9 _getUtilA9$12() => _field12 ??= _i3.UtilA9();
  _i3.UtilA8 _getUtilA8$13() => _field13 ??= _i3.UtilA8();
  _i3.UtilA7 _getUtilA7$14() => _field14 ??= _i3.UtilA7();
  _i3.UtilA6 _getUtilA6$15() => _field15 ??= _i3.UtilA6();
  _i3.UtilA5 _getUtilA5$16() => _field16 ??= _i3.UtilA5();
  _i3.UtilA4 _getUtilA4$17() => _field17 ??= _i3.UtilA4();
  _i3.UtilA3 _getUtilA3$18() => _field18 ??= _i3.UtilA3();
  _i3.UtilA2 _getUtilA2$19() => _field19 ??= _i3.UtilA2();
  _i3.UtilA1 _getUtilA1$20() => _field20 ??= _i3.UtilA1();
  _i3.UtilA0 _getUtilA0$21() => _field21 ??= _i3.UtilA0();
  _i1.Injector _getInjector$22() => this;
  @override
  Object injectFromSelfOptional(Object token, [Object orElse = _i1.throwIfNotFound]) {
    if (identical(token, _i3.BaseUtil)) {
      return _getBaseUtil$0();
    }
    if (identical(token, _i3.AppUtil)) {
      return _getAppUtil$1();
    }
    if (identical(token, _i3.UtilB9)) {
      return _getExisting$2();
    }
    if (identical(token, _i3.UtilB8)) {
      return _getExisting$3();
    }
    if (identical(token, _i3.UtilB7)) {
      return _getExisting$4();
    }
    if (identical(token, _i3.UtilB6)) {
      return _getExisting$5();
    }
    if (identical(token, _i3.UtilB5)) {
      return _getExisting$6();
    }
    if (identical(token, _i3.UtilB4)) {
      return _getExisting$7();
    }
    if (identical(token, _i3.UtilB3)) {
      return _getExisting$8();
    }
    if (identical(token, _i3.UtilB2)) {
      return _getExisting$9();
    }
    if (identical(token, _i3.UtilB1)) {
      return _getExisting$10();
    }
    if (identical(token, _i3.UtilB0)) {
      return _getExisting$11();
    }
    if (identical(token, _i3.UtilA9)) {
      return _getUtilA9$12();
    }
    if (identical(token, _i3.UtilA8)) {
      return _getUtilA8$13();
    }
    if (identical(token, _i3.UtilA7)) {
      return _getUtilA7$14();
    }
    if (identical(token, _i3.UtilA6)) {
      return _getUtilA6$15();
    }
    if (identical(token, _i3.UtilA5)) {
      return _getUtilA5$16();
    }
    if (identical(token, _i3.UtilA4)) {
      return _getUtilA4$17();
    }
    if (identical(token, _i3.UtilA3)) {
      return _getUtilA3$18();
    }
    if (identical(token, _i3.UtilA2)) {
      return _getUtilA2$19();
    }
    if (identical(token, _i3.UtilA1)) {
      return _getUtilA1$20();
    }
    if (identical(token, _i3.UtilA0)) {
      return _getUtilA0$21();
    }
    if (identical(token, _i1.Injector)) {
      return _getInjector$22();
    }
    return orElse;
  }
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(RootComponent, createRootComponentFactory());
  _ngRef.registerComponent(UsesDefaultChangeDetectionAndInputs, createUsesDefaultChangeDetectionAndInputsFactory());
  _ngRef.registerComponent(DefaultChangeDetectionAndInputs, createDefaultChangeDetectionAndInputsFactory());
  _ngRef.registerComponent(UsesOnPushChangeDetectionAndInputs, createUsesOnPushChangeDetectionAndInputsFactory());
  _ngRef.registerComponent(OnPushChangeDetectionAndInputs, createOnPushChangeDetectionAndInputsFactory());
  _ngRef.registerComponent(InlinedNgIf, createInlinedNgIfFactory());
  _ngRef.registerComponent(EmbeddedNgIf, createEmbeddedNgIfFactory());
  _ngRef.registerComponent(EmbeddedNgFor, createEmbeddedNgForFactory());
  _ngRef.registerComponent(NullComponent, createNullComponentFactory());
  _ngRef.registerComponent(InjectsFromArbitraryParent, createInjectsFromArbitraryParentFactory());
  _ngRef.registerComponent(ComponentConditionalFeatures, createComponentConditionalFeaturesFactory());
  _ngRef.registerComponent(FeatureA, createFeatureAFactory());
  _ngRef.registerComponent(FeatureB, createFeatureBFactory());
  _ngRef.registerComponent(UsesDomBindings, createUsesDomBindingsFactory());
  _ngRef.registerComponent(UsesNgDirectives, createUsesNgDirectivesFactory());
  _ngRef.registerComponent(HasNestedProviderLookups, createHasNestedProviderLookupsFactory());
  _ngRef.registerComponent(InjectsManyThingsDynamically, createInjectsManyThingsDynamicallyFactory());
  _ngRef.registerComponent(HasHostListeners, createHasHostListenersFactory());
  _ngRef.registerComponent(Child, createChildFactory());
  _ngRef.registerComponent(OnPushChild, createOnPushChildFactory());
  _ngRef.registerComponent(HasContentChildren, createHasContentChildrenFactory());
  _ngRef.registerComponent(HasViewChildren, createHasViewChildrenFactory());
  _ngRef.registerComponent(HasLargeProviders, createHasLargeProvidersFactory());
  _ref0.initReflector();
  _ref1.initReflector();
}
