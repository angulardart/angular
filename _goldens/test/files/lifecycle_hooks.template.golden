// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'lifecycle_hooks.dart';
export 'lifecycle_hooks.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'lifecycle_hooks.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;

final List<dynamic> styles$MostLifecycleHooksComponent = const [];

class ViewMostLifecycleHooksComponent0 extends import0.ComponentView<import1.MostLifecycleHooksComponent> {
  ViewEmptyComponent0 _compView_0;
  import1.EmptyComponent _EmptyComponent_0_5;
  static import2.ComponentStyles _componentStyles;
  ViewMostLifecycleHooksComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('lifecycle-hooks');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/lifecycle_hooks.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewEmptyComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._EmptyComponent_0_5 = import1.EmptyComponent();
    this._compView_0.create(this._EmptyComponent_0_5);
    this.project(parentRenderNode, 0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$MostLifecycleHooksComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _MostLifecycleHooksComponentNgFactory = ComponentFactory<import1.MostLifecycleHooksComponent>('lifecycle-hooks', viewFactory_MostLifecycleHooksComponentHost0);
ComponentFactory<import1.MostLifecycleHooksComponent> get MostLifecycleHooksComponentNgFactory {
  return _MostLifecycleHooksComponentNgFactory;
}

ComponentFactory<import1.MostLifecycleHooksComponent> createMostLifecycleHooksComponentFactory() {
  return ComponentFactory('lifecycle-hooks', viewFactory_MostLifecycleHooksComponentHost0);
}

final List<dynamic> styles$MostLifecycleHooksComponentHost = const [];

class _ViewMostLifecycleHooksComponentHost0 extends import8.HostView<import1.MostLifecycleHooksComponent> {
  @override
  void build() {
    this.componentView = ViewMostLifecycleHooksComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.MostLifecycleHooksComponent();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    if (((!import6.debugThrowIfChanged) && firstCheck)) {
      this.component.ngOnInit();
    }
    if ((!import6.debugThrowIfChanged)) {
      if (firstCheck) {
        this.component.ngAfterContentInit();
      }
      this.component.ngAfterContentChecked();
    }
    this.componentView.detectChanges();
    if ((!import6.debugThrowIfChanged)) {
      if (firstCheck) {
        this.component.ngAfterViewInit();
      }
      this.component.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    this.component.ngOnDestroy();
  }
}

import8.HostView<import1.MostLifecycleHooksComponent> viewFactory_MostLifecycleHooksComponentHost0() {
  return _ViewMostLifecycleHooksComponentHost0();
}

final List<dynamic> styles$EmptyComponent = const [];

class ViewEmptyComponent0 extends import0.ComponentView<import1.EmptyComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewEmptyComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('empty-comp');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/lifecycle_hooks.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$EmptyComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _EmptyComponentNgFactory = ComponentFactory<import1.EmptyComponent>('empty-comp', viewFactory_EmptyComponentHost0);
ComponentFactory<import1.EmptyComponent> get EmptyComponentNgFactory {
  return _EmptyComponentNgFactory;
}

ComponentFactory<import1.EmptyComponent> createEmptyComponentFactory() {
  return ComponentFactory('empty-comp', viewFactory_EmptyComponentHost0);
}

final List<dynamic> styles$EmptyComponentHost = const [];

class _ViewEmptyComponentHost0 extends import8.HostView<import1.EmptyComponent> {
  @override
  void build() {
    this.componentView = ViewEmptyComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.EmptyComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.EmptyComponent> viewFactory_EmptyComponentHost0() {
  return _ViewEmptyComponentHost0();
}

final List<dynamic> styles$AfterChangesComponent = const [];

class ViewAfterChangesComponent0 extends import0.ComponentView<import1.AfterChangesComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewAfterChangesComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('after-changes');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/lifecycle_hooks.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$AfterChangesComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _AfterChangesComponentNgFactory = ComponentFactory<import1.AfterChangesComponent>('after-changes', viewFactory_AfterChangesComponentHost0);
ComponentFactory<import1.AfterChangesComponent> get AfterChangesComponentNgFactory {
  return _AfterChangesComponentNgFactory;
}

ComponentFactory<import1.AfterChangesComponent> createAfterChangesComponentFactory() {
  return ComponentFactory('after-changes', viewFactory_AfterChangesComponentHost0);
}

final List<dynamic> styles$AfterChangesComponentHost = const [];

class _ViewAfterChangesComponentHost0 extends import8.HostView<import1.AfterChangesComponent> {
  @override
  void build() {
    this.componentView = ViewAfterChangesComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AfterChangesComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.AfterChangesComponent> viewFactory_AfterChangesComponentHost0() {
  return _ViewAfterChangesComponentHost0();
}

final List<dynamic> styles$UsesLifecycleHooksComponent = const [];

class ViewUsesLifecycleHooksComponent0 extends import0.ComponentView<import1.UsesLifecycleHooksComponent> {
  ViewMostLifecycleHooksComponent0 _compView_0;
  import1.MostLifecycleHooksComponent _MostLifecycleHooksComponent_0_5;
  ViewEmptyComponent0 _compView_1;
  import1.EmptyComponent _EmptyComponent_1_5;
  import1.DoCheckDirective _DoCheckDirective_2_5;
  ViewAfterChangesComponent0 _compView_3;
  import1.AfterChangesComponent _AfterChangesComponent_3_5;
  var _expr_0;
  var _expr_1;
  var _expr_2;
  static import2.ComponentStyles _componentStyles;
  ViewUsesLifecycleHooksComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-lifecylce-hooks');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/lifecycle_hooks.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewMostLifecycleHooksComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._MostLifecycleHooksComponent_0_5 = import1.MostLifecycleHooksComponent();
    this._compView_1 = ViewEmptyComponent0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    this._EmptyComponent_1_5 = import1.EmptyComponent();
    this._compView_1.create(this._EmptyComponent_1_5);
    this._compView_0.createAndProject(this._MostLifecycleHooksComponent_0_5, [
      [_el_1]
    ]);
    final doc = import5.document;
    final _el_2 = import9.appendElement(doc, parentRenderNode, 'do-check');
    this._DoCheckDirective_2_5 = import1.DoCheckDirective();
    this._compView_3 = ViewAfterChangesComponent0(this, 3);
    final _el_3 = this._compView_3.rootElement;
    parentRenderNode.append(_el_3);
    this._AfterChangesComponent_3_5 = import1.AfterChangesComponent();
    this._compView_3.create(this._AfterChangesComponent_3_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    bool firstCheck = this.firstCheck;
    final currVal_0 = _ctx.input;
    if (import6.checkBinding(this._expr_0, currVal_0, 'input', 'asset:_goldens/test/files/lifecycle_hooks.dart')) {
      this._MostLifecycleHooksComponent_0_5.input = currVal_0;
      this._expr_0 = currVal_0;
    }
    if (((!import6.debugThrowIfChanged) && firstCheck)) {
      this._MostLifecycleHooksComponent_0_5.ngOnInit();
    }
    final currVal_1 = _ctx.input;
    if (import6.checkBinding(this._expr_1, currVal_1, 'input', 'asset:_goldens/test/files/lifecycle_hooks.dart')) {
      this._DoCheckDirective_2_5.input = currVal_1;
      this._expr_1 = currVal_1;
    }
    if ((!import6.debugThrowIfChanged)) {
      this._DoCheckDirective_2_5.ngDoCheck();
    }
    changed = false;
    final currVal_2 = _ctx.input;
    if (import6.checkBinding(this._expr_2, currVal_2, 'input', 'asset:_goldens/test/files/lifecycle_hooks.dart')) {
      this._AfterChangesComponent_3_5.input = currVal_2;
      changed = true;
      this._expr_2 = currVal_2;
    }
    if (changed) {
      this._AfterChangesComponent_3_5.ngAfterChanges();
    }
    if ((!import6.debugThrowIfChanged)) {
      if (firstCheck) {
        this._MostLifecycleHooksComponent_0_5.ngAfterContentInit();
      }
      this._MostLifecycleHooksComponent_0_5.ngAfterContentChecked();
    }
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_3.detectChanges();
    if ((!import6.debugThrowIfChanged)) {
      if (firstCheck) {
        this._MostLifecycleHooksComponent_0_5.ngAfterViewInit();
      }
      this._MostLifecycleHooksComponent_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_3.destroyInternalState();
    this._MostLifecycleHooksComponent_0_5.ngOnDestroy();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$UsesLifecycleHooksComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesLifecycleHooksComponentNgFactory = ComponentFactory<import1.UsesLifecycleHooksComponent>('uses-lifecylce-hooks', viewFactory_UsesLifecycleHooksComponentHost0);
ComponentFactory<import1.UsesLifecycleHooksComponent> get UsesLifecycleHooksComponentNgFactory {
  return _UsesLifecycleHooksComponentNgFactory;
}

ComponentFactory<import1.UsesLifecycleHooksComponent> createUsesLifecycleHooksComponentFactory() {
  return ComponentFactory('uses-lifecylce-hooks', viewFactory_UsesLifecycleHooksComponentHost0);
}

final List<dynamic> styles$UsesLifecycleHooksComponentHost = const [];

class _ViewUsesLifecycleHooksComponentHost0 extends import8.HostView<import1.UsesLifecycleHooksComponent> {
  @override
  void build() {
    this.componentView = ViewUsesLifecycleHooksComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesLifecycleHooksComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.UsesLifecycleHooksComponent> viewFactory_UsesLifecycleHooksComponentHost0() {
  return _ViewUsesLifecycleHooksComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(MostLifecycleHooksComponent, createMostLifecycleHooksComponentFactory());
  _ngRef.registerComponent(EmptyComponent, createEmptyComponentFactory());
  _ngRef.registerComponent(AfterChangesComponent, createAfterChangesComponentFactory());
  _ngRef.registerComponent(UsesLifecycleHooksComponent, createUsesLifecycleHooksComponentFactory());
  _ref0.initReflector();
}
