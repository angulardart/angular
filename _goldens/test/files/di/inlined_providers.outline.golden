// ignore_for_file: library_prefixes,unused_import,strict_raw_type,undefined_hidden_name
// The .template.dart files also export the user code.
export 'inlined_providers.dart';

// Required for referencing runtime code.
import 'dart:html' as _html;
import 'package:angular/angular.dart' as _ng;
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as _ng;
import 'package:angular/src/core/linker/views/component_view.dart' as _ng;
import 'package:angular/src/core/linker/views/render_view.dart' as _ng;
import 'package:angular/src/core/linker/views/view.dart' as _ng;

// Required for specifically referencing user code.
import 'inlined_providers.dart';

// Required for "type inference" (scoping).
import 'package:angular/angular.dart';

// For @Component class ParentComponent.
external List<dynamic> get styles$ParentComponent;
external _ng.ComponentFactory<ParentComponent> get ParentComponentNgFactory;
external _ng.ComponentFactory<ParentComponent> createParentComponentFactory();
class ViewParentComponent0 extends _ng.ComponentView<ParentComponent> {
  external ViewParentComponent0(_ng.View parentView, int parentIndex);
}
// For @Component class ChildComponentProvidingA$B$C.
external List<dynamic> get styles$ChildComponentProvidingA$B$C;
external _ng.ComponentFactory<ChildComponentProvidingA$B$C> get ChildComponentProvidingA$B$CNgFactory;
external _ng.ComponentFactory<ChildComponentProvidingA$B$C> createChildComponentProvidingA$B$CFactory();
class ViewChildComponentProvidingA$B$C0 extends _ng.ComponentView<ChildComponentProvidingA$B$C> {
  external ViewChildComponentProvidingA$B$C0(_ng.View parentView, int parentIndex);
}
// For @Component class ChildComponentWithNgContentProviding$D.
external List<dynamic> get styles$ChildComponentWithNgContentProviding$D;
external _ng.ComponentFactory<ChildComponentWithNgContentProviding$D> get ChildComponentWithNgContentProviding$DNgFactory;
external _ng.ComponentFactory<ChildComponentWithNgContentProviding$D> createChildComponentWithNgContentProviding$DFactory();
class ViewChildComponentWithNgContentProviding$D0 extends _ng.ComponentView<ChildComponentWithNgContentProviding$D> {
  external ViewChildComponentWithNgContentProviding$D0(_ng.View parentView, int parentIndex);
}
// For @Component class ChildComponentInjecting$D.
external List<dynamic> get styles$ChildComponentInjecting$D;
external _ng.ComponentFactory<ChildComponentInjecting$D> get ChildComponentInjecting$DNgFactory;
external _ng.ComponentFactory<ChildComponentInjecting$D> createChildComponentInjecting$DFactory();
class ViewChildComponentInjecting$D0 extends _ng.ComponentView<ChildComponentInjecting$D> {
  external ViewChildComponentInjecting$D0(_ng.View parentView, int parentIndex);
}
// For @Component class ChildComponentWithVisibilityAll.
external List<dynamic> get styles$ChildComponentWithVisibilityAll;
external _ng.ComponentFactory<ChildComponentWithVisibilityAll> get ChildComponentWithVisibilityAllNgFactory;
external _ng.ComponentFactory<ChildComponentWithVisibilityAll> createChildComponentWithVisibilityAllFactory();
class ViewChildComponentWithVisibilityAll0 extends _ng.ComponentView<ChildComponentWithVisibilityAll> {
  external ViewChildComponentWithVisibilityAll0(_ng.View parentView, int parentIndex);
}
// For @Directive class DirectiveProviding$A2$D2.
class DirectiveProviding$A2$D2NgCd extends _ng.DirectiveChangeDetector {
  external DirectiveProviding$A2$D2 get instance;
  external void deliverChanges();
  external DirectiveProviding$A2$D2NgCd(DirectiveProviding$A2$D2 instance);
  external void detectHostChanges(_ng.RenderView view, _html.Element hostElement);
}

external void initReflector();
