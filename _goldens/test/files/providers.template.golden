// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'providers.dart';
export 'providers.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'providers.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;
import 'package:angular/src/core/zone/ng_zone.dart' as import11;
import 'package:angular_compiler/v1/src/metadata/di_tokens.dart' as import12;
import 'providers.dart' as import13;

final List<dynamic> styles$ProvidersComponent = const [];

class ViewProvidersComponent0 extends import0.ComponentView<import1.ProvidersComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewProvidersComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('providers');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/providers.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Hello');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ProvidersComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ProvidersComponentNgFactory = ComponentFactory<import1.ProvidersComponent>('providers', viewFactory_ProvidersComponentHost0);
ComponentFactory<import1.ProvidersComponent> get ProvidersComponentNgFactory {
  return _ProvidersComponentNgFactory;
}

ComponentFactory<import1.ProvidersComponent> createProvidersComponentFactory() {
  return ComponentFactory('providers', viewFactory_ProvidersComponentHost0);
}

final List<dynamic> styles$ProvidersComponentHost = const [];

class _ViewProvidersComponentHost0 extends import9.HostView<import1.ProvidersComponent> {
  import1.MyTypeAnnotation __MyTypeAnnotation_0_6;
  import1.MyInjectableTypeAnnotation __MyInjectableTypeAnnotation_0_7;
  dynamic __MyUseFactory_0_8;
  import1.MyUseClass __MyUseClass_0_9;
  import1.MyUseValue __MyUseValue_0_12;
  String __useValueString_0_13;
  List<dynamic> __useValueList_0_14;
  Map<String, dynamic> __useValueMap_0_15;
  dynamic __useEnums_0_16;
  String __XsrfToken_0_17;
  import1.MyTypeAnnotation get _MyTypeAnnotation_0_6 {
    if ((this.__MyTypeAnnotation_0_6 == null)) {
      (this.__MyTypeAnnotation_0_6 = import1.MyTypeAnnotation());
    }
    return this.__MyTypeAnnotation_0_6;
  }

  import1.MyInjectableTypeAnnotation get _MyInjectableTypeAnnotation_0_7 {
    if ((this.__MyInjectableTypeAnnotation_0_7 == null)) {
      (this.__MyInjectableTypeAnnotation_0_7 = import1.MyInjectableTypeAnnotation());
    }
    return this.__MyInjectableTypeAnnotation_0_7;
  }

  dynamic get _MyUseFactory_0_8 {
    if ((this.__MyUseFactory_0_8 == null)) {
      (this.__MyUseFactory_0_8 = (import6.isDevMode
          ? import10.debugInjectorWrap(import1.MyUseFactory, () {
              return import1.ProvidersComponent.createService(this.injectorGet(import11.NgZone, this.parentIndex));
            })
          : import1.ProvidersComponent.createService(this.injectorGet(import11.NgZone, this.parentIndex))));
    }
    return this.__MyUseFactory_0_8;
  }

  import1.MyUseClass get _MyUseClass_0_9 {
    if ((this.__MyUseClass_0_9 == null)) {
      (this.__MyUseClass_0_9 = import1.MyUseClass());
    }
    return this.__MyUseClass_0_9;
  }

  import1.MyUseValue get _MyUseValue_0_12 {
    if ((this.__MyUseValue_0_12 == null)) {
      (this.__MyUseValue_0_12 = const import1.MyUseValue('Matan'));
    }
    return this.__MyUseValue_0_12;
  }

  String get _useValueString_0_13 {
    if ((this.__useValueString_0_13 == null)) {
      (this.__useValueString_0_13 = 'foo');
    }
    return this.__useValueString_0_13;
  }

  List<dynamic> get _useValueList_0_14 {
    if ((this.__useValueList_0_14 == null)) {
      (this.__useValueList_0_14 = const [import1.MyUseValue('Andrew'), import1.MyUseValue('Matan'), import1.MyUseValue.named(optional: true)]);
    }
    return this.__useValueList_0_14;
  }

  Map<String, dynamic> get _useValueMap_0_15 {
    if ((this.__useValueMap_0_15 == null)) {
      (this.__useValueMap_0_15 = const {'Andrew': import1.MyUseValue('Andrew'), 'Matan': import1.MyUseValue('Matan')});
    }
    return this.__useValueMap_0_15;
  }

  dynamic get _useEnums_0_16 {
    if ((this.__useEnums_0_16 == null)) {
      (this.__useEnums_0_16 = import1.MyEnum.first);
    }
    return this.__useEnums_0_16;
  }

  String get _XsrfToken_0_17 {
    if ((this.__XsrfToken_0_17 == null)) {
      (this.__XsrfToken_0_17 = 'ABC123');
    }
    return this.__XsrfToken_0_17;
  }

  @override
  void build() {
    this.componentView = ViewProvidersComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ProvidersComponent();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import1.MyTypeAnnotation)) {
        return this._MyTypeAnnotation_0_6;
      }
      if (identical(token, import1.MyInjectableTypeAnnotation)) {
        return this._MyInjectableTypeAnnotation_0_7;
      }
      if (identical(token, import1.MyUseFactory)) {
        return this._MyUseFactory_0_8;
      }
      if (((identical(token, import1.MyUseClass) || identical(token, import1.MyUseExisting)) || identical(token, import1.MyUseExistingNested))) {
        return this._MyUseClass_0_9;
      }
      if (identical(token, import1.MyUseValue)) {
        return this._MyUseValue_0_12;
      }
      if (identical(token, const import12.OpaqueToken<dynamic>('useValueString'))) {
        return this._useValueString_0_13;
      }
      if (identical(token, const import12.OpaqueToken<dynamic>('useValueList'))) {
        return this._useValueList_0_14;
      }
      if (identical(token, const import12.OpaqueToken<dynamic>('useValueMap'))) {
        return this._useValueMap_0_15;
      }
      if (identical(token, const import12.OpaqueToken<dynamic>('useEnums'))) {
        return this._useEnums_0_16;
      }
      if (identical(token, const import13.XsrfToken())) {
        return this._XsrfToken_0_17;
      }
    }
    return notFoundResult;
  }
}

import9.HostView<import1.ProvidersComponent> viewFactory_ProvidersComponentHost0() {
  return _ViewProvidersComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ProvidersComponent, createProvidersComponentFactory());
  _ngRef.registerFactory(MyInjectableTypeAnnotation, () => MyInjectableTypeAnnotation());
  _ref0.initReflector();
}
