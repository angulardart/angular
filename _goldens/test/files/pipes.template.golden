// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'pipes.dart';
export 'pipes.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'pipes.dart' as import1;
import 'package:angular/src/runtime/text_binding.dart' as import2;
import 'dart:core';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/view.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/runtime/proxies.dart' as import10;
import 'package:angular/src/runtime/interpolate.dart' as import11;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import13;

final List<dynamic> styles$Comp = const [];

class ViewComp0 extends import0.ComponentView<import1.Comp> {
  final import2.TextBinding _textBinding_0 = import2.TextBinding();
  final import2.TextBinding _textBinding_2 = import2.TextBinding();
  final import2.TextBinding _textBinding_4 = import2.TextBinding();
  final import2.TextBinding _textBinding_6 = import2.TextBinding();
  import1.PurePipe _pipe_pure_0;
  dynamic Function(dynamic) _pipe_pure_0_0;
  import1.DirtyPipe _pipe_dirty_1;
  import1.LifecyclePipe _pipe_lifecycle_2;
  dynamic Function(dynamic) _pipe_lifecycle_2_0;
  import1.TypesPipe _pipe_types_3;
  String Function(String, int, dynamic, import1.C, void Function(String)) _pipe_types_3_0;
  static import4.ComponentStyles _componentStyles;
  ViewComp0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('comp');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/files/pipes.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    parentRenderNode.append(this._textBinding_0.element);
    final _text_1 = import9.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_2.element);
    final _text_3 = import9.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_4.element);
    final _text_5 = import9.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_6.element);
    this._pipe_pure_0 = import1.PurePipe();
    this._pipe_pure_0_0 = import10.pureProxy1(this._pipe_pure_0.transform);
    this._pipe_dirty_1 = import1.DirtyPipe();
    this._pipe_lifecycle_2 = import1.LifecyclePipe();
    this._pipe_lifecycle_2_0 = import10.pureProxy1(this._pipe_lifecycle_2.transform);
    this._pipe_types_3 = import1.TypesPipe();
    this._pipe_types_3_0 = import10.pureProxy5(this._pipe_types_3.transform);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_0.updateText(import11.interpolate0(this._pipe_pure_0_0('foo')));
    this._textBinding_2.updateText(import11.interpolate0(this._pipe_dirty_1.transform('bar')));
    this._textBinding_4.updateText(import11.interpolate0(this._pipe_lifecycle_2_0('lifecycle')));
    this._textBinding_6.updateText(import11.interpolate0(this._pipe_types_3_0('types', 1, 2, _ctx.c, _ctx.d)));
  }

  @override
  void destroyInternal() {
    this._pipe_lifecycle_2.ngOnDestroy();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$Comp, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _CompNgFactory = ComponentFactory<import1.Comp>('comp', viewFactory_CompHost0);
ComponentFactory<import1.Comp> get CompNgFactory {
  return _CompNgFactory;
}

ComponentFactory<import1.Comp> createCompFactory() {
  return ComponentFactory('comp', viewFactory_CompHost0);
}

final List<dynamic> styles$CompHost = const [];

class _ViewCompHost0 extends import13.HostView<import1.Comp> {
  @override
  void build() {
    this.componentView = ViewComp0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Comp();
    this.initRootNode(_el_0);
  }
}

import13.HostView<import1.Comp> viewFactory_CompHost0() {
  return _ViewCompHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(Comp, createCompFactory());
  _ref0.initReflector();
}
