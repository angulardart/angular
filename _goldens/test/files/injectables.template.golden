// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'injectables.dart';
export 'injectables.dart';
import 'injectables.dart' as _i1;
import 'dart:html' as _i2;
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'injectables.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;
import 'package:angular_compiler/v1/src/metadata/di_tokens.dart' as import11;
import 'dart:core';

final List<dynamic> styles$InjectableComponent = const [];

class ViewInjectableComponent0 extends import0.ComponentView<import1.InjectableComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectableComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('test-injectables');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/injectables.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    final _text_1 = import7.appendText(_el_0, 'Inject!');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$InjectableComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _InjectableComponentNgFactory = ComponentFactory<import1.InjectableComponent>('test-injectables', viewFactory_InjectableComponentHost0);
ComponentFactory<import1.InjectableComponent> get InjectableComponentNgFactory {
  return _InjectableComponentNgFactory;
}

ComponentFactory<import1.InjectableComponent> createInjectableComponentFactory() {
  return ComponentFactory('test-injectables', viewFactory_InjectableComponentHost0);
}

final List<dynamic> styles$InjectableComponentHost = const [];

class _ViewInjectableComponentHost0 extends import9.HostView<import1.InjectableComponent> {
  dynamic _test_0_5;
  dynamic __SomeDep_0_7;
  dynamic __BaseService_0_8;
  dynamic get _SomeDep_0_7 {
    if ((this.__SomeDep_0_7 == null)) {
      (this.__SomeDep_0_7 = import1.createLinkedHashMap(this._test_0_5));
    }
    return this.__SomeDep_0_7;
  }

  dynamic get _BaseService_0_8 {
    if ((this.__BaseService_0_8 == null)) {
      (this.__BaseService_0_8 = (import6.isDevMode
          ? import10.debugInjectorWrap(import1.BaseService, () {
              return import1.createLinkedHashMap(this._SomeDep_0_7, this.injectorGet(import1.SomeDep, this.parentIndex), this._SomeDep_0_7);
            })
          : import1.createLinkedHashMap(this._SomeDep_0_7, this.injectorGet(import1.SomeDep, this.parentIndex), this._SomeDep_0_7)));
    }
    return this.__BaseService_0_8;
  }

  @override
  void build() {
    this.componentView = ViewInjectableComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this._test_0_5 = (import6.isDevMode
        ? import10.debugInjectorWrap(const import11.OpaqueToken<dynamic>('test'), () {
            return import1.injectableFactory(this.injectorGet(import5.Window, this.parentIndex));
          })
        : import1.injectableFactory(this.injectorGet(import5.Window, this.parentIndex)));
    this.component = (import6.isDevMode
        ? import10.debugInjectorWrap(import1.InjectableComponent, () {
            return import1.InjectableComponent(null, this.injectorGetOptional(import1.InjectableService, this.parentIndex), this._test_0_5, this.injectorGetOptional(String, this.parentIndex));
          })
        : import1.InjectableComponent(null, this.injectorGetOptional(import1.InjectableService, this.parentIndex), this._test_0_5, this.injectorGetOptional(String, this.parentIndex)));
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, const import11.OpaqueToken<dynamic>('test'))) {
        return this._test_0_5;
      }
      if (identical(token, import1.SomeDep)) {
        return this._SomeDep_0_7;
      }
      if (identical(token, import1.BaseService)) {
        return this._BaseService_0_8;
      }
    }
    return notFoundResult;
  }
}

import9.HostView<import1.InjectableComponent> viewFactory_InjectableComponentHost0() {
  return _ViewInjectableComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InjectableComponent, createInjectableComponentFactory());
  _ngRef.registerFactory(SomeDep, () => SomeDep());
  _ngRef.registerFactory(BaseService, () => BaseService());
  _ngRef.registerFactory(InjectableService, () => InjectableService());
  _ngRef.registerFactory(InjectsXsrfToken, (String p0) => InjectsXsrfToken(p0));
  _ngRef.registerDependencies(InjectsXsrfToken, const [
    [_ngRef.Inject(_i1.XsrfToken())]
  ]);
  _ngRef.registerDependencies(injectableFactory, const [
    [_i2.Window]
  ]);
  _ref0.initReflector();
}
