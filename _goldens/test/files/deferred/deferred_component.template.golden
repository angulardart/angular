// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'deferred_component.dart';
export 'deferred_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'external_service.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'deferred_component.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;
import 'external_service.dart' as import10;

final List<dynamic> styles$DeferredChild1Component = const [];

class ViewDeferredChild1Component0 extends import0.ComponentView<import1.DeferredChild1Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild1Component0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-1');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Deferred Child 1');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChild1Component, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChild1ComponentNgFactory = ComponentFactory<import1.DeferredChild1Component>('deferred-child-1', viewFactory_DeferredChild1ComponentHost0);
ComponentFactory<import1.DeferredChild1Component> get DeferredChild1ComponentNgFactory {
  return _DeferredChild1ComponentNgFactory;
}

ComponentFactory<import1.DeferredChild1Component> createDeferredChild1ComponentFactory() {
  return ComponentFactory('deferred-child-1', viewFactory_DeferredChild1ComponentHost0);
}

final List<dynamic> styles$DeferredChild1ComponentHost = const [];

class _ViewDeferredChild1ComponentHost0 extends import9.HostView<import1.DeferredChild1Component> {
  @override
  void build() {
    this.componentView = ViewDeferredChild1Component0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChild1Component();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChild1Component> viewFactory_DeferredChild1ComponentHost0() {
  return _ViewDeferredChild1ComponentHost0();
}

final List<dynamic> styles$DeferredChild2Component = const [];

class ViewDeferredChild2Component0 extends import0.ComponentView<import1.DeferredChild2Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild2Component0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-2');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Deferred Child 2');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChild2Component, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChild2ComponentNgFactory = ComponentFactory<import1.DeferredChild2Component>('deferred-child-2', viewFactory_DeferredChild2ComponentHost0);
ComponentFactory<import1.DeferredChild2Component> get DeferredChild2ComponentNgFactory {
  return _DeferredChild2ComponentNgFactory;
}

ComponentFactory<import1.DeferredChild2Component> createDeferredChild2ComponentFactory() {
  return ComponentFactory('deferred-child-2', viewFactory_DeferredChild2ComponentHost0);
}

final List<dynamic> styles$DeferredChild2ComponentHost = const [];

class _ViewDeferredChild2ComponentHost0 extends import9.HostView<import1.DeferredChild2Component> {
  @override
  void build() {
    this.componentView = ViewDeferredChild2Component0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChild2Component();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChild2Component> viewFactory_DeferredChild2ComponentHost0() {
  return _ViewDeferredChild2ComponentHost0();
}

final List<dynamic> styles$DeferredChild3Component = const [];

class ViewDeferredChild3Component0 extends import0.ComponentView<import1.DeferredChild3Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild3Component0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-3');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Deferred Child 3');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChild3Component, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChild3ComponentNgFactory = ComponentFactory<import1.DeferredChild3Component>('deferred-child-3', viewFactory_DeferredChild3ComponentHost0);
ComponentFactory<import1.DeferredChild3Component> get DeferredChild3ComponentNgFactory {
  return _DeferredChild3ComponentNgFactory;
}

ComponentFactory<import1.DeferredChild3Component> createDeferredChild3ComponentFactory() {
  return ComponentFactory('deferred-child-3', viewFactory_DeferredChild3ComponentHost0);
}

final List<dynamic> styles$DeferredChild3ComponentHost = const [];

class _ViewDeferredChild3ComponentHost0 extends import9.HostView<import1.DeferredChild3Component> {
  @override
  void build() {
    this.componentView = ViewDeferredChild3Component0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChild3Component();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChild3Component> viewFactory_DeferredChild3ComponentHost0() {
  return _ViewDeferredChild3ComponentHost0();
}

final List<dynamic> styles$DeferredChildOnPush = const [];

class ViewDeferredChildOnPush0 extends import0.ComponentView<import1.DeferredChildOnPush> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildOnPush0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-on-push');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Deferred Child On Push');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChildOnPush, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChildOnPushNgFactory = ComponentFactory<import1.DeferredChildOnPush>('deferred-child-on-push', viewFactory_DeferredChildOnPushHost0);
ComponentFactory<import1.DeferredChildOnPush> get DeferredChildOnPushNgFactory {
  return _DeferredChildOnPushNgFactory;
}

ComponentFactory<import1.DeferredChildOnPush> createDeferredChildOnPushFactory() {
  return ComponentFactory('deferred-child-on-push', viewFactory_DeferredChildOnPushHost0);
}

final List<dynamic> styles$DeferredChildOnPushHost = const [];

class _ViewDeferredChildOnPushHost0 extends import9.HostView<import1.DeferredChildOnPush> {
  @override
  void build() {
    this.componentView = ViewDeferredChildOnPush0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChildOnPush();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChildOnPush> viewFactory_DeferredChildOnPushHost0() {
  return _ViewDeferredChildOnPushHost0();
}

final List<dynamic> styles$NotDeferredChildComponent = const [];

class ViewNotDeferredChildComponent0 extends import0.ComponentView<import1.NotDeferredChildComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewNotDeferredChildComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('not-deferred-child');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$NotDeferredChildComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _NotDeferredChildComponentNgFactory = ComponentFactory<import1.NotDeferredChildComponent>('not-deferred-child', viewFactory_NotDeferredChildComponentHost0);
ComponentFactory<import1.NotDeferredChildComponent> get NotDeferredChildComponentNgFactory {
  return _NotDeferredChildComponentNgFactory;
}

ComponentFactory<import1.NotDeferredChildComponent> createNotDeferredChildComponentFactory() {
  return ComponentFactory('not-deferred-child', viewFactory_NotDeferredChildComponentHost0);
}

final List<dynamic> styles$NotDeferredChildComponentHost = const [];

class _ViewNotDeferredChildComponentHost0 extends import9.HostView<import1.NotDeferredChildComponent> {
  @override
  void build() {
    this.componentView = ViewNotDeferredChildComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.NotDeferredChildComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.NotDeferredChildComponent> viewFactory_NotDeferredChildComponentHost0() {
  return _ViewNotDeferredChildComponentHost0();
}

final List<dynamic> styles$DeferredChildComponentWithoutNgContent = const [];

class ViewDeferredChildComponentWithoutNgContent0 extends import0.ComponentView<import1.DeferredChildComponentWithoutNgContent> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithoutNgContent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-without-ng-content');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    final _text_1 = import7.appendText(_el_0, 'Child');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithoutNgContent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChildComponentWithoutNgContentNgFactory = ComponentFactory<import1.DeferredChildComponentWithoutNgContent>('deferred-child-without-ng-content', viewFactory_DeferredChildComponentWithoutNgContentHost0);
ComponentFactory<import1.DeferredChildComponentWithoutNgContent> get DeferredChildComponentWithoutNgContentNgFactory {
  return _DeferredChildComponentWithoutNgContentNgFactory;
}

ComponentFactory<import1.DeferredChildComponentWithoutNgContent> createDeferredChildComponentWithoutNgContentFactory() {
  return ComponentFactory('deferred-child-without-ng-content', viewFactory_DeferredChildComponentWithoutNgContentHost0);
}

final List<dynamic> styles$DeferredChildComponentWithoutNgContentHost = const [];

class _ViewDeferredChildComponentWithoutNgContentHost0 extends import9.HostView<import1.DeferredChildComponentWithoutNgContent> {
  @override
  void build() {
    this.componentView = ViewDeferredChildComponentWithoutNgContent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChildComponentWithoutNgContent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChildComponentWithoutNgContent> viewFactory_DeferredChildComponentWithoutNgContentHost0() {
  return _ViewDeferredChildComponentWithoutNgContentHost0();
}

final List<dynamic> styles$DeferredChildComponentWithNgContent = const [];

class ViewDeferredChildComponentWithNgContent0 extends import0.ComponentView<import1.DeferredChildComponentWithNgContent> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithNgContent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-with-ng-content');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    this.project(_el_0, 0);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithNgContent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChildComponentWithNgContentNgFactory = ComponentFactory<import1.DeferredChildComponentWithNgContent>('deferred-child-with-ng-content', viewFactory_DeferredChildComponentWithNgContentHost0);
ComponentFactory<import1.DeferredChildComponentWithNgContent> get DeferredChildComponentWithNgContentNgFactory {
  return _DeferredChildComponentWithNgContentNgFactory;
}

ComponentFactory<import1.DeferredChildComponentWithNgContent> createDeferredChildComponentWithNgContentFactory() {
  return ComponentFactory('deferred-child-with-ng-content', viewFactory_DeferredChildComponentWithNgContentHost0);
}

final List<dynamic> styles$DeferredChildComponentWithNgContentHost = const [];

class _ViewDeferredChildComponentWithNgContentHost0 extends import9.HostView<import1.DeferredChildComponentWithNgContent> {
  @override
  void build() {
    this.componentView = ViewDeferredChildComponentWithNgContent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DeferredChildComponentWithNgContent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.DeferredChildComponentWithNgContent> viewFactory_DeferredChildComponentWithNgContentHost0() {
  return _ViewDeferredChildComponentWithNgContentHost0();
}

final List<dynamic> styles$DeferredChildComponentWithServices = const [];

class ViewDeferredChildComponentWithServices0 extends import0.ComponentView<import1.DeferredChildComponentWithServices> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithServices0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('deferred-child-with-services');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/files/deferred/deferred_component.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithServices, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _DeferredChildComponentWithServicesNgFactory = ComponentFactory<import1.DeferredChildComponentWithServices>('deferred-child-with-services', viewFactory_DeferredChildComponentWithServicesHost0);
ComponentFactory<import1.DeferredChildComponentWithServices> get DeferredChildComponentWithServicesNgFactory {
  return _DeferredChildComponentWithServicesNgFactory;
}

ComponentFactory<import1.DeferredChildComponentWithServices> createDeferredChildComponentWithServicesFactory() {
  return ComponentFactory('deferred-child-with-services', viewFactory_DeferredChildComponentWithServicesHost0);
}

final List<dynamic> styles$DeferredChildComponentWithServicesHost = const [];

class _ViewDeferredChildComponentWithServicesHost0 extends import9.HostView<import1.DeferredChildComponentWithServices> {
  import10.ExternalServiceImmediatelyCreated _ExternalServiceImmediatelyCreated_0_5;
  import10.ExternalServiceLazilyCreatedMaybe __ExternalServiceLazilyCreatedMaybe_0_7;
  import10.ExternalServiceLazilyCreatedMaybe get _ExternalServiceLazilyCreatedMaybe_0_7 {
    if ((this.__ExternalServiceLazilyCreatedMaybe_0_7 == null)) {
      (this.__ExternalServiceLazilyCreatedMaybe_0_7 = import10.ExternalServiceLazilyCreatedMaybe());
    }
    return this.__ExternalServiceLazilyCreatedMaybe_0_7;
  }

  @override
  void build() {
    this.componentView = ViewDeferredChildComponentWithServices0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this._ExternalServiceImmediatelyCreated_0_5 = import10.ExternalServiceImmediatelyCreated();
    this.component = import1.DeferredChildComponentWithServices(this._ExternalServiceImmediatelyCreated_0_5);
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import10.ExternalServiceImmediatelyCreated)) {
        return this._ExternalServiceImmediatelyCreated_0_5;
      }
      if (identical(token, import10.ExternalServiceLazilyCreatedMaybe)) {
        return this._ExternalServiceLazilyCreatedMaybe_0_7;
      }
    }
    return notFoundResult;
  }
}

import9.HostView<import1.DeferredChildComponentWithServices> viewFactory_DeferredChildComponentWithServicesHost0() {
  return _ViewDeferredChildComponentWithServicesHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(DeferredChild1Component, createDeferredChild1ComponentFactory());
  _ngRef.registerComponent(DeferredChild2Component, createDeferredChild2ComponentFactory());
  _ngRef.registerComponent(DeferredChild3Component, createDeferredChild3ComponentFactory());
  _ngRef.registerComponent(DeferredChildOnPush, createDeferredChildOnPushFactory());
  _ngRef.registerComponent(NotDeferredChildComponent, createNotDeferredChildComponentFactory());
  _ngRef.registerComponent(DeferredChildComponentWithoutNgContent, createDeferredChildComponentWithoutNgContentFactory());
  _ngRef.registerComponent(DeferredChildComponentWithNgContent, createDeferredChildComponentWithNgContentFactory());
  _ngRef.registerComponent(DeferredChildComponentWithServices, createDeferredChildComponentWithServicesFactory());
  _ref0.initReflector();
  _ref1.initReflector();
}
