// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'container_component.dart';
export 'container_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:_goldens/component.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'container_component.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'deferred_component.template.dart' as import4;
import 'deferred_component.dart' as import5;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import6;
import 'package:angular/src/core/linker/views/view.dart' as import7;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import9;
import 'package:angular/src/runtime.dart' as import10;
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import13;
import 'package:angular/src/runtime/queries.dart' as import14;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import16;
import 'package:angular/src/core/linker/views/render_view.dart' as import17;
import 'external_service.dart' as import18;
import 'package:angular/src/core/linker/views/host_view.dart' as import19;
import 'deferred_component.dart' deferred as deflib0;
import 'deferred_component.template.dart' deferred as deflib1;

final List<dynamic> styles$TestContainerComponent = const [];

class ViewTestContainerComponent0 extends import0.ComponentView<import1.TestContainerComponent> {
  bool _viewQuery_queryMe_0_isDirty = true;
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  ViewContainer _appEl_2;
  NgIf _NgIf_2_9;
  ViewContainer _appEl_3;
  void Function() _cancelDeferredLoad3;
  ViewContainer _appEl_4;
  void Function() _cancelDeferredLoad4;
  ViewContainer _appEl_5;
  void Function() _cancelDeferredLoad5;
  import4.ViewNotDeferredChildComponent0 _compView_6;
  import5.NotDeferredChildComponent _NotDeferredChildComponent_6_5;
  ViewContainer _appEl_7;
  void Function() _cancelDeferredLoad7;
  static import6.ComponentStyles _componentStyles;
  ViewTestContainerComponent0(import7.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import9.document.createElement('test-container');
  }
  static String get _debugComponentUrl {
    return (import10.isDevMode ? 'asset:_goldens/test/files/deferred/container_component.dart' : null);
  }

  @override
  void build() {
    final import9.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import11.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_TestContainerComponent1);
    this._cancelDeferredLoad0 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import11.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_TestContainerComponent2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    final _anchor_2 = import11.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(this._appEl_2, viewFactory_TestContainerComponent4);
    this._NgIf_2_9 = NgIf(this._appEl_2, _TemplateRef_2_8);
    final _anchor_3 = import11.appendAnchor(parentRenderNode);
    this._appEl_3 = ViewContainer(3, null, this, _anchor_3);
    TemplateRef _TemplateRef_3_8 = TemplateRef(this._appEl_3, viewFactory_TestContainerComponent6);
    this._cancelDeferredLoad3 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_3, _TemplateRef_3_8);
    final _anchor_4 = import11.appendAnchor(parentRenderNode);
    this._appEl_4 = ViewContainer(4, null, this, _anchor_4);
    TemplateRef _TemplateRef_4_8 = TemplateRef(this._appEl_4, viewFactory_TestContainerComponent7);
    this._cancelDeferredLoad4 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_4, _TemplateRef_4_8);
    final _anchor_5 = import11.appendAnchor(parentRenderNode);
    this._appEl_5 = ViewContainer(5, null, this, _anchor_5);
    TemplateRef _TemplateRef_5_8 = TemplateRef(this._appEl_5, viewFactory_TestContainerComponent8);
    this._cancelDeferredLoad5 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_5, _TemplateRef_5_8);
    this._compView_6 = deflib1.ViewNotDeferredChildComponent0(this, 6);
    final _el_6 = this._compView_6.rootElement;
    parentRenderNode.append(_el_6);
    this._NotDeferredChildComponent_6_5 = deflib0.NotDeferredChildComponent();
    this._compView_6.create(this._NotDeferredChildComponent_6_5);
    final _anchor_7 = import11.appendAnchor(parentRenderNode);
    this._appEl_7 = ViewContainer(7, null, this, _anchor_7);
    TemplateRef _TemplateRef_7_8 = TemplateRef(this._appEl_7, viewFactory_TestContainerComponent9);
    this._cancelDeferredLoad7 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_7, _TemplateRef_7_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.showDeferredChild;
    this._NgIf_2_9.ngIf = _ctx.showDeferredChild;
    this._appEl_0.detectChangesInNestedViews();
    this._appEl_1.detectChangesInNestedViews();
    this._appEl_2.detectChangesInNestedViews();
    this._appEl_3.detectChangesInNestedViews();
    this._appEl_4.detectChangesInNestedViews();
    this._appEl_5.detectChangesInNestedViews();
    this._appEl_7.detectChangesInNestedViews();
    if ((!import10.debugThrowIfChanged)) {
      if (this._viewQuery_queryMe_0_isDirty) {
        _ctx.queryDeferredChild = import14.firstOrNull(this._appEl_2.mapNestedViews((_ViewTestContainerComponent4 nestedView) {
          return nestedView._appEl_1.mapNestedViewsWithSingleResult((_ViewTestContainerComponent5 nestedView) {
            return nestedView._DeferredChild3Component_0_5;
          });
        }));
        this._viewQuery_queryMe_0_isDirty = false;
      }
    }
    this._compView_6.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._appEl_1.destroyNestedViews();
    this._appEl_2.destroyNestedViews();
    this._appEl_3.destroyNestedViews();
    this._appEl_4.destroyNestedViews();
    this._appEl_5.destroyNestedViews();
    this._appEl_7.destroyNestedViews();
    this._compView_6.destroyInternalState();
    this._cancelDeferredLoad0();
    this._cancelDeferredLoad3();
    this._cancelDeferredLoad4();
    this._cancelDeferredLoad5();
    this._cancelDeferredLoad7();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import6.ComponentStyles.unscoped(styles$TestContainerComponent, _debugComponentUrl));
      if (import10.isDevMode) {
        import6.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _TestContainerComponentNgFactory = ComponentFactory<import1.TestContainerComponent>('test-container', viewFactory_TestContainerComponentHost0);
ComponentFactory<import1.TestContainerComponent> get TestContainerComponentNgFactory {
  return _TestContainerComponentNgFactory;
}

ComponentFactory<import1.TestContainerComponent> createTestContainerComponentFactory() {
  return ComponentFactory('test-container', viewFactory_TestContainerComponentHost0);
}

class _ViewTestContainerComponent1 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChild1Component_0_5;
  _ViewTestContainerComponent1(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChild1Component0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChild1Component_0_5 = deflib0.DeferredChild1Component();
    this._compView_0.create(this._DeferredChild1Component_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent1(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent1(parentView, parentIndex);
}

class _ViewTestContainerComponent2 extends import16.EmbeddedView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  _ViewTestContainerComponent2(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final _anchor_0 = import11.createAnchor();
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_TestContainerComponent3);
    this._cancelDeferredLoad0 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_0, _TemplateRef_0_8);
    this.initRootNode(this._appEl_0);
  }

  @override
  void detectChangesInternal() {
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._cancelDeferredLoad0();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent2(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent2(parentView, parentIndex);
}

class _ViewTestContainerComponent3 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChild2Component_0_5;
  _ViewTestContainerComponent3(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChild2Component0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChild2Component_0_5 = deflib0.DeferredChild2Component();
    this._compView_0.create(this._DeferredChild2Component_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent3(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent3(parentView, parentIndex);
}

class _ViewTestContainerComponent4 extends import16.EmbeddedView<import1.TestContainerComponent> {
  ViewContainer _appEl_1;
  void Function() _cancelDeferredLoad1;
  _ViewTestContainerComponent4(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import9.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import11.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_TestContainerComponent5);
    this._cancelDeferredLoad1 = import13.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_1, _TemplateRef_1_8);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
    this._cancelDeferredLoad1();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent4(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent4(parentView, parentIndex);
}

class _ViewTestContainerComponent5 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChild3Component_0_5;
  _ViewTestContainerComponent5(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChild3Component0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChild3Component_0_5 = deflib0.DeferredChild3Component();
    this._compView_0.create(this._DeferredChild3Component_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import10.unsafeCast<ViewTestContainerComponent0>(this.parentView.parentView)._viewQuery_queryMe_0_isDirty = true;
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent5(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent5(parentView, parentIndex);
}

class _ViewTestContainerComponent6 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChildOnPush_0_5;
  _ViewTestContainerComponent6(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChildOnPush0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChildOnPush_0_5 = deflib0.DeferredChildOnPush();
    this._compView_0.create(this._DeferredChildOnPush_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent6(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent6(parentView, parentIndex);
}

class _ViewTestContainerComponent7 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChildComponentWithoutNgContent_0_5;
  _ViewTestContainerComponent7(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChildComponentWithoutNgContent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChildComponentWithoutNgContent_0_5 = deflib0.DeferredChildComponentWithoutNgContent();
    this._compView_0.create(this._DeferredChildComponentWithoutNgContent_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent7(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent7(parentView, parentIndex);
}

class _ViewTestContainerComponent8 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  dynamic _DeferredChildComponentWithNgContent_0_5;
  _ViewTestContainerComponent8(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChildComponentWithNgContent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._DeferredChildComponentWithNgContent_0_5 = deflib0.DeferredChildComponentWithNgContent();
    final _text_1 = import11.createText('Hello World');
    this._compView_0.createAndProject(this._DeferredChildComponentWithNgContent_0_5, [
      [_text_1]
    ]);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent8(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent8(parentView, parentIndex);
}

class _ViewTestContainerComponent9 extends import16.EmbeddedView<import1.TestContainerComponent> {
  import0.ComponentView _compView_0;
  import18.ExternalServiceImmediatelyCreated _ExternalServiceImmediatelyCreated_0_5;
  dynamic _DeferredChildComponentWithServices_0_6;
  import18.ExternalServiceLazilyCreatedMaybe __ExternalServiceLazilyCreatedMaybe_0_7;
  _ViewTestContainerComponent9(import17.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  import18.ExternalServiceLazilyCreatedMaybe get _ExternalServiceLazilyCreatedMaybe_0_7 {
    if ((this.__ExternalServiceLazilyCreatedMaybe_0_7 == null)) {
      (this.__ExternalServiceLazilyCreatedMaybe_0_7 = import18.ExternalServiceLazilyCreatedMaybe());
    }
    return this.__ExternalServiceLazilyCreatedMaybe_0_7;
  }

  @override
  void build() {
    this._compView_0 = deflib1.ViewDeferredChildComponentWithServices0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._ExternalServiceImmediatelyCreated_0_5 = import18.ExternalServiceImmediatelyCreated();
    this._DeferredChildComponentWithServices_0_6 = deflib0.DeferredChildComponentWithServices(this._ExternalServiceImmediatelyCreated_0_5);
    this._compView_0.create(this._DeferredChildComponentWithServices_0_6);
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import18.ExternalServiceImmediatelyCreated)) {
        return this._ExternalServiceImmediatelyCreated_0_5;
      }
      if (identical(token, import18.ExternalServiceLazilyCreatedMaybe)) {
        return this._ExternalServiceLazilyCreatedMaybe_0_7;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import16.EmbeddedView<void> viewFactory_TestContainerComponent9(import17.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent9(parentView, parentIndex);
}

final List<dynamic> styles$TestContainerComponentHost = const [];

class _ViewTestContainerComponentHost0 extends import19.HostView<import1.TestContainerComponent> {
  @override
  void build() {
    this.componentView = ViewTestContainerComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.TestContainerComponent();
    this.initRootNode(_el_0);
  }
}

import19.HostView<import1.TestContainerComponent> viewFactory_TestContainerComponentHost0() {
  return _ViewTestContainerComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestContainerComponent, createTestContainerComponentFactory());
  _ref0.initReflector();
  _ref1.initReflector();
}
