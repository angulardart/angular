// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'core_directives.dart';
export 'core_directives.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'core_directives.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import4;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import5;
import 'package:angular/src/core/linker/views/view.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import8;
import 'package:angular/src/runtime.dart' as import9;
import 'package:angular/src/runtime/dom_helpers.dart' as import10;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import13;
import 'package:angular/src/core/linker/views/render_view.dart' as import14;
import 'package:angular/src/runtime/text_binding.dart' as import15;
import 'dart:core';
import 'package:angular/src/runtime/interpolate.dart' as import17;
import 'package:angular/src/core/linker/views/host_view.dart' as import18;

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends import0.ComponentView<import1.TestFooComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  ViewContainer _appEl_1;
  import4.NgFor _NgFor_1_9;
  static import5.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import6.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import8.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/files/core_directives.dart' : null);
  }

  @override
  void build() {
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import10.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_TestFooComponent1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import10.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_TestFooComponent2);
    this._NgFor_1_9 = import4.NgFor(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      this._NgIf_0_9.ngIf = _ctx.foo;
      if (!identical(_ctx.bars, null)) {
        (this._NgFor_1_9.ngForOf = _ctx.bars);
      }
    }
    if ((!import9.debugThrowIfChanged)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._appEl_1.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import5.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl));
      if (import9.isDevMode) {
        import5.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _TestFooComponentNgFactory = ComponentFactory<import1.TestFooComponent>('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

ComponentFactory<import1.TestFooComponent> createTestFooComponentFactory() {
  return ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
}

class _ViewTestFooComponent1 extends import13.EmbeddedView<import1.TestFooComponent> {
  _ViewTestFooComponent1(import14.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import10.appendText(_el_0, 'Foo');
    this.initRootNode(_el_0);
  }
}

import13.EmbeddedView<void> viewFactory_TestFooComponent1(import14.RenderView parentView, int parentIndex) {
  return _ViewTestFooComponent1(parentView, parentIndex);
}

class _ViewTestFooComponent2 extends import13.EmbeddedView<import1.TestFooComponent> {
  final import15.TextBinding _textBinding_2 = import15.TextBinding();
  final import15.TextBinding _textBinding_4 = import15.TextBinding();
  final import15.TextBinding _textBinding_6 = import15.TextBinding();
  _ViewTestFooComponent2(import14.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('div');
    final _el_1 = import10.appendSpan(doc, _el_0);
    _el_1.append(this._textBinding_2.element);
    final _text_3 = import10.appendText(_el_1, '. #');
    _el_1.append(this._textBinding_4.element);
    final _text_5 = import10.appendText(_el_1, ' odd?');
    _el_1.append(this._textBinding_6.element);
    _el_1.addEventListener('click', this.eventHandler1(this._handleEvent_0));
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_bar = import9.unsafeCast<String>(this.locals['\$implicit']);
    final local_index = import9.unsafeCast<int>(this.locals['index']);
    final local_odd = import9.unsafeCast<bool>(this.locals['odd']);
    this._textBinding_2.updateText(import17.interpolateString0(local_bar));
    this._textBinding_4.updateTextWithPrimitive(local_index);
    this._textBinding_6.updateTextWithPrimitive(local_odd);
  }

  void _handleEvent_0($event) {
    final local_bar = import9.unsafeCast<String>(this.locals['\$implicit']);
    final _ctx = this.ctx;
    _ctx.onClick(local_bar);
  }
}

import13.EmbeddedView<void> viewFactory_TestFooComponent2(import14.RenderView parentView, int parentIndex) {
  return _ViewTestFooComponent2(parentView, parentIndex);
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends import18.HostView<import1.TestFooComponent> {
  @override
  void build() {
    this.componentView = ViewTestFooComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.TestFooComponent();
    this.initRootNode(_el_0);
  }
}

import18.HostView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, createTestFooComponentFactory());
  _ref0.initReflector();
}
