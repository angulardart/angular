// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'change_detection.dart' as import0;
import 'dart:html' as import1;
import 'package:angular/src/core/linker/view_type.dart' as import2;
import 'package:angular/src/core/linker/app_view_utils.dart' as import3;
import 'package:angular/src/runtime.dart' as import4;

final List<dynamic> styles$CheckOnceComponent = const [];

class ViewCheckOnceComponent0 extends AppView<import0.CheckOnceComponent> {
  import1.DivElement _el_0;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewCheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('CheckOnce');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$CheckOnceComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.CheckOnceComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('CheckOnce');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }

  void detectHostChanges(bool firstCheck) {
    final currVal_0 = ctx.id;
    if (import3.checkBinding(_expr_0, currVal_0)) {
      setProp(rootEl, 'id', currVal_0);
      _expr_0 = currVal_0;
    }
  }
}

AppView<import0.CheckOnceComponent> viewFactory_CheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckOnceComponent0(parentView, parentIndex);
}

final List<dynamic> styles$CheckOnceComponentHost = const [];

class _ViewCheckOnceComponentHost0 extends AppView<import0.CheckOnceComponent> {
  ViewCheckOnceComponent0 _compView_0;
  import0.CheckOnceComponent _CheckOnceComponent_0_5;
  _ViewCheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.CheckOnceComponent> build() {
    _compView_0 = ViewCheckOnceComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckOnceComponent_0_5 = import0.CheckOnceComponent();
    _compView_0.create(_CheckOnceComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckOnceComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.CheckOnceComponent> viewFactory_CheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckOnceComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.CheckOnceComponent> _CheckOnceComponentNgFactory = const ComponentFactory('CheckOnce', viewFactory_CheckOnceComponentHost0);
ComponentFactory<import0.CheckOnceComponent> get CheckOnceComponentNgFactory {
  return _CheckOnceComponentNgFactory;
}

final List<dynamic> styles$CheckedComponent = const [];

class ViewCheckedComponent0 extends AppView<import0.CheckedComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('Checked');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$CheckedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.CheckedComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Checked');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.CheckedComponent> viewFactory_CheckedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckedComponent0(parentView, parentIndex);
}

final List<dynamic> styles$CheckedComponentHost = const [];

class _ViewCheckedComponentHost0 extends AppView<import0.CheckedComponent> {
  ViewCheckedComponent0 _compView_0;
  import0.CheckedComponent _CheckedComponent_0_5;
  _ViewCheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.CheckedComponent> build() {
    _compView_0 = ViewCheckedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckedComponent_0_5 = import0.CheckedComponent();
    _compView_0.create(_CheckedComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.CheckedComponent> viewFactory_CheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckedComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.CheckedComponent> _CheckedComponentNgFactory = const ComponentFactory('Checked', viewFactory_CheckedComponentHost0);
ComponentFactory<import0.CheckedComponent> get CheckedComponentNgFactory {
  return _CheckedComponentNgFactory;
}

final List<dynamic> styles$CheckAlwaysComponent = const [];

class ViewCheckAlwaysComponent0 extends AppView<import0.CheckAlwaysComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('CheckAlways');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$CheckAlwaysComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.CheckAlwaysComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('CheckAlways');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.CheckAlwaysComponent> viewFactory_CheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckAlwaysComponent0(parentView, parentIndex);
}

final List<dynamic> styles$CheckAlwaysComponentHost = const [];

class _ViewCheckAlwaysComponentHost0 extends AppView<import0.CheckAlwaysComponent> {
  ViewCheckAlwaysComponent0 _compView_0;
  import0.CheckAlwaysComponent _CheckAlwaysComponent_0_5;
  _ViewCheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.CheckAlwaysComponent> build() {
    _compView_0 = ViewCheckAlwaysComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckAlwaysComponent_0_5 = import0.CheckAlwaysComponent();
    _compView_0.create(_CheckAlwaysComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckAlwaysComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.CheckAlwaysComponent> viewFactory_CheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckAlwaysComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.CheckAlwaysComponent> _CheckAlwaysComponentNgFactory = const ComponentFactory('CheckAlways', viewFactory_CheckAlwaysComponentHost0);
ComponentFactory<import0.CheckAlwaysComponent> get CheckAlwaysComponentNgFactory {
  return _CheckAlwaysComponentNgFactory;
}

final List<dynamic> styles$DetachedComponent = const [];

class ViewDetachedComponent0 extends AppView<import0.DetachedComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDetachedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('Detached');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$DetachedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.DetachedComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Detached');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.DetachedComponent> viewFactory_DetachedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewDetachedComponent0(parentView, parentIndex);
}

final List<dynamic> styles$DetachedComponentHost = const [];

class _ViewDetachedComponentHost0 extends AppView<import0.DetachedComponent> {
  ViewDetachedComponent0 _compView_0;
  import0.DetachedComponent _DetachedComponent_0_5;
  _ViewDetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.DetachedComponent> build() {
    _compView_0 = ViewDetachedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DetachedComponent_0_5 = import0.DetachedComponent();
    _compView_0.create(_DetachedComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DetachedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.DetachedComponent> viewFactory_DetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDetachedComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.DetachedComponent> _DetachedComponentNgFactory = const ComponentFactory('Detached', viewFactory_DetachedComponentHost0);
ComponentFactory<import0.DetachedComponent> get DetachedComponentNgFactory {
  return _DetachedComponentNgFactory;
}

final List<dynamic> styles$OnPushComponent = const [];

class ViewOnPushComponent0 extends AppView<import0.OnPushComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewOnPushComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('OnPush');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$OnPushComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.OnPushComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('OnPush');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.OnPushComponent> viewFactory_OnPushComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewOnPushComponent0(parentView, parentIndex);
}

final List<dynamic> styles$OnPushComponentHost = const [];

class _ViewOnPushComponentHost0 extends AppView<import0.OnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import0.OnPushComponent _OnPushComponent_0_5;
  _ViewOnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.OnPushComponent> build() {
    _compView_0 = ViewOnPushComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _OnPushComponent_0_5 = import0.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _OnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.OnPushComponent> viewFactory_OnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewOnPushComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.OnPushComponent> _OnPushComponentNgFactory = const ComponentFactory('OnPush', viewFactory_OnPushComponentHost0);
ComponentFactory<import0.OnPushComponent> get OnPushComponentNgFactory {
  return _OnPushComponentNgFactory;
}

final List<dynamic> styles$StatefulComponent = const [];

class ViewStatefulComponent0 extends AppView<import0.StatefulComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewStatefulComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import1.document.createElement('Stateful');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$StatefulComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.StatefulComponent> build() {
    final import0.StatefulComponent _ctx = ctx;
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Stateful');
    _el_0.append(_text_1);
    init(const [], null);
    _ctx.stateChangeCallback = markStateChanged;
    return null;
  }
}

AppView<import0.StatefulComponent> viewFactory_StatefulComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewStatefulComponent0(parentView, parentIndex);
}

final List<dynamic> styles$StatefulComponentHost = const [];

class _ViewStatefulComponentHost0 extends AppView<import0.StatefulComponent> {
  ViewStatefulComponent0 _compView_0;
  import0.StatefulComponent _StatefulComponent_0_5;
  _ViewStatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.StatefulComponent> build() {
    _compView_0 = ViewStatefulComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _StatefulComponent_0_5 = import0.StatefulComponent();
    _compView_0.create(_StatefulComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _StatefulComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.StatefulComponent> viewFactory_StatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewStatefulComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.StatefulComponent> _StatefulComponentNgFactory = const ComponentFactory('Stateful', viewFactory_StatefulComponentHost0);
ComponentFactory<import0.StatefulComponent> get StatefulComponentNgFactory {
  return _StatefulComponentNgFactory;
}

final List<dynamic> styles$DefaultComponent = const [];

class ViewDefaultComponent0 extends AppView<import0.DefaultComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDefaultComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import1.document.createElement('Default');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null), ViewEncapsulation.None, styles$DefaultComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.DefaultComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Default');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.DefaultComponent> viewFactory_DefaultComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewDefaultComponent0(parentView, parentIndex);
}

final List<dynamic> styles$DefaultComponentHost = const [];

class _ViewDefaultComponentHost0 extends AppView<import0.DefaultComponent> {
  ViewDefaultComponent0 _compView_0;
  import0.DefaultComponent _DefaultComponent_0_5;
  _ViewDefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.DefaultComponent> build() {
    _compView_0 = ViewDefaultComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DefaultComponent_0_5 = import0.DefaultComponent();
    _compView_0.create(_DefaultComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DefaultComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.DefaultComponent> viewFactory_DefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDefaultComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.DefaultComponent> _DefaultComponentNgFactory = const ComponentFactory('Default', viewFactory_DefaultComponentHost0);
ComponentFactory<import0.DefaultComponent> get DefaultComponentNgFactory {
  return _DefaultComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(CheckOnceComponent, CheckOnceComponentNgFactory);
  _ngRef.registerComponent(CheckedComponent, CheckedComponentNgFactory);
  _ngRef.registerComponent(CheckAlwaysComponent, CheckAlwaysComponentNgFactory);
  _ngRef.registerComponent(DetachedComponent, DetachedComponentNgFactory);
  _ngRef.registerComponent(OnPushComponent, OnPushComponentNgFactory);
  _ngRef.registerComponent(StatefulComponent, StatefulComponentNgFactory);
  _ngRef.registerComponent(DefaultComponent, DefaultComponentNgFactory);
  _ref0.initReflector();
}
