// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'change_detection.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;
import 'package:angular/src/runtime/text_binding.dart' as import10;
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/runtime/interpolate.dart' as import12;
import 'package:angular/src/core/change_detection/component_state.dart' as import13;

final List<dynamic> styles$UsesOnPushComponent = const [];

// View for component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesOnPushComponent0 extends AppView<import1.UsesOnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesOnPushComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-cd-on-push');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.UsesOnPushComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    // Child component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _OnPushComponent_0_5 = import1.OnPushComponent();
    _compView_0.create0(_OnPushComponent_0_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _OnPushComponent_0_5.name = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesOnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesOnPushComponent> _UsesOnPushComponentNgFactory = const ComponentFactory('uses-cd-on-push', viewFactory_UsesOnPushComponentHost0);
ComponentFactory<import1.UsesOnPushComponent> get UsesOnPushComponentNgFactory {
  return _UsesOnPushComponentNgFactory;
}

final List<dynamic> styles$UsesOnPushComponentHost = const [];

// Host for component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesOnPushComponentHost0 extends AppView<import1.UsesOnPushComponent> {
  ViewUsesOnPushComponent0 _compView_0;
  import1.UsesOnPushComponent _UsesOnPushComponent_0_5;
  _ViewUsesOnPushComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.UsesOnPushComponent> build() {
    // Child component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    _compView_0 = ViewUsesOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesOnPushComponent_0_5 = import1.UsesOnPushComponent();
    _compView_0.create(_UsesOnPushComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _UsesOnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesOnPushComponent> viewFactory_UsesOnPushComponentHost0() {
  return _ViewUsesOnPushComponentHost0(null, null);
}

final List<dynamic> styles$OnPushComponent = const [];

// View for component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewOnPushComponent0 extends AppView<import1.OnPushComponent> {
  ViewOnPushChildComponent0 _compView_0;
  import1.OnPushChildComponent _OnPushChildComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewOnPushComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    initComponentStyles();
    rootEl = import6.document.createElement('cd-on-push');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.OnPushComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    // Child component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewOnPushChildComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _OnPushChildComponent_0_5 = import1.OnPushChildComponent();
    _compView_0.create0(_OnPushChildComponent_0_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _OnPushChildComponent_0_5.name = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushComponent> _OnPushComponentNgFactory = const ComponentFactory('cd-on-push', viewFactory_OnPushComponentHost0);
ComponentFactory<import1.OnPushComponent> get OnPushComponentNgFactory {
  return _OnPushComponentNgFactory;
}

final List<dynamic> styles$OnPushComponentHost = const [];

// Host for component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewOnPushComponentHost0 extends AppView<import1.OnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_5;
  _ViewOnPushComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.OnPushComponent> build() {
    // Child component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _OnPushComponent_0_5 = import1.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _OnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.OnPushComponent> viewFactory_OnPushComponentHost0() {
  return _ViewOnPushComponentHost0(null, null);
}

final List<dynamic> styles$OnPushChildComponent = const [];

// View for component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewOnPushChildComponent0 extends AppView<import1.OnPushChildComponent> {
  final import10.TextBinding _textBinding_2 = import10.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewOnPushChildComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    initComponentStyles();
    rootEl = import6.document.createElement('cd-on-push-child');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.OnPushChildComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'OnPushChild: ');
    _el_0.append(_textBinding_2.element);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _textBinding_2.updateText(import12.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushChildComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushChildComponent> _OnPushChildComponentNgFactory = const ComponentFactory('cd-on-push-child', viewFactory_OnPushChildComponentHost0);
ComponentFactory<import1.OnPushChildComponent> get OnPushChildComponentNgFactory {
  return _OnPushChildComponentNgFactory;
}

final List<dynamic> styles$OnPushChildComponentHost = const [];

// Host for component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewOnPushChildComponentHost0 extends AppView<import1.OnPushChildComponent> {
  ViewOnPushChildComponent0 _compView_0;
  import1.OnPushChildComponent _OnPushChildComponent_0_5;
  _ViewOnPushChildComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.OnPushChildComponent> build() {
    // Child component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewOnPushChildComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _OnPushChildComponent_0_5 = import1.OnPushChildComponent();
    _compView_0.create(_OnPushChildComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _OnPushChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.OnPushChildComponent> viewFactory_OnPushChildComponentHost0() {
  return _ViewOnPushChildComponentHost0(null, null);
}

final List<dynamic> styles$StatefulComponent = const [];

// View for component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Stateful)
class ViewStatefulComponent0 extends AppView<import1.StatefulComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewStatefulComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    initComponentStyles();
    rootEl = import6.document.createElement('Stateful');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.StatefulComponent> build() {
    final _ctx = ctx;
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'Stateful');
    init0();
    import13.internalSetStateChanged(_ctx, markForCheck);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$StatefulComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.StatefulComponent> _StatefulComponentNgFactory = const ComponentFactory('Stateful', viewFactory_StatefulComponentHost0);
ComponentFactory<import1.StatefulComponent> get StatefulComponentNgFactory {
  return _StatefulComponentNgFactory;
}

final List<dynamic> styles$StatefulComponentHost = const [];

// Host for component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewStatefulComponentHost0 extends AppView<import1.StatefulComponent> {
  ViewStatefulComponent0 _compView_0;
  import1.StatefulComponent _StatefulComponent_0_5;
  _ViewStatefulComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.StatefulComponent> build() {
    // Child component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Stateful)
    _compView_0 = ViewStatefulComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _StatefulComponent_0_5 = import1.StatefulComponent();
    _compView_0.create(_StatefulComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _StatefulComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.StatefulComponent> viewFactory_StatefulComponentHost0() {
  return _ViewStatefulComponentHost0(null, null);
}

final List<dynamic> styles$DefaultComponent = const [];

// View for component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewDefaultComponent0 extends AppView<import1.DefaultComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewDefaultComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('Default');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.DefaultComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'Default');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DefaultComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DefaultComponent> _DefaultComponentNgFactory = const ComponentFactory('Default', viewFactory_DefaultComponentHost0);
ComponentFactory<import1.DefaultComponent> get DefaultComponentNgFactory {
  return _DefaultComponentNgFactory;
}

final List<dynamic> styles$DefaultComponentHost = const [];

// Host for component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewDefaultComponentHost0 extends AppView<import1.DefaultComponent> {
  ViewDefaultComponent0 _compView_0;
  import1.DefaultComponent _DefaultComponent_0_5;
  _ViewDefaultComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DefaultComponent> build() {
    // Child component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    _compView_0 = ViewDefaultComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DefaultComponent_0_5 = import1.DefaultComponent();
    _compView_0.create(_DefaultComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _DefaultComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DefaultComponent> viewFactory_DefaultComponentHost0() {
  return _ViewDefaultComponentHost0(null, null);
}

final List<dynamic> styles$UsesNgModelLike = const [];

// View for component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesNgModelLike0 extends AppView<import1.UsesNgModelLike> {
  import1.NgModelLike _NgModelLike_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesNgModelLike0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-ng-model');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.UsesNgModelLike> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'input');
    _NgModelLike_0_5 = import1.NgModelLike();
    final subscription_0 = _NgModelLike_0_5.modelChange.listen(eventHandler1(_handle_ngModelChange_0_0));
    init(const [], [subscription_0]);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    bool firstCheck = (this.cdState == 0);
    changed = false;
    final currVal_0 = _ctx.value;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _NgModelLike_0_5.model = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _NgModelLike_0_5.ngAfterChanges();
    }
    if (((!import9.AppViewUtils.throwOnChanges) && firstCheck)) {
      _NgModelLike_0_5.ngOnInit();
    }
  }

  void _handle_ngModelChange_0_0($event) {
    final _ctx = ctx;
    _ctx.value = $event;
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesNgModelLike, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesNgModelLike> _UsesNgModelLikeNgFactory = const ComponentFactory('uses-ng-model', viewFactory_UsesNgModelLikeHost0);
ComponentFactory<import1.UsesNgModelLike> get UsesNgModelLikeNgFactory {
  return _UsesNgModelLikeNgFactory;
}

final List<dynamic> styles$UsesNgModelLikeHost = const [];

// Host for component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesNgModelLikeHost0 extends AppView<import1.UsesNgModelLike> {
  ViewUsesNgModelLike0 _compView_0;
  import1.UsesNgModelLike _UsesNgModelLike_0_5;
  _ViewUsesNgModelLikeHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.UsesNgModelLike> build() {
    // Child component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    _compView_0 = ViewUsesNgModelLike0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesNgModelLike_0_5 = import1.UsesNgModelLike();
    _compView_0.create(_UsesNgModelLike_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _UsesNgModelLike_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesNgModelLike> viewFactory_UsesNgModelLikeHost0() {
  return _ViewUsesNgModelLikeHost0(null, null);
}

final List<dynamic> styles$UsesDoCheckOnPushComponent = const [];

// View for component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesDoCheckOnPushComponent0 extends AppView<import1.UsesDoCheckOnPushComponent> {
  ViewDoCheckOnPushComponent0 _compView_0;
  import1.DoCheckOnPushComponent _DoCheckOnPushComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDoCheckOnPushComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-do-check-on-push');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.UsesDoCheckOnPushComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    // Child component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewDoCheckOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _DoCheckOnPushComponent_0_5 = import1.DoCheckOnPushComponent();
    _compView_0.create0(_DoCheckOnPushComponent_0_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _DoCheckOnPushComponent_0_5.name = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    if ((!import9.AppViewUtils.throwOnChanges)) {
      _DoCheckOnPushComponent_0_5.ngDoCheck();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDoCheckOnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDoCheckOnPushComponent> _UsesDoCheckOnPushComponentNgFactory = const ComponentFactory('uses-do-check-on-push', viewFactory_UsesDoCheckOnPushComponentHost0);
ComponentFactory<import1.UsesDoCheckOnPushComponent> get UsesDoCheckOnPushComponentNgFactory {
  return _UsesDoCheckOnPushComponentNgFactory;
}

final List<dynamic> styles$UsesDoCheckOnPushComponentHost = const [];

// Host for component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesDoCheckOnPushComponentHost0 extends AppView<import1.UsesDoCheckOnPushComponent> {
  ViewUsesDoCheckOnPushComponent0 _compView_0;
  import1.UsesDoCheckOnPushComponent _UsesDoCheckOnPushComponent_0_5;
  _ViewUsesDoCheckOnPushComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.UsesDoCheckOnPushComponent> build() {
    // Child component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    _compView_0 = ViewUsesDoCheckOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesDoCheckOnPushComponent_0_5 = import1.UsesDoCheckOnPushComponent();
    _compView_0.create(_UsesDoCheckOnPushComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _UsesDoCheckOnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesDoCheckOnPushComponent> viewFactory_UsesDoCheckOnPushComponentHost0() {
  return _ViewUsesDoCheckOnPushComponentHost0(null, null);
}

final List<dynamic> styles$DoCheckOnPushComponent = const [];

// View for component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewDoCheckOnPushComponent0 extends AppView<import1.DoCheckOnPushComponent> {
  final import10.TextBinding _textBinding_1 = import10.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewDoCheckOnPushComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    initComponentStyles();
    rootEl = import6.document.createElement('cd-on-push-do-check');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.DoCheckOnPushComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final _text_0 = import11.appendText(parentRenderNode, 'Name: ');
    parentRenderNode.append(_textBinding_1.element);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _textBinding_1.updateText(import12.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DoCheckOnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DoCheckOnPushComponent> _DoCheckOnPushComponentNgFactory = const ComponentFactory('cd-on-push-do-check', viewFactory_DoCheckOnPushComponentHost0);
ComponentFactory<import1.DoCheckOnPushComponent> get DoCheckOnPushComponentNgFactory {
  return _DoCheckOnPushComponentNgFactory;
}

final List<dynamic> styles$DoCheckOnPushComponentHost = const [];

// Host for component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewDoCheckOnPushComponentHost0 extends AppView<import1.DoCheckOnPushComponent> {
  ViewDoCheckOnPushComponent0 _compView_0;
  import1.DoCheckOnPushComponent _DoCheckOnPushComponent_0_5;
  _ViewDoCheckOnPushComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DoCheckOnPushComponent> build() {
    // Child component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    _compView_0 = ViewDoCheckOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DoCheckOnPushComponent_0_5 = import1.DoCheckOnPushComponent();
    _compView_0.create(_DoCheckOnPushComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _DoCheckOnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    if ((!import9.AppViewUtils.throwOnChanges)) {
      _DoCheckOnPushComponent_0_5.ngDoCheck();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DoCheckOnPushComponent> viewFactory_DoCheckOnPushComponentHost0() {
  return _ViewDoCheckOnPushComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesOnPushComponent, UsesOnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushComponent, OnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushChildComponent, OnPushChildComponentNgFactory);
  _ngRef.registerComponent(StatefulComponent, StatefulComponentNgFactory);
  _ngRef.registerComponent(DefaultComponent, DefaultComponentNgFactory);
  _ngRef.registerComponent(UsesNgModelLike, UsesNgModelLikeNgFactory);
  _ngRef.registerComponent(UsesDoCheckOnPushComponent, UsesDoCheckOnPushComponentNgFactory);
  _ngRef.registerComponent(DoCheckOnPushComponent, DoCheckOnPushComponentNgFactory);
  _ref0.initReflector();
}
