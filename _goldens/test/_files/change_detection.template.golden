// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'change_detection.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import8;
import 'package:angular/src/di/injector/injector.dart' as import9;
import 'package:angular/src/runtime/text_binding.dart' as import10;
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/runtime/interpolate.dart' as import12;
import 'package:angular/src/core/change_detection/component_state.dart' as import13;

final List<dynamic> styles$UsesOnPushComponent = const [];

// View for component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesOnPushComponent0 extends import0.ComponentView<import1.UsesOnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesOnPushComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-cd-on-push');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this._compView_0 = ViewOnPushComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._OnPushComponent_0_5 = import1.OnPushComponent();
    this._compView_0.create(this._OnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      this._OnPushComponent_0_5.name = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) {
      this._compView_0.markAsCheckOnce();
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesOnPushComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesOnPushComponent> _UsesOnPushComponentNgFactory = const ComponentFactory('uses-cd-on-push', viewFactory_UsesOnPushComponentHost0);
ComponentFactory<import1.UsesOnPushComponent> get UsesOnPushComponentNgFactory {
  return _UsesOnPushComponentNgFactory;
}

final List<dynamic> styles$UsesOnPushComponentHost = const [];

// Host for component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesOnPushComponentHost0 extends import8.HostView<import1.UsesOnPushComponent> {
  _ViewUsesOnPushComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    this.componentView = ViewUsesOnPushComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesOnPushComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.UsesOnPushComponent> viewFactory_UsesOnPushComponentHost0(import9.Injector injector) {
  return _ViewUsesOnPushComponentHost0(injector);
}

final List<dynamic> styles$OnPushComponent = const [];

// View for component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewOnPushComponent0 extends import0.ComponentView<import1.OnPushComponent> {
  ViewOnPushChildComponent0 _compView_0;
  import1.OnPushChildComponent _OnPushChildComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewOnPushComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('cd-on-push');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this._compView_0 = ViewOnPushChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._OnPushChildComponent_0_5 = import1.OnPushChildComponent();
    this._compView_0.create(this._OnPushChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      this._OnPushChildComponent_0_5.name = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) {
      this._compView_0.markAsCheckOnce();
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushComponent> _OnPushComponentNgFactory = const ComponentFactory('cd-on-push', viewFactory_OnPushComponentHost0);
ComponentFactory<import1.OnPushComponent> get OnPushComponentNgFactory {
  return _OnPushComponentNgFactory;
}

final List<dynamic> styles$OnPushComponentHost = const [];

// Host for component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewOnPushComponentHost0 extends import8.HostView<import1.OnPushComponent> {
  _ViewOnPushComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component OnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this.componentView = ViewOnPushComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.OnPushComponent();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      this.componentView.markAsCheckOnce();
    }
    this.componentView.detectChanges();
  }
}

import8.HostView<import1.OnPushComponent> viewFactory_OnPushComponentHost0(import9.Injector injector) {
  return _ViewOnPushComponentHost0(injector);
}

final List<dynamic> styles$OnPushChildComponent = const [];

// View for component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewOnPushChildComponent0 extends import0.ComponentView<import1.OnPushChildComponent> {
  final import10.TextBinding _textBinding_2 = import10.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewOnPushChildComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('cd-on-push-child');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'OnPushChild: ');
    _el_0.append(this._textBinding_2.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_2.updateText(import12.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushChildComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushChildComponent> _OnPushChildComponentNgFactory = const ComponentFactory('cd-on-push-child', viewFactory_OnPushChildComponentHost0);
ComponentFactory<import1.OnPushChildComponent> get OnPushChildComponentNgFactory {
  return _OnPushChildComponentNgFactory;
}

final List<dynamic> styles$OnPushChildComponentHost = const [];

// Host for component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewOnPushChildComponentHost0 extends import8.HostView<import1.OnPushChildComponent> {
  _ViewOnPushChildComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component OnPushChildComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this.componentView = ViewOnPushChildComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.OnPushChildComponent();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      this.componentView.markAsCheckOnce();
    }
    this.componentView.detectChanges();
  }
}

import8.HostView<import1.OnPushChildComponent> viewFactory_OnPushChildComponentHost0(import9.Injector injector) {
  return _ViewOnPushChildComponentHost0(injector);
}

final List<dynamic> styles$StatefulComponent = const [];

// View for component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Stateful)
class ViewStatefulComponent0 extends import0.ComponentView<import1.StatefulComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewStatefulComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('Stateful');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final _ctx = this.ctx;
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'Stateful');
    import13.internalSetStateChanged(_ctx, this.markForCheck);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$StatefulComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.StatefulComponent> _StatefulComponentNgFactory = const ComponentFactory('Stateful', viewFactory_StatefulComponentHost0);
ComponentFactory<import1.StatefulComponent> get StatefulComponentNgFactory {
  return _StatefulComponentNgFactory;
}

final List<dynamic> styles$StatefulComponentHost = const [];

// Host for component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewStatefulComponentHost0 extends import8.HostView<import1.StatefulComponent> {
  _ViewStatefulComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component StatefulComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Stateful)
    this.componentView = ViewStatefulComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.StatefulComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.StatefulComponent> viewFactory_StatefulComponentHost0(import9.Injector injector) {
  return _ViewStatefulComponentHost0(injector);
}

final List<dynamic> styles$DefaultComponent = const [];

// View for component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewDefaultComponent0 extends import0.ComponentView<import1.DefaultComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewDefaultComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('Default');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'Default');
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DefaultComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DefaultComponent> _DefaultComponentNgFactory = const ComponentFactory('Default', viewFactory_DefaultComponentHost0);
ComponentFactory<import1.DefaultComponent> get DefaultComponentNgFactory {
  return _DefaultComponentNgFactory;
}

final List<dynamic> styles$DefaultComponentHost = const [];

// Host for component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewDefaultComponentHost0 extends import8.HostView<import1.DefaultComponent> {
  _ViewDefaultComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DefaultComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    this.componentView = ViewDefaultComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DefaultComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.DefaultComponent> viewFactory_DefaultComponentHost0(import9.Injector injector) {
  return _ViewDefaultComponentHost0(injector);
}

final List<dynamic> styles$UsesNgModelLike = const [];

// View for component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesNgModelLike0 extends import0.ComponentView<import1.UsesNgModelLike> {
  import1.NgModelLike _NgModelLike_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesNgModelLike0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-ng-model');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'input');
    this._NgModelLike_0_5 = import1.NgModelLike();
    final subscription_0 = this._NgModelLike_0_5.modelChange.listen(this.eventHandler1(this._handle_ngModelChange_0_0));
    this.initSubscriptions([subscription_0]);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    bool firstCheck = this.firstCheck;
    changed = false;
    final currVal_0 = _ctx.value;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      this._NgModelLike_0_5.model = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) {
      this._NgModelLike_0_5.ngAfterChanges();
    }
    if (((!import6.debugThrowIfChanged) && firstCheck)) {
      this._NgModelLike_0_5.ngOnInit();
    }
  }

  void _handle_ngModelChange_0_0($event) {
    final _ctx = this.ctx;
    _ctx.value = $event;
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesNgModelLike, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesNgModelLike> _UsesNgModelLikeNgFactory = const ComponentFactory('uses-ng-model', viewFactory_UsesNgModelLikeHost0);
ComponentFactory<import1.UsesNgModelLike> get UsesNgModelLikeNgFactory {
  return _UsesNgModelLikeNgFactory;
}

final List<dynamic> styles$UsesNgModelLikeHost = const [];

// Host for component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesNgModelLikeHost0 extends import8.HostView<import1.UsesNgModelLike> {
  _ViewUsesNgModelLikeHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesNgModelLike in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    this.componentView = ViewUsesNgModelLike0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesNgModelLike();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.UsesNgModelLike> viewFactory_UsesNgModelLikeHost0(import9.Injector injector) {
  return _ViewUsesNgModelLikeHost0(injector);
}

final List<dynamic> styles$UsesDoCheckOnPushComponent = const [];

// View for component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class ViewUsesDoCheckOnPushComponent0 extends import0.ComponentView<import1.UsesDoCheckOnPushComponent> {
  ViewDoCheckOnPushComponent0 _compView_0;
  import1.DoCheckOnPushComponent _DoCheckOnPushComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDoCheckOnPushComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-do-check-on-push');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this._compView_0 = ViewDoCheckOnPushComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._DoCheckOnPushComponent_0_5 = import1.DoCheckOnPushComponent();
    this._compView_0.create(this._DoCheckOnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      this._DoCheckOnPushComponent_0_5.name = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) {
      this._compView_0.markAsCheckOnce();
    }
    if ((!import6.debugThrowIfChanged)) {
      this._DoCheckOnPushComponent_0_5.ngDoCheck();
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDoCheckOnPushComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDoCheckOnPushComponent> _UsesDoCheckOnPushComponentNgFactory = const ComponentFactory('uses-do-check-on-push', viewFactory_UsesDoCheckOnPushComponentHost0);
ComponentFactory<import1.UsesDoCheckOnPushComponent> get UsesDoCheckOnPushComponentNgFactory {
  return _UsesDoCheckOnPushComponentNgFactory;
}

final List<dynamic> styles$UsesDoCheckOnPushComponentHost = const [];

// Host for component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewUsesDoCheckOnPushComponentHost0 extends import8.HostView<import1.UsesDoCheckOnPushComponent> {
  _ViewUsesDoCheckOnPushComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesDoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
    this.componentView = ViewUsesDoCheckOnPushComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesDoCheckOnPushComponent();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.UsesDoCheckOnPushComponent> viewFactory_UsesDoCheckOnPushComponentHost0(import9.Injector injector) {
  return _ViewUsesDoCheckOnPushComponentHost0(injector);
}

final List<dynamic> styles$DoCheckOnPushComponent = const [];

// View for component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
class ViewDoCheckOnPushComponent0 extends import0.ComponentView<import1.DoCheckOnPushComponent> {
  final import10.TextBinding _textBinding_1 = import10.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewDoCheckOnPushComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('cd-on-push-do-check');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import11.appendText(parentRenderNode, 'Name: ');
    parentRenderNode.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import12.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DoCheckOnPushComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DoCheckOnPushComponent> _DoCheckOnPushComponentNgFactory = const ComponentFactory('cd-on-push-do-check', viewFactory_DoCheckOnPushComponentHost0);
ComponentFactory<import1.DoCheckOnPushComponent> get DoCheckOnPushComponentNgFactory {
  return _DoCheckOnPushComponentNgFactory;
}

final List<dynamic> styles$DoCheckOnPushComponentHost = const [];

// Host for component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: Default)
class _ViewDoCheckOnPushComponentHost0 extends import8.HostView<import1.DoCheckOnPushComponent> {
  _ViewDoCheckOnPushComponentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DoCheckOnPushComponent in asset:_goldens/test/_files/change_detection.dart (changeDetection: OnPush)
    this.componentView = ViewDoCheckOnPushComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DoCheckOnPushComponent();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      this.componentView.markAsCheckOnce();
    }
    if ((!import6.debugThrowIfChanged)) {
      this.component.ngDoCheck();
    }
    this.componentView.detectChanges();
  }
}

import8.HostView<import1.DoCheckOnPushComponent> viewFactory_DoCheckOnPushComponentHost0(import9.Injector injector) {
  return _ViewDoCheckOnPushComponentHost0(injector);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesOnPushComponent, UsesOnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushComponent, OnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushChildComponent, OnPushChildComponentNgFactory);
  _ngRef.registerComponent(StatefulComponent, StatefulComponentNgFactory);
  _ngRef.registerComponent(DefaultComponent, DefaultComponentNgFactory);
  _ngRef.registerComponent(UsesNgModelLike, UsesNgModelLikeNgFactory);
  _ngRef.registerComponent(UsesDoCheckOnPushComponent, UsesDoCheckOnPushComponentNgFactory);
  _ngRef.registerComponent(DoCheckOnPushComponent, DoCheckOnPushComponentNgFactory);
  _ref0.initReflector();
}
