// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'change_detection.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;

final List<dynamic> styles$CheckOnceComponent = const [];

class ViewCheckOnceComponent0 extends AppView<import1.CheckOnceComponent> {
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewCheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('CheckOnce');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.CheckOnceComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'CheckOnce');
    init(const [], null);
  }

  void detectHostChanges(bool firstCheck) {
    final currVal_0 = ctx.id;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import8.setProperty(rootEl, 'id', currVal_0);
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$CheckOnceComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.CheckOnceComponent> viewFactory_CheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckOnceComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.CheckOnceComponent> _CheckOnceComponentNgFactory = const ComponentFactory('CheckOnce', viewFactory_CheckOnceComponentHost0);
ComponentFactory<import1.CheckOnceComponent> get CheckOnceComponentNgFactory {
  return _CheckOnceComponentNgFactory;
}

final List<dynamic> styles$CheckOnceComponentHost = const [];

class _ViewCheckOnceComponentHost0 extends AppView<import1.CheckOnceComponent> {
  ViewCheckOnceComponent0 _compView_0;
  import1.CheckOnceComponent _CheckOnceComponent_0_5;
  _ViewCheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.CheckOnceComponent> build() {
    _compView_0 = ViewCheckOnceComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckOnceComponent_0_5 = import1.CheckOnceComponent();
    _compView_0.create(_CheckOnceComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckOnceComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.CheckOnceComponent> viewFactory_CheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckOnceComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$CheckedComponent = const [];

class ViewCheckedComponent0 extends AppView<import1.CheckedComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewCheckedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('Checked');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.CheckedComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Checked');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$CheckedComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.CheckedComponent> viewFactory_CheckedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckedComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.CheckedComponent> _CheckedComponentNgFactory = const ComponentFactory('Checked', viewFactory_CheckedComponentHost0);
ComponentFactory<import1.CheckedComponent> get CheckedComponentNgFactory {
  return _CheckedComponentNgFactory;
}

final List<dynamic> styles$CheckedComponentHost = const [];

class _ViewCheckedComponentHost0 extends AppView<import1.CheckedComponent> {
  ViewCheckedComponent0 _compView_0;
  import1.CheckedComponent _CheckedComponent_0_5;
  _ViewCheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.CheckedComponent> build() {
    _compView_0 = ViewCheckedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckedComponent_0_5 = import1.CheckedComponent();
    _compView_0.create(_CheckedComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.CheckedComponent> viewFactory_CheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckedComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$CheckAlwaysComponent = const [];

class ViewCheckAlwaysComponent0 extends AppView<import1.CheckAlwaysComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewCheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('CheckAlways');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.CheckAlwaysComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'CheckAlways');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$CheckAlwaysComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.CheckAlwaysComponent> viewFactory_CheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewCheckAlwaysComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.CheckAlwaysComponent> _CheckAlwaysComponentNgFactory = const ComponentFactory('CheckAlways', viewFactory_CheckAlwaysComponentHost0);
ComponentFactory<import1.CheckAlwaysComponent> get CheckAlwaysComponentNgFactory {
  return _CheckAlwaysComponentNgFactory;
}

final List<dynamic> styles$CheckAlwaysComponentHost = const [];

class _ViewCheckAlwaysComponentHost0 extends AppView<import1.CheckAlwaysComponent> {
  ViewCheckAlwaysComponent0 _compView_0;
  import1.CheckAlwaysComponent _CheckAlwaysComponent_0_5;
  _ViewCheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.CheckAlwaysComponent> build() {
    _compView_0 = ViewCheckAlwaysComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _CheckAlwaysComponent_0_5 = import1.CheckAlwaysComponent();
    _compView_0.create(_CheckAlwaysComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _CheckAlwaysComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.CheckAlwaysComponent> viewFactory_CheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCheckAlwaysComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$DetachedComponent = const [];

class ViewDetachedComponent0 extends AppView<import1.DetachedComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewDetachedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('Detached');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.DetachedComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Detached');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DetachedComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.DetachedComponent> viewFactory_DetachedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewDetachedComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.DetachedComponent> _DetachedComponentNgFactory = const ComponentFactory('Detached', viewFactory_DetachedComponentHost0);
ComponentFactory<import1.DetachedComponent> get DetachedComponentNgFactory {
  return _DetachedComponentNgFactory;
}

final List<dynamic> styles$DetachedComponentHost = const [];

class _ViewDetachedComponentHost0 extends AppView<import1.DetachedComponent> {
  ViewDetachedComponent0 _compView_0;
  import1.DetachedComponent _DetachedComponent_0_5;
  _ViewDetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.DetachedComponent> build() {
    _compView_0 = ViewDetachedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DetachedComponent_0_5 = import1.DetachedComponent();
    _compView_0.create(_DetachedComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DetachedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.DetachedComponent> viewFactory_DetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDetachedComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesOnPushComponent = const [];

class ViewUsesOnPushComponent0 extends AppView<import1.UsesOnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesOnPushComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-cd-on-push');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.UsesOnPushComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewOnPushComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _OnPushComponent_0_5 = import1.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _OnPushComponent_0_5.name = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesOnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesOnPushComponent> viewFactory_UsesOnPushComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesOnPushComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesOnPushComponent> _UsesOnPushComponentNgFactory = const ComponentFactory('uses-cd-on-push', viewFactory_UsesOnPushComponentHost0);
ComponentFactory<import1.UsesOnPushComponent> get UsesOnPushComponentNgFactory {
  return _UsesOnPushComponentNgFactory;
}

final List<dynamic> styles$UsesOnPushComponentHost = const [];

class _ViewUsesOnPushComponentHost0 extends AppView<import1.UsesOnPushComponent> {
  ViewUsesOnPushComponent0 _compView_0;
  import1.UsesOnPushComponent _UsesOnPushComponent_0_5;
  _ViewUsesOnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesOnPushComponent> build() {
    _compView_0 = ViewUsesOnPushComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesOnPushComponent_0_5 = import1.UsesOnPushComponent();
    _compView_0.create(_UsesOnPushComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesOnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesOnPushComponent> viewFactory_UsesOnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesOnPushComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$OnPushComponent = const [];

class ViewOnPushComponent0 extends AppView<import1.OnPushComponent> {
  ViewOnPushChildComponent0 _compView_0;
  import1.OnPushChildComponent _OnPushChildComponent_0_5;
  String _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewOnPushComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('cd-on-push');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.OnPushComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewOnPushChildComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _OnPushChildComponent_0_5 = import1.OnPushChildComponent();
    _compView_0.create(_OnPushChildComponent_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    changed = false;
    final currVal_0 = _ctx.name;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _OnPushChildComponent_0_5.name = currVal_0;
      changed = true;
      _expr_0 = currVal_0;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.OnPushComponent> viewFactory_OnPushComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewOnPushComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.OnPushComponent> _OnPushComponentNgFactory = const ComponentFactory('cd-on-push', viewFactory_OnPushComponentHost0);
ComponentFactory<import1.OnPushComponent> get OnPushComponentNgFactory {
  return _OnPushComponentNgFactory;
}

final List<dynamic> styles$OnPushComponentHost = const [];

class _ViewOnPushComponentHost0 extends AppView<import1.OnPushComponent> {
  ViewOnPushComponent0 _compView_0;
  import1.OnPushComponent _OnPushComponent_0_5;
  _ViewOnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.OnPushComponent> build() {
    _compView_0 = ViewOnPushComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _OnPushComponent_0_5 = import1.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _OnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.OnPushComponent> viewFactory_OnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewOnPushComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$OnPushChildComponent = const [];

class ViewOnPushChildComponent0 extends AppView<import1.OnPushChildComponent> {
  var _expr_0;
  final import5.Text _text_2 = import8.createText('');
  static import2.ComponentStyles _componentStyles;
  ViewOnPushChildComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('cd-on-push-child');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.OnPushChildComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'OnPushChild: ');
    _el_0.append(_text_2);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.name ?? '');
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_2.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushChildComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.OnPushChildComponent> viewFactory_OnPushChildComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewOnPushChildComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.OnPushChildComponent> _OnPushChildComponentNgFactory = const ComponentFactory('cd-on-push-child', viewFactory_OnPushChildComponentHost0);
ComponentFactory<import1.OnPushChildComponent> get OnPushChildComponentNgFactory {
  return _OnPushChildComponentNgFactory;
}

final List<dynamic> styles$OnPushChildComponentHost = const [];

class _ViewOnPushChildComponentHost0 extends AppView<import1.OnPushChildComponent> {
  ViewOnPushChildComponent0 _compView_0;
  import1.OnPushChildComponent _OnPushChildComponent_0_5;
  _ViewOnPushChildComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.OnPushChildComponent> build() {
    _compView_0 = ViewOnPushChildComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _OnPushChildComponent_0_5 = import1.OnPushChildComponent();
    _compView_0.create(_OnPushChildComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _OnPushChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.OnPushChildComponent> viewFactory_OnPushChildComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewOnPushChildComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$StatefulComponent = const [];

class ViewStatefulComponent0 extends AppView<import1.StatefulComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewStatefulComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('Stateful');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.StatefulComponent> build() {
    final import1.StatefulComponent _ctx = ctx;
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Stateful');
    init(const [], null);
    _ctx.stateChangeCallback = markStateChanged;
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$StatefulComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.StatefulComponent> viewFactory_StatefulComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewStatefulComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.StatefulComponent> _StatefulComponentNgFactory = const ComponentFactory('Stateful', viewFactory_StatefulComponentHost0);
ComponentFactory<import1.StatefulComponent> get StatefulComponentNgFactory {
  return _StatefulComponentNgFactory;
}

final List<dynamic> styles$StatefulComponentHost = const [];

class _ViewStatefulComponentHost0 extends AppView<import1.StatefulComponent> {
  ViewStatefulComponent0 _compView_0;
  import1.StatefulComponent _StatefulComponent_0_5;
  _ViewStatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.StatefulComponent> build() {
    _compView_0 = ViewStatefulComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _StatefulComponent_0_5 = import1.StatefulComponent();
    _compView_0.create(_StatefulComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _StatefulComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.StatefulComponent> viewFactory_StatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewStatefulComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$DefaultComponent = const [];

class ViewDefaultComponent0 extends AppView<import1.DefaultComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewDefaultComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('Default');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/change_detection.dart' : null);
  }

  @override
  ComponentRef<import1.DefaultComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Default');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DefaultComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.DefaultComponent> viewFactory_DefaultComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewDefaultComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.DefaultComponent> _DefaultComponentNgFactory = const ComponentFactory('Default', viewFactory_DefaultComponentHost0);
ComponentFactory<import1.DefaultComponent> get DefaultComponentNgFactory {
  return _DefaultComponentNgFactory;
}

final List<dynamic> styles$DefaultComponentHost = const [];

class _ViewDefaultComponentHost0 extends AppView<import1.DefaultComponent> {
  ViewDefaultComponent0 _compView_0;
  import1.DefaultComponent _DefaultComponent_0_5;
  _ViewDefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.DefaultComponent> build() {
    _compView_0 = ViewDefaultComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DefaultComponent_0_5 = import1.DefaultComponent();
    _compView_0.create(_DefaultComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DefaultComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.DefaultComponent> viewFactory_DefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDefaultComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(CheckOnceComponent, CheckOnceComponentNgFactory);
  _ngRef.registerComponent(CheckedComponent, CheckedComponentNgFactory);
  _ngRef.registerComponent(CheckAlwaysComponent, CheckAlwaysComponentNgFactory);
  _ngRef.registerComponent(DetachedComponent, DetachedComponentNgFactory);
  _ngRef.registerComponent(UsesOnPushComponent, UsesOnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushComponent, OnPushComponentNgFactory);
  _ngRef.registerComponent(OnPushChildComponent, OnPushChildComponentNgFactory);
  _ngRef.registerComponent(StatefulComponent, StatefulComponentNgFactory);
  _ngRef.registerComponent(DefaultComponent, DefaultComponentNgFactory);
  _ref0.initReflector();
}
