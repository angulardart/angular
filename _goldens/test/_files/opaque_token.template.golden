// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'opaque_token.dart';
export 'opaque_token.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'opaque_token.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/runtime/interpolate.dart' as import10;
import 'package:angular/src/core/di/opaque_token.dart' as import11;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/di/errors.dart' as import15;
import 'dart:core';

final List<dynamic> styles$HasOpaqueTokens = const [];

// View for component HasOpaqueTokens in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class ViewHasOpaqueTokens0 extends AppView<import1.HasOpaqueTokens> {
  static import2.ComponentStyles _componentStyles;
  ViewHasOpaqueTokens0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('has-opaque-tokens');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/opaque_token.dart' : null);
  }

  @override
  ComponentRef<import1.HasOpaqueTokens> build() {
    final _ctx = this.ctx;
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, import10.interpolateString0(_ctx.baseUrl));
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasOpaqueTokens, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HasOpaqueTokens> _HasOpaqueTokensNgFactory = const ComponentFactory('has-opaque-tokens', viewFactory_HasOpaqueTokensHost0);
ComponentFactory<import1.HasOpaqueTokens> get HasOpaqueTokensNgFactory {
  return _HasOpaqueTokensNgFactory;
}

final List<dynamic> styles$HasOpaqueTokensHost = const [];

// Host for component HasOpaqueTokens in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class _ViewHasOpaqueTokensHost0 extends AppView<import1.HasOpaqueTokens> {
  ViewHasOpaqueTokens0 _compView_0;
  String _baseUrlDescription_0_5;
  import1.HasOpaqueTokens _HasOpaqueTokens_0_6;
  _ViewHasOpaqueTokensHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.HasOpaqueTokens> build() {
    // Child component HasOpaqueTokens in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
    this._compView_0 = ViewHasOpaqueTokens0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._baseUrlDescription_0_5 = 'https://localhost';
    this._HasOpaqueTokens_0_6 = import1.HasOpaqueTokens(this._baseUrlDescription_0_5);
    this._compView_0.create(this._HasOpaqueTokens_0_6, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._HasOpaqueTokens_0_6);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const import11.OpaqueToken<dynamic>('baseUrlDescription')) && (0 == nodeIndex))) {
      return this._baseUrlDescription_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.HasOpaqueTokens> viewFactory_HasOpaqueTokensHost0() {
  return _ViewHasOpaqueTokensHost0(null, null);
}

final List<dynamic> styles$ContainsChildComponent = const [];

// View for component ContainsChildComponent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class ViewContainsChildComponent0 extends AppView<import1.ContainsChildComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import2.ComponentStyles _componentStyles;
  ViewContainsChildComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('contains-child-component');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/opaque_token.dart' : null);
  }

  @override
  ComponentRef<import1.ContainsChildComponent> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import9.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_ContainsChildComponent1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.someValue;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ContainsChildComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ContainsChildComponent> _ContainsChildComponentNgFactory = const ComponentFactory('contains-child-component', viewFactory_ContainsChildComponentHost0);
ComponentFactory<import1.ContainsChildComponent> get ContainsChildComponentNgFactory {
  return _ContainsChildComponentNgFactory;
}

class _ViewContainsChildComponent1 extends AppView<import1.ContainsChildComponent> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  _ViewContainsChildComponent1(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.ContainsChildComponent> build() {
    final doc = import6.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import9.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_ContainsChildComponent2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.someValue;
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

AppView<void> viewFactory_ContainsChildComponent1(import3.RenderView parentView, int parentIndex) {
  return _ViewContainsChildComponent1(parentView, parentIndex);
}

class _ViewContainsChildComponent2 extends AppView<import1.ContainsChildComponent> {
  ViewInjectsTypedTokenFromSomeParent0 _compView_1;
  import1.InjectsTypedTokenFromSomeParent _InjectsTypedTokenFromSomeParent_1_5;
  _ViewContainsChildComponent2(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.ContainsChildComponent> build() {
    final doc = import6.document;
    final _el_0 = doc.createElement('div');
    // Child component InjectsTypedTokenFromSomeParent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
    this._compView_1 = ViewInjectsTypedTokenFromSomeParent0(this, 1);
    final _el_1 = this._compView_1.rootEl;
    _el_0.append(_el_1);
    this._InjectsTypedTokenFromSomeParent_1_5 = (import7.isDevMode
        ? import15.debugInjectorWrap(import1.InjectsTypedTokenFromSomeParent, () {
            return import1.InjectsTypedTokenFromSomeParent(this.parentView.parentView.injectorGet(const import11.OpaqueToken<List<Duration>>('listOfDuration'), this.parentView.parentIndex));
          })
        : import1.InjectsTypedTokenFromSomeParent(this.parentView.parentView.injectorGet(const import11.OpaqueToken<List<Duration>>('listOfDuration'), this.parentView.parentIndex)));
    this._compView_1.create0(this._InjectsTypedTokenFromSomeParent_1_5);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_1.destroyInternalState();
  }
}

AppView<void> viewFactory_ContainsChildComponent2(import3.RenderView parentView, int parentIndex) {
  return _ViewContainsChildComponent2(parentView, parentIndex);
}

final List<dynamic> styles$ContainsChildComponentHost = const [];

// Host for component ContainsChildComponent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class _ViewContainsChildComponentHost0 extends AppView<import1.ContainsChildComponent> {
  ViewContainsChildComponent0 _compView_0;
  import1.ContainsChildComponent _ContainsChildComponent_0_5;
  _ViewContainsChildComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.ContainsChildComponent> build() {
    // Child component ContainsChildComponent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
    this._compView_0 = ViewContainsChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ContainsChildComponent_0_5 = import1.ContainsChildComponent();
    this._compView_0.create(this._ContainsChildComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ContainsChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ContainsChildComponent> viewFactory_ContainsChildComponentHost0() {
  return _ViewContainsChildComponentHost0(null, null);
}

final List<dynamic> styles$InjectsTypedTokenFromSomeParent = const [];

// View for component InjectsTypedTokenFromSomeParent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class ViewInjectsTypedTokenFromSomeParent0 extends AppView<import1.InjectsTypedTokenFromSomeParent> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectsTypedTokenFromSomeParent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('injects-typed-token-from-parent');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/opaque_token.dart' : null);
  }

  @override
  ComponentRef<import1.InjectsTypedTokenFromSomeParent> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InjectsTypedTokenFromSomeParent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InjectsTypedTokenFromSomeParent> _InjectsTypedTokenFromSomeParentNgFactory = const ComponentFactory('injects-typed-token-from-parent', viewFactory_InjectsTypedTokenFromSomeParentHost0);
ComponentFactory<import1.InjectsTypedTokenFromSomeParent> get InjectsTypedTokenFromSomeParentNgFactory {
  return _InjectsTypedTokenFromSomeParentNgFactory;
}

final List<dynamic> styles$InjectsTypedTokenFromSomeParentHost = const [];

// Host for component InjectsTypedTokenFromSomeParent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
class _ViewInjectsTypedTokenFromSomeParentHost0 extends AppView<import1.InjectsTypedTokenFromSomeParent> {
  ViewInjectsTypedTokenFromSomeParent0 _compView_0;
  import1.InjectsTypedTokenFromSomeParent _InjectsTypedTokenFromSomeParent_0_5;
  _ViewInjectsTypedTokenFromSomeParentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.InjectsTypedTokenFromSomeParent> build() {
    // Child component InjectsTypedTokenFromSomeParent in asset:_goldens/test/_files/opaque_token.dart (changeDetection: Default)
    this._compView_0 = ViewInjectsTypedTokenFromSomeParent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._InjectsTypedTokenFromSomeParent_0_5 = (import7.isDevMode
        ? import15.debugInjectorWrap(import1.InjectsTypedTokenFromSomeParent, () {
            return import1.InjectsTypedTokenFromSomeParent(this.injectorGet(const import11.OpaqueToken<List<Duration>>('listOfDuration'), this.parentIndex));
          })
        : import1.InjectsTypedTokenFromSomeParent(this.injectorGet(const import11.OpaqueToken<List<Duration>>('listOfDuration'), this.parentIndex)));
    this._compView_0.create(this._InjectsTypedTokenFromSomeParent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._InjectsTypedTokenFromSomeParent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.InjectsTypedTokenFromSomeParent> viewFactory_InjectsTypedTokenFromSomeParentHost0() {
  return _ViewInjectsTypedTokenFromSomeParentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HasOpaqueTokens, HasOpaqueTokensNgFactory);
  _ngRef.registerComponent(ContainsChildComponent, ContainsChildComponentNgFactory);
  _ngRef.registerComponent(InjectsTypedTokenFromSomeParent, InjectsTypedTokenFromSomeParentNgFactory);
  _ref0.initReflector();
}
