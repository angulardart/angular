// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'visibility.dart';
export 'visibility.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart' as import0 /*WHITELISTED*/;
import 'visibility.dart' as import1;
import 'package:angular/src/core/render/api.dart' as import2 /*WHITELISTED*/;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart' as import4 /*WHITELISTED*/;
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart' as import8 /*WHITELISTED*/;

final List<dynamic> styles$Dependent = const [];

class ViewDependent0 extends import0 /*WHITELISTED*/ .AppView<import1.Dependent> {
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewDependent0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('dependent');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$Dependent);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.Dependent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

import0 /*WHITELISTED*/ .AppView<import1.Dependent> viewFactory_Dependent0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewDependent0(parentView, parentIndex);
}

final List<dynamic> styles$DependentHost = const [];

class _ViewDependentHost0 extends import0 /*WHITELISTED*/ .AppView<import1.Dependent> {
  ViewDependent0 _compView_0;
  import1.Dependent _Dependent_0_5;
  _ViewDependentHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.Dependent> build() {
    _compView_0 = ViewDependent0(this, 0);
    rootEl = _compView_0.rootEl;
    _Dependent_0_5 = import1.Dependent(this.injectorGet(import1.Dependency, viewData.parentIndex));
    _compView_0.create(_Dependent_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _Dependent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.Dependent> viewFactory_DependentHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewDependentHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.Dependent> _DependentNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('dependent', viewFactory_DependentHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.Dependent> get DependentNgFactory {
  return _DependentNgFactory;
}

final List<dynamic> styles$DependencyWithDependentInView = const [];

class ViewDependencyWithDependentInView0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyWithDependentInView> {
  import5.Element _el_0;
  ViewDependent0 _compView_0;
  import1.Dependent _Dependent_0_5;
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewDependencyWithDependentInView0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('dependency-with-dependent-in-view');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$DependencyWithDependentInView);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyWithDependentInView> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewDependent0(this, 0);
    _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _Dependent_0_5 = import1.Dependent(parentView.injectorGet(import1.Dependency, viewData.parentIndex));
    _compView_0.create(_Dependent_0_5, []);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyWithDependentInView> viewFactory_DependencyWithDependentInView0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewDependencyWithDependentInView0(parentView, parentIndex);
}

final List<dynamic> styles$DependencyWithDependentInViewHost = const [];

class _ViewDependencyWithDependentInViewHost0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyWithDependentInView> {
  ViewDependencyWithDependentInView0 _compView_0;
  import1.DependencyWithDependentInView _DependencyWithDependentInView_0_5;
  _ViewDependencyWithDependentInViewHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyWithDependentInView> build() {
    _compView_0 = ViewDependencyWithDependentInView0(this, 0);
    rootEl = _compView_0.rootEl;
    _DependencyWithDependentInView_0_5 = import1.DependencyWithDependentInView();
    _compView_0.create(_DependencyWithDependentInView_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _DependencyWithDependentInView_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Dependency) && (0 == nodeIndex))) {
      return _DependencyWithDependentInView_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyWithDependentInView> viewFactory_DependencyWithDependentInViewHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewDependencyWithDependentInViewHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyWithDependentInView> _DependencyWithDependentInViewNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('dependency-with-dependent-in-view', viewFactory_DependencyWithDependentInViewHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyWithDependentInView> get DependencyWithDependentInViewNgFactory {
  return _DependencyWithDependentInViewNgFactory;
}

final List<dynamic> styles$DependencyWithContent = const [];

class ViewDependencyWithContent0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyWithContent> {
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewDependencyWithContent0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('dependency-with-content');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$DependencyWithContent);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyWithContent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    project(parentRenderNode, 0);
    init(const [], null);
    return null;
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyWithContent> viewFactory_DependencyWithContent0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewDependencyWithContent0(parentView, parentIndex);
}

final List<dynamic> styles$DependencyWithContentHost = const [];

class _ViewDependencyWithContentHost0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyWithContent> {
  ViewDependencyWithContent0 _compView_0;
  import1.DependencyWithContent _DependencyWithContent_0_5;
  _ViewDependencyWithContentHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyWithContent> build() {
    _compView_0 = ViewDependencyWithContent0(this, 0);
    rootEl = _compView_0.rootEl;
    _DependencyWithContent_0_5 = import1.DependencyWithContent();
    _compView_0.create(_DependencyWithContent_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _DependencyWithContent_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Dependency) && (0 == nodeIndex))) {
      return _DependencyWithContent_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyWithContent> viewFactory_DependencyWithContentHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewDependencyWithContentHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyWithContent> _DependencyWithContentNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('dependency-with-content', viewFactory_DependencyWithContentHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyWithContent> get DependencyWithContentNgFactory {
  return _DependencyWithContentNgFactory;
}

final List<dynamic> styles$DependencyAndDependentInView = const [];

class ViewDependencyAndDependentInView0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyAndDependentInView> {
  import5.Element _el_0;
  import5.Element _el_1;
  ViewDependent0 _compView_1;
  import1.Dependent _Dependent_1_5;
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewDependencyAndDependentInView0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('dependency-and-dependent-in-view');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$DependencyAndDependentInView);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyAndDependentInView> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import5.document;
    _el_0 = import0 /*WHITELISTED*/ .createAndAppend(doc, 'dependency', parentRenderNode);
    _compView_1 = ViewDependent0(this, 1);
    _el_1 = _compView_1.rootEl;
    _el_0.append(_el_1);
    _Dependent_1_5 = import1.Dependent(parentView.injectorGet(import1.Dependency, viewData.parentIndex));
    _compView_1.create(_Dependent_1_5, []);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_1?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyAndDependentInView> viewFactory_DependencyAndDependentInView0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewDependencyAndDependentInView0(parentView, parentIndex);
}

final List<dynamic> styles$DependencyAndDependentInViewHost = const [];

class _ViewDependencyAndDependentInViewHost0 extends import0 /*WHITELISTED*/ .AppView<import1.DependencyAndDependentInView> {
  ViewDependencyAndDependentInView0 _compView_0;
  import1.DependencyAndDependentInView _DependencyAndDependentInView_0_5;
  _ViewDependencyAndDependentInViewHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.DependencyAndDependentInView> build() {
    _compView_0 = ViewDependencyAndDependentInView0(this, 0);
    rootEl = _compView_0.rootEl;
    _DependencyAndDependentInView_0_5 = import1.DependencyAndDependentInView();
    _compView_0.create(_DependencyAndDependentInView_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _DependencyAndDependentInView_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.DependencyAndDependentInView> viewFactory_DependencyAndDependentInViewHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewDependencyAndDependentInViewHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyAndDependentInView> _DependencyAndDependentInViewNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('dependency-and-dependent-in-view', viewFactory_DependencyAndDependentInViewHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.DependencyAndDependentInView> get DependencyAndDependentInViewNgFactory {
  return _DependencyAndDependentInViewNgFactory;
}

final List<dynamic> styles$HasVisibilityAll = const [];

class ViewHasVisibilityAll0 extends import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityAll> {
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewHasVisibilityAll0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('has-visibility-all');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$HasVisibilityAll);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.HasVisibilityAll> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityAll> viewFactory_HasVisibilityAll0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewHasVisibilityAll0(parentView, parentIndex);
}

final List<dynamic> styles$HasVisibilityAllHost = const [];

class _ViewHasVisibilityAllHost0 extends import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityAll> {
  ViewHasVisibilityAll0 _compView_0;
  import1.HasVisibilityAll _HasVisibilityAll_0_5;
  _ViewHasVisibilityAllHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.HasVisibilityAll> build() {
    _compView_0 = ViewHasVisibilityAll0(this, 0);
    rootEl = _compView_0.rootEl;
    _HasVisibilityAll_0_5 = import1.HasVisibilityAll();
    _compView_0.create(_HasVisibilityAll_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _HasVisibilityAll_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.HasVisibilityAll) && (0 == nodeIndex))) {
      return _HasVisibilityAll_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityAll> viewFactory_HasVisibilityAllHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewHasVisibilityAllHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.HasVisibilityAll> _HasVisibilityAllNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('has-visibility-all', viewFactory_HasVisibilityAllHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.HasVisibilityAll> get HasVisibilityAllNgFactory {
  return _HasVisibilityAllNgFactory;
}

final List<dynamic> styles$HasVisibilityLocal = const [];

class ViewHasVisibilityLocal0 extends import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityLocal> {
  static import2 /*WHITELISTED*/ .RenderComponentType _renderType;
  ViewHasVisibilityLocal0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('has-visibility-local');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null), import8 /*WHITELISTED*/ .ViewEncapsulation.None, styles$HasVisibilityLocal);
    setupComponentType(_renderType);
  }
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.HasVisibilityLocal> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityLocal> viewFactory_HasVisibilityLocal0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return ViewHasVisibilityLocal0(parentView, parentIndex);
}

final List<dynamic> styles$HasVisibilityLocalHost = const [];

class _ViewHasVisibilityLocalHost0 extends import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityLocal> {
  ViewHasVisibilityLocal0 _compView_0;
  import1.HasVisibilityLocal _HasVisibilityLocal_0_5;
  _ViewHasVisibilityLocalHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4 /*WHITELISTED*/ .ChangeDetectionStrategy.CheckAlways);
  @override
  import8 /*WHITELISTED*/ .ComponentRef<import1.HasVisibilityLocal> build() {
    _compView_0 = ViewHasVisibilityLocal0(this, 0);
    rootEl = _compView_0.rootEl;
    _HasVisibilityLocal_0_5 = import1.HasVisibilityLocal();
    _compView_0.create(_HasVisibilityLocal_0_5, projectableNodes);
    init0(rootEl);
    return import8 /*WHITELISTED*/ .ComponentRef(0, this, rootEl, _HasVisibilityLocal_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0 /*WHITELISTED*/ .AppView<import1.HasVisibilityLocal> viewFactory_HasVisibilityLocalHost0(import0 /*WHITELISTED*/ .AppView<dynamic> parentView, int parentIndex) {
  return _ViewHasVisibilityLocalHost0(parentView, parentIndex);
}

const import8 /*WHITELISTED*/ .ComponentFactory<import1.HasVisibilityLocal> _HasVisibilityLocalNgFactory = const import8 /*WHITELISTED*/ .ComponentFactory('has-visibility-local', viewFactory_HasVisibilityLocalHost0);
import8 /*WHITELISTED*/ .ComponentFactory<import1.HasVisibilityLocal> get HasVisibilityLocalNgFactory {
  return _HasVisibilityLocalNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(Dependent, DependentNgFactory);
  _ngRef.registerComponent(DependencyWithDependentInView, DependencyWithDependentInViewNgFactory);
  _ngRef.registerComponent(DependencyWithContent, DependencyWithContentNgFactory);
  _ngRef.registerComponent(DependencyAndDependentInView, DependencyAndDependentInViewNgFactory);
  _ngRef.registerComponent(HasVisibilityAll, HasVisibilityAllNgFactory);
  _ngRef.registerComponent(HasVisibilityLocal, HasVisibilityLocalNgFactory);
  _ref0.initReflector();
}
