// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'visibility.dart';
export 'visibility.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'visibility.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import8;
import 'package:angular/src/di/injector/injector.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;
import 'package:angular/src/runtime/dom_helpers.dart' as import11;

final List<dynamic> styles$Dependent = const [];

// View for component Dependent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewDependent0 extends import0.ComponentView<import1.Dependent> {
  static import2.ComponentStyles _componentStyles;
  ViewDependent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('dependent');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$Dependent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.Dependent> _DependentNgFactory = const ComponentFactory('dependent', viewFactory_DependentHost0);
ComponentFactory<import1.Dependent> get DependentNgFactory {
  return _DependentNgFactory;
}

final List<dynamic> styles$DependentHost = const [];

// Host for component Dependent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewDependentHost0 extends import8.HostView<import1.Dependent> {
  _ViewDependentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component Dependent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewDependent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import6.isDevMode
        ? import10.debugInjectorWrap(import1.Dependent, () {
            return import1.Dependent(this.injectorGet(import1.Dependency, this.parentIndex));
          })
        : import1.Dependent(this.injectorGet(import1.Dependency, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.Dependent> viewFactory_DependentHost0(import9.Injector injector) {
  return _ViewDependentHost0(injector);
}

final List<dynamic> styles$DependencyWithDependentInView = const [];

// View for component DependencyWithDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewDependencyWithDependentInView0 extends import0.ComponentView<import1.DependencyWithDependentInView> {
  ViewDependent0 _compView_0;
  import1.Dependent _Dependent_0_5;
  static import2.ComponentStyles _componentStyles;
  ViewDependencyWithDependentInView0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('dependency-with-dependent-in-view');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component Dependent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this._compView_0 = ViewDependent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._Dependent_0_5 = (import6.isDevMode
        ? import10.debugInjectorWrap(import1.Dependent, () {
            return import1.Dependent(this.parentView.injectorGet(import1.Dependency, this.parentIndex));
          })
        : import1.Dependent(this.parentView.injectorGet(import1.Dependency, this.parentIndex)));
    this._compView_0.create(this._Dependent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DependencyWithDependentInView, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DependencyWithDependentInView> _DependencyWithDependentInViewNgFactory = const ComponentFactory('dependency-with-dependent-in-view', viewFactory_DependencyWithDependentInViewHost0);
ComponentFactory<import1.DependencyWithDependentInView> get DependencyWithDependentInViewNgFactory {
  return _DependencyWithDependentInViewNgFactory;
}

final List<dynamic> styles$DependencyWithDependentInViewHost = const [];

// Host for component DependencyWithDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewDependencyWithDependentInViewHost0 extends import8.HostView<import1.DependencyWithDependentInView> {
  _ViewDependencyWithDependentInViewHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DependencyWithDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewDependencyWithDependentInView0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DependencyWithDependentInView();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Dependency) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import8.HostView<import1.DependencyWithDependentInView> viewFactory_DependencyWithDependentInViewHost0(import9.Injector injector) {
  return _ViewDependencyWithDependentInViewHost0(injector);
}

final List<dynamic> styles$DependencyWithContent = const [];

// View for component DependencyWithContent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewDependencyWithContent0 extends import0.ComponentView<import1.DependencyWithContent> {
  static import2.ComponentStyles _componentStyles;
  ViewDependencyWithContent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('dependency-with-content');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DependencyWithContent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DependencyWithContent> _DependencyWithContentNgFactory = const ComponentFactory('dependency-with-content', viewFactory_DependencyWithContentHost0);
ComponentFactory<import1.DependencyWithContent> get DependencyWithContentNgFactory {
  return _DependencyWithContentNgFactory;
}

final List<dynamic> styles$DependencyWithContentHost = const [];

// Host for component DependencyWithContent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewDependencyWithContentHost0 extends import8.HostView<import1.DependencyWithContent> {
  _ViewDependencyWithContentHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DependencyWithContent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewDependencyWithContent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DependencyWithContent();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Dependency) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import8.HostView<import1.DependencyWithContent> viewFactory_DependencyWithContentHost0(import9.Injector injector) {
  return _ViewDependencyWithContentHost0(injector);
}

final List<dynamic> styles$DependencyAndDependentInView = const [];

// View for component DependencyAndDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewDependencyAndDependentInView0 extends import0.ComponentView<import1.DependencyAndDependentInView> {
  ViewDependent0 _compView_1;
  import1.Dependent _Dependent_1_5;
  static import2.ComponentStyles _componentStyles;
  ViewDependencyAndDependentInView0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('dependency-and-dependent-in-view');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'dependency');
    // Child component Dependent in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this._compView_1 = ViewDependent0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    _el_0.append(_el_1);
    this._Dependent_1_5 = (import6.isDevMode
        ? import10.debugInjectorWrap(import1.Dependent, () {
            return import1.Dependent(this.parentView.injectorGet(import1.Dependency, this.parentIndex));
          })
        : import1.Dependent(this.parentView.injectorGet(import1.Dependency, this.parentIndex)));
    this._compView_1.create(this._Dependent_1_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_1.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DependencyAndDependentInView, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DependencyAndDependentInView> _DependencyAndDependentInViewNgFactory = const ComponentFactory('dependency-and-dependent-in-view', viewFactory_DependencyAndDependentInViewHost0);
ComponentFactory<import1.DependencyAndDependentInView> get DependencyAndDependentInViewNgFactory {
  return _DependencyAndDependentInViewNgFactory;
}

final List<dynamic> styles$DependencyAndDependentInViewHost = const [];

// Host for component DependencyAndDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewDependencyAndDependentInViewHost0 extends import8.HostView<import1.DependencyAndDependentInView> {
  _ViewDependencyAndDependentInViewHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DependencyAndDependentInView in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewDependencyAndDependentInView0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DependencyAndDependentInView();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.DependencyAndDependentInView> viewFactory_DependencyAndDependentInViewHost0(import9.Injector injector) {
  return _ViewDependencyAndDependentInViewHost0(injector);
}

final List<dynamic> styles$HasVisibilityAll = const [];

// View for component HasVisibilityAll in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewHasVisibilityAll0 extends import0.ComponentView<import1.HasVisibilityAll> {
  static import2.ComponentStyles _componentStyles;
  ViewHasVisibilityAll0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('has-visibility-all');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasVisibilityAll, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HasVisibilityAll> _HasVisibilityAllNgFactory = const ComponentFactory('has-visibility-all', viewFactory_HasVisibilityAllHost0);
ComponentFactory<import1.HasVisibilityAll> get HasVisibilityAllNgFactory {
  return _HasVisibilityAllNgFactory;
}

final List<dynamic> styles$HasVisibilityAllHost = const [];

// Host for component HasVisibilityAll in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewHasVisibilityAllHost0 extends import8.HostView<import1.HasVisibilityAll> {
  _ViewHasVisibilityAllHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component HasVisibilityAll in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewHasVisibilityAll0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasVisibilityAll();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.HasVisibilityAll) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import8.HostView<import1.HasVisibilityAll> viewFactory_HasVisibilityAllHost0(import9.Injector injector) {
  return _ViewHasVisibilityAllHost0(injector);
}

final List<dynamic> styles$HasVisibilityLocal = const [];

// View for component HasVisibilityLocal in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class ViewHasVisibilityLocal0 extends import0.ComponentView<import1.HasVisibilityLocal> {
  static import2.ComponentStyles _componentStyles;
  ViewHasVisibilityLocal0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('has-visibility-local');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/visibility.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasVisibilityLocal, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HasVisibilityLocal> _HasVisibilityLocalNgFactory = const ComponentFactory('has-visibility-local', viewFactory_HasVisibilityLocalHost0);
ComponentFactory<import1.HasVisibilityLocal> get HasVisibilityLocalNgFactory {
  return _HasVisibilityLocalNgFactory;
}

final List<dynamic> styles$HasVisibilityLocalHost = const [];

// Host for component HasVisibilityLocal in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
class _ViewHasVisibilityLocalHost0 extends import8.HostView<import1.HasVisibilityLocal> {
  _ViewHasVisibilityLocalHost0(import9.Injector injector) : super(injector);
  @override
  void build() {
    // Child component HasVisibilityLocal in asset:_goldens/test/_files/visibility.dart (changeDetection: Default)
    this.componentView = ViewHasVisibilityLocal0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasVisibilityLocal();
    this.initRootNode(_el_0);
  }
}

import8.HostView<import1.HasVisibilityLocal> viewFactory_HasVisibilityLocalHost0(import9.Injector injector) {
  return _ViewHasVisibilityLocalHost0(injector);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(Dependent, DependentNgFactory);
  _ngRef.registerComponent(DependencyWithDependentInView, DependencyWithDependentInViewNgFactory);
  _ngRef.registerComponent(DependencyWithContent, DependencyWithContentNgFactory);
  _ngRef.registerComponent(DependencyAndDependentInView, DependencyAndDependentInViewNgFactory);
  _ngRef.registerComponent(HasVisibilityAll, HasVisibilityAllNgFactory);
  _ngRef.registerComponent(HasVisibilityLocal, HasVisibilityLocalNgFactory);
  _ref0.initReflector();
}
