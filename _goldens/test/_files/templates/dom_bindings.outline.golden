// ignore_for_file: library_prefixes,unused_import,no_default_super_constructor_explicit
// The .template.dart files also export the user code.
export 'dom_bindings.dart';

// Required for referencing runtime code.
import 'dart:html' as _html;
import 'package:angular/angular.dart' as _ng;
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as _ng;
import 'package:angular/src/core/linker/app_view.dart' as _ng;

// Required for specifically referencing user code.
import 'dom_bindings.dart';

// Required for "type inference" (scoping).
import 'package:angular/angular.dart';

// For @Component class HasHostAttributes.
external List<dynamic> get styles$HasHostAttributes;
external _ng.ComponentFactory<HasHostAttributes> get HasHostAttributesNgFactory;
external _ng.AppView<HasHostAttributes> viewFactory_HasHostAttributes0(_ng.AppView<dynamic> parentView, int parentIndex);
class ViewHasHostAttributes0 extends _ng.AppView<HasHostAttributes> {
  external ViewHasHostAttributes0(_ng.AppView<dynamic> parentView, int parentIndex);
}
// For @Component class HasTemplateAttributes.
external List<dynamic> get styles$HasTemplateAttributes;
external _ng.ComponentFactory<HasTemplateAttributes> get HasTemplateAttributesNgFactory;
external _ng.AppView<HasTemplateAttributes> viewFactory_HasTemplateAttributes0(_ng.AppView<dynamic> parentView, int parentIndex);
class ViewHasTemplateAttributes0 extends _ng.AppView<HasTemplateAttributes> {
  external ViewHasTemplateAttributes0(_ng.AppView<dynamic> parentView, int parentIndex);
}
// For @Component class HasHostClass.
external List<dynamic> get styles$HasHostClass;
external _ng.ComponentFactory<HasHostClass> get HasHostClassNgFactory;
external _ng.AppView<HasHostClass> viewFactory_HasHostClass0(_ng.AppView<dynamic> parentView, int parentIndex);
class ViewHasHostClass0 extends _ng.AppView<HasHostClass> {
  external ViewHasHostClass0(_ng.AppView<dynamic> parentView, int parentIndex);
}
// For @Component class HasTemplateClass.
external List<dynamic> get styles$HasTemplateClass;
external _ng.ComponentFactory<HasTemplateClass> get HasTemplateClassNgFactory;
external _ng.AppView<HasTemplateClass> viewFactory_HasTemplateClass0(_ng.AppView<dynamic> parentView, int parentIndex);
class ViewHasTemplateClass0 extends _ng.AppView<HasTemplateClass> {
  external ViewHasTemplateClass0(_ng.AppView<dynamic> parentView, int parentIndex);
}

external void initReflector();
