// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'has_template_file.dart';
export 'has_template_file.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'has_template_file.css.shim.dart' as import0;
import 'package:angular/src/core/linker/app_view.dart';
import 'has_template_file.dart' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/render_view.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import10;

final List<dynamic> styles$HasTemplateFileComponent = [import0.styles];

// View for component HasTemplateFileComponent in asset:_goldens/test/_files/templates/has_template_file.dart (changeDetection: Default)
class ViewHasTemplateFileComponent0 extends AppView<import2.HasTemplateFileComponent> {
  static import3.ComponentStyles _componentStyles;
  ViewHasTemplateFileComponent0(import4.RenderView parentView, int parentIndex) : super(import5.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import7.document.createElement('has-template-file');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/templates/has_template_file.dart' : null);
  }

  @override
  ComponentRef<import2.HasTemplateFileComponent> build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    final _el_0 = import10.appendDiv(doc, parentRenderNode);
    this.addShimC(_el_0);
    final _text_1 = import10.appendText(_el_0, 'Has Template File!');
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.scoped(styles$HasTemplateFileComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import2.HasTemplateFileComponent> _HasTemplateFileComponentNgFactory = const ComponentFactory('has-template-file', viewFactory_HasTemplateFileComponentHost0);
ComponentFactory<import2.HasTemplateFileComponent> get HasTemplateFileComponentNgFactory {
  return _HasTemplateFileComponentNgFactory;
}

final List<dynamic> styles$HasTemplateFileComponentHost = const [];

// Host for component HasTemplateFileComponent in asset:_goldens/test/_files/templates/has_template_file.dart (changeDetection: Default)
class _ViewHasTemplateFileComponentHost0 extends AppView<import2.HasTemplateFileComponent> {
  ViewHasTemplateFileComponent0 _compView_0;
  import2.HasTemplateFileComponent _HasTemplateFileComponent_0_5;
  _ViewHasTemplateFileComponentHost0(import4.RenderView parentView, int parentIndex) : super(import5.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import2.HasTemplateFileComponent> build() {
    // Child component HasTemplateFileComponent in asset:_goldens/test/_files/templates/has_template_file.dart (changeDetection: Default)
    this._compView_0 = ViewHasTemplateFileComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._HasTemplateFileComponent_0_5 = import2.HasTemplateFileComponent();
    this._compView_0.create(this._HasTemplateFileComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._HasTemplateFileComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import2.HasTemplateFileComponent> viewFactory_HasTemplateFileComponentHost0() {
  return _ViewHasTemplateFileComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HasTemplateFileComponent, HasTemplateFileComponentNgFactory);
  _ref0.initReflector();
}
