// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'has_template_file.dart';
export 'has_template_file.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'has_template_file.css.shim.dart' as import0;
import 'has_template_file.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/linker/app_view_utils.dart' as import4;
import 'package:angular/src/runtime.dart' as import5;

final List<dynamic> styles$HasTemplateFileComponent = [import0.styles];

class ViewHasTemplateFileComponent0 extends AppView<import1.HasTemplateFileComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewHasTemplateFileComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('has-template-file');
    _renderType ??= import4.appViewUtils.createRenderType((import5.isDevMode ? 'asset:_goldens/test/_files/templates/has_template_file.dart' : null), ViewEncapsulation.Emulated, styles$HasTemplateFileComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.HasTemplateFileComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    addShimC(_el_0);
    import2.Text _text_1 = import2.Text('Has Template File!');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.HasTemplateFileComponent> viewFactory_HasTemplateFileComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewHasTemplateFileComponent0(parentView, parentIndex);
}

final List<dynamic> styles$HasTemplateFileComponentHost = const [];

class _ViewHasTemplateFileComponentHost0 extends AppView<import1.HasTemplateFileComponent> {
  ViewHasTemplateFileComponent0 _compView_0;
  import1.HasTemplateFileComponent _HasTemplateFileComponent_0_5;
  _ViewHasTemplateFileComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.HasTemplateFileComponent> build() {
    _compView_0 = ViewHasTemplateFileComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _HasTemplateFileComponent_0_5 = import1.HasTemplateFileComponent();
    _compView_0.create(_HasTemplateFileComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _HasTemplateFileComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.HasTemplateFileComponent> viewFactory_HasTemplateFileComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewHasTemplateFileComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.HasTemplateFileComponent> _HasTemplateFileComponentNgFactory = const ComponentFactory('has-template-file', viewFactory_HasTemplateFileComponentHost0);
ComponentFactory<import1.HasTemplateFileComponent> get HasTemplateFileComponentNgFactory {
  return _HasTemplateFileComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HasTemplateFileComponent, HasTemplateFileComponentNgFactory);
  _ref0.initReflector();
}
