// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'dom_bindings.dart';
export 'dom_bindings.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'dom_bindings.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;
import 'package:angular/src/runtime/dom_helpers.dart' as import10;

final List<dynamic> styles$HasHostAttributes = const [];

class ViewHasHostAttributes0 extends AppView<import1.HasHostAttributes> {
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasHostAttributes0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-host-attributes');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasHostAttributes> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  void detectHostChanges(bool firstCheck) {
    final _ctx = ctx;
    final currVal_0 = _ctx.title;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import10.updateAttribute(rootEl, 'title', currVal_0);
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasHostAttributes, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasHostAttributes> _HasHostAttributesNgFactory = const ComponentFactory('has-host-attributes', viewFactory_HasHostAttributesHost0);
ComponentFactory<import1.HasHostAttributes> get HasHostAttributesNgFactory {
  return _HasHostAttributesNgFactory;
}

final List<dynamic> styles$HasHostAttributesHost = const [];

class _ViewHasHostAttributesHost0 extends AppView<import1.HasHostAttributes> {
  ViewHasHostAttributes0 _compView_0;
  import1.HasHostAttributes _HasHostAttributes_0_5;
  _ViewHasHostAttributesHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasHostAttributes> build() {
    _compView_0 = ViewHasHostAttributes0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasHostAttributes_0_5 = import1.HasHostAttributes();
    _compView_0.create(_HasHostAttributes_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasHostAttributes_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasHostAttributes> viewFactory_HasHostAttributesHost0() {
  return _ViewHasHostAttributesHost0(null, null);
}

final List<dynamic> styles$HasTemplateAttributes = const [];

class ViewHasTemplateAttributes0 extends AppView<import1.HasTemplateAttributes> {
  var _expr_0;
  import6.DivElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasTemplateAttributes0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-template-attributes');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasTemplateAttributes> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    _el_0 = import10.appendDiv(doc, parentRenderNode);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.title;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import10.updateAttribute(_el_0, 'title', currVal_0);
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasTemplateAttributes, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasTemplateAttributes> _HasTemplateAttributesNgFactory = const ComponentFactory('has-template-attributes', viewFactory_HasTemplateAttributesHost0);
ComponentFactory<import1.HasTemplateAttributes> get HasTemplateAttributesNgFactory {
  return _HasTemplateAttributesNgFactory;
}

final List<dynamic> styles$HasTemplateAttributesHost = const [];

class _ViewHasTemplateAttributesHost0 extends AppView<import1.HasTemplateAttributes> {
  ViewHasTemplateAttributes0 _compView_0;
  import1.HasTemplateAttributes _HasTemplateAttributes_0_5;
  _ViewHasTemplateAttributesHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasTemplateAttributes> build() {
    _compView_0 = ViewHasTemplateAttributes0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasTemplateAttributes_0_5 = import1.HasTemplateAttributes();
    _compView_0.create(_HasTemplateAttributes_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasTemplateAttributes_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasTemplateAttributes> viewFactory_HasTemplateAttributesHost0() {
  return _ViewHasTemplateAttributesHost0(null, null);
}

final List<dynamic> styles$HasStaticAttribute = const [];

class ViewHasStaticAttribute0 extends AppView<import1.HasStaticAttribute> {
  import6.DivElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasStaticAttribute0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-static-attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasStaticAttribute> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    _el_0 = import10.appendDiv(doc, parentRenderNode);
    init0();
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      import10.setAttribute(_el_0, 'title', 'title');
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasStaticAttribute, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasStaticAttribute> _HasStaticAttributeNgFactory = const ComponentFactory('has-static-attribute', viewFactory_HasStaticAttributeHost0);
ComponentFactory<import1.HasStaticAttribute> get HasStaticAttributeNgFactory {
  return _HasStaticAttributeNgFactory;
}

final List<dynamic> styles$HasStaticAttributeHost = const [];

class _ViewHasStaticAttributeHost0 extends AppView<import1.HasStaticAttribute> {
  ViewHasStaticAttribute0 _compView_0;
  import1.HasStaticAttribute _HasStaticAttribute_0_5;
  _ViewHasStaticAttributeHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasStaticAttribute> build() {
    _compView_0 = ViewHasStaticAttribute0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasStaticAttribute_0_5 = import1.HasStaticAttribute();
    _compView_0.create(_HasStaticAttribute_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasStaticAttribute_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasStaticAttribute> viewFactory_HasStaticAttributeHost0() {
  return _ViewHasStaticAttributeHost0(null, null);
}

final List<dynamic> styles$HasHostClass = const [];

class ViewHasHostClass0 extends AppView<import1.HasHostClass> {
  bool _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasHostClass0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-host-class');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasHostClass> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  void detectHostChanges(bool firstCheck) {
    final _ctx = ctx;
    final currVal_0 = _ctx.fancy;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import10.updateClassBindingNonHtml(rootEl, 'fancy', currVal_0);
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasHostClass, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasHostClass> _HasHostClassNgFactory = const ComponentFactory('has-host-class', viewFactory_HasHostClassHost0);
ComponentFactory<import1.HasHostClass> get HasHostClassNgFactory {
  return _HasHostClassNgFactory;
}

final List<dynamic> styles$HasHostClassHost = const [];

class _ViewHasHostClassHost0 extends AppView<import1.HasHostClass> {
  ViewHasHostClass0 _compView_0;
  import1.HasHostClass _HasHostClass_0_5;
  _ViewHasHostClassHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasHostClass> build() {
    _compView_0 = ViewHasHostClass0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasHostClass_0_5 = import1.HasHostClass();
    _compView_0.create(_HasHostClass_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasHostClass_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasHostClass> viewFactory_HasHostClassHost0() {
  return _ViewHasHostClassHost0(null, null);
}

final List<dynamic> styles$HasTemplateClass = const [];

class ViewHasTemplateClass0 extends AppView<import1.HasTemplateClass> {
  bool _expr_0;
  import6.DivElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasTemplateClass0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-template-class');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasTemplateClass> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    _el_0 = import10.appendDiv(doc, parentRenderNode);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.fancy;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import10.updateClassBinding(_el_0, 'fancy', currVal_0);
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasTemplateClass, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasTemplateClass> _HasTemplateClassNgFactory = const ComponentFactory('has-template-class', viewFactory_HasTemplateClassHost0);
ComponentFactory<import1.HasTemplateClass> get HasTemplateClassNgFactory {
  return _HasTemplateClassNgFactory;
}

final List<dynamic> styles$HasTemplateClassHost = const [];

class _ViewHasTemplateClassHost0 extends AppView<import1.HasTemplateClass> {
  ViewHasTemplateClass0 _compView_0;
  import1.HasTemplateClass _HasTemplateClass_0_5;
  _ViewHasTemplateClassHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasTemplateClass> build() {
    _compView_0 = ViewHasTemplateClass0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasTemplateClass_0_5 = import1.HasTemplateClass();
    _compView_0.create(_HasTemplateClass_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasTemplateClass_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasTemplateClass> viewFactory_HasTemplateClassHost0() {
  return _ViewHasTemplateClassHost0(null, null);
}

final List<dynamic> styles$HasStyleProperty = const [];

class ViewHasStyleProperty0 extends AppView<import1.HasStyleProperty> {
  var _expr_0;
  var _expr_1;
  import6.DivElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewHasStyleProperty0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-style-property');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/templates/dom_bindings.dart' : null);
  }

  @override
  ComponentRef<import1.HasStyleProperty> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    _el_0 = import10.appendDiv(doc, parentRenderNode);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.width;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _el_0.style.setProperty('width', currVal_0?.toString());
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.height;
    if (import9.checkBinding(_expr_1, currVal_1)) {
      _el_0.style.setProperty('height', ((currVal_1 == null) ? null : (currVal_1.toString() + 'px')));
      _expr_1 = currVal_1;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasStyleProperty, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasStyleProperty> _HasStylePropertyNgFactory = const ComponentFactory('has-style-property', viewFactory_HasStylePropertyHost0);
ComponentFactory<import1.HasStyleProperty> get HasStylePropertyNgFactory {
  return _HasStylePropertyNgFactory;
}

final List<dynamic> styles$HasStylePropertyHost = const [];

class _ViewHasStylePropertyHost0 extends AppView<import1.HasStyleProperty> {
  ViewHasStyleProperty0 _compView_0;
  import1.HasStyleProperty _HasStyleProperty_0_5;
  _ViewHasStylePropertyHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasStyleProperty> build() {
    _compView_0 = ViewHasStyleProperty0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasStyleProperty_0_5 = import1.HasStyleProperty();
    _compView_0.create(_HasStyleProperty_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _HasStyleProperty_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasStyleProperty> viewFactory_HasStylePropertyHost0() {
  return _ViewHasStylePropertyHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HasHostAttributes, HasHostAttributesNgFactory);
  _ngRef.registerComponent(HasTemplateAttributes, HasTemplateAttributesNgFactory);
  _ngRef.registerComponent(HasStaticAttribute, HasStaticAttributeNgFactory);
  _ngRef.registerComponent(HasHostClass, HasHostClassNgFactory);
  _ngRef.registerComponent(HasTemplateClass, HasTemplateClassNgFactory);
  _ngRef.registerComponent(HasStyleProperty, HasStylePropertyNgFactory);
  _ref0.initReflector();
}
