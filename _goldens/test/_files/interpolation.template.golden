// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'interpolation.dart';
export 'interpolation.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'interpolation.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/runtime/dom_helpers.dart' as import3;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import11;
import 'package:angular/src/core/linker/template_ref.dart';

final List<dynamic> styles$InterpolationComponent = const [];

class ViewInterpolationComponent0 extends AppView<import1.InterpolationComponent> {
  var _expr_0;
  final import2.Text _text_3 = import3.createText('');
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import3.appendText(parentRenderNode, '    ');
    final doc = import2.document;
    final _el_1 = import3.appendDiv(doc, parentRenderNode);
    final _text_2 = import3.appendText(_el_1, '\n      ');
    _el_1.append(_text_3);
    final _text_4 = import3.appendText(_el_1, '\n    ');
    final _text_5 = import3.appendText(parentRenderNode, '\n  ');
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.foo ?? '');
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_3.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationComponent> viewFactory_InterpolationComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationComponent> _InterpolationComponentNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationComponentHost0);
ComponentFactory<import1.InterpolationComponent> get InterpolationComponentNgFactory {
  return _InterpolationComponentNgFactory;
}

final List<dynamic> styles$InterpolationComponentHost = const [];

class _ViewInterpolationComponentHost0 extends AppView<import1.InterpolationComponent> {
  ViewInterpolationComponent0 _compView_0;
  import1.InterpolationComponent _InterpolationComponent_0_5;
  _ViewInterpolationComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationComponent> build() {
    _compView_0 = ViewInterpolationComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponent_0_5 = import1.InterpolationComponent();
    _compView_0.create(_InterpolationComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationComponent> viewFactory_InterpolationComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationComponentNoWhitespace = const [];

class ViewInterpolationComponentNoWhitespace0 extends AppView<import1.InterpolationComponentNoWhitespace> {
  var _expr_0;
  final import2.Text _text_1 = import3.createText('');
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationComponentNoWhitespace0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationComponentNoWhitespace> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import2.document;
    final _el_0 = import3.appendDiv(doc, parentRenderNode);
    _el_0.append(_text_1);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.foo ?? '');
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationComponentNoWhitespace, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationComponentNoWhitespace> viewFactory_InterpolationComponentNoWhitespace0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationComponentNoWhitespace0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationComponentNoWhitespace> _InterpolationComponentNoWhitespaceNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationComponentNoWhitespaceHost0);
ComponentFactory<import1.InterpolationComponentNoWhitespace> get InterpolationComponentNoWhitespaceNgFactory {
  return _InterpolationComponentNoWhitespaceNgFactory;
}

final List<dynamic> styles$InterpolationComponentNoWhitespaceHost = const [];

class _ViewInterpolationComponentNoWhitespaceHost0 extends AppView<import1.InterpolationComponentNoWhitespace> {
  ViewInterpolationComponentNoWhitespace0 _compView_0;
  import1.InterpolationComponentNoWhitespace _InterpolationComponentNoWhitespace_0_5;
  _ViewInterpolationComponentNoWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationComponentNoWhitespace> build() {
    _compView_0 = ViewInterpolationComponentNoWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponentNoWhitespace_0_5 = import1.InterpolationComponentNoWhitespace();
    _compView_0.create(_InterpolationComponentNoWhitespace_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationComponentNoWhitespace_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationComponentNoWhitespace> viewFactory_InterpolationComponentNoWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationComponentNoWhitespaceHost0(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationTwoAdjacent = const [];

class ViewInterpolationTwoAdjacent0 extends AppView<import1.InterpolationTwoAdjacent> {
  var _expr_0;
  var _expr_1;
  final import2.Text _text_1 = import3.createText('');
  final import2.Text _text_3 = import3.createText('');
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationTwoAdjacent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationTwoAdjacent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import2.document;
    final _el_0 = import3.appendDiv(doc, parentRenderNode);
    _el_0.append(_text_1);
    final _text_2 = import3.appendText(_el_0, ' ');
    _el_0.append(_text_3);
    final _text_4 = import3.appendText(_el_0, '!');
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.greeting ?? '');
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = (_ctx.noun ?? '');
    if (import9.checkBinding(_expr_1, currVal_1)) {
      _text_3.text = currVal_1;
      _expr_1 = currVal_1;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationTwoAdjacent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationTwoAdjacent> viewFactory_InterpolationTwoAdjacent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationTwoAdjacent0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationTwoAdjacent> _InterpolationTwoAdjacentNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationTwoAdjacentHost0);
ComponentFactory<import1.InterpolationTwoAdjacent> get InterpolationTwoAdjacentNgFactory {
  return _InterpolationTwoAdjacentNgFactory;
}

final List<dynamic> styles$InterpolationTwoAdjacentHost = const [];

class _ViewInterpolationTwoAdjacentHost0 extends AppView<import1.InterpolationTwoAdjacent> {
  ViewInterpolationTwoAdjacent0 _compView_0;
  import1.InterpolationTwoAdjacent _InterpolationTwoAdjacent_0_5;
  _ViewInterpolationTwoAdjacentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationTwoAdjacent> build() {
    _compView_0 = ViewInterpolationTwoAdjacent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationTwoAdjacent_0_5 = import1.InterpolationTwoAdjacent();
    _compView_0.create(_InterpolationTwoAdjacent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationTwoAdjacent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationTwoAdjacent> viewFactory_InterpolationTwoAdjacentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationTwoAdjacentHost0(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLongerSentence = const [];

class ViewInterpolationLongerSentence0 extends AppView<import1.InterpolationLongerSentence> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  final import2.Text _text_2 = import3.createText('');
  final import2.Text _text_4 = import3.createText('');
  final import2.Text _text_6 = import3.createText('');
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationLongerSentence0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationLongerSentence> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import2.document;
    final _el_0 = import3.appendDiv(doc, parentRenderNode);
    final _text_1 = import3.appendText(_el_0, 'Welcome ');
    _el_0.append(_text_2);
    final _text_3 = import3.appendText(_el_0, ' to the ');
    _el_0.append(_text_4);
    final _text_5 = import3.appendText(_el_0, ' of ');
    _el_0.append(_text_6);
    final _text_7 = import3.appendText(_el_0, '!');
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.name ?? '');
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_2.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = (_ctx.business ?? '');
    if (import9.checkBinding(_expr_1, currVal_1)) {
      _text_4.text = currVal_1;
      _expr_1 = currVal_1;
    }
    final currVal_2 = (_ctx.location ?? '');
    if (import9.checkBinding(_expr_2, currVal_2)) {
      _text_6.text = currVal_2;
      _expr_2 = currVal_2;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationLongerSentence, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationLongerSentence> viewFactory_InterpolationLongerSentence0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationLongerSentence0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationLongerSentence> _InterpolationLongerSentenceNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLongerSentenceHost0);
ComponentFactory<import1.InterpolationLongerSentence> get InterpolationLongerSentenceNgFactory {
  return _InterpolationLongerSentenceNgFactory;
}

final List<dynamic> styles$InterpolationLongerSentenceHost = const [];

class _ViewInterpolationLongerSentenceHost0 extends AppView<import1.InterpolationLongerSentence> {
  ViewInterpolationLongerSentence0 _compView_0;
  import1.InterpolationLongerSentence _InterpolationLongerSentence_0_5;
  _ViewInterpolationLongerSentenceHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationLongerSentence> build() {
    _compView_0 = ViewInterpolationLongerSentence0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationLongerSentence_0_5 = import1.InterpolationLongerSentence();
    _compView_0.create(_InterpolationLongerSentence_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationLongerSentence_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationLongerSentence> viewFactory_InterpolationLongerSentenceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationLongerSentenceHost0(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLiterals = const [];

class ViewInterpolationLiterals0 extends AppView<import1.InterpolationLiterals> {
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationLiterals0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationLiterals> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import2.document;
    final _el_0 = import3.appendDiv(doc, parentRenderNode);
    final _text_1 = import3.appendText(_el_0, 'Welcome');
    final _text_2 = import3.appendText(_el_0, ' ');
    final _text_3 = import3.appendText(_el_0, 'Home');
    final _text_4 = import3.appendText(_el_0, '!');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationLiterals, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationLiterals> viewFactory_InterpolationLiterals0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationLiterals0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationLiterals> _InterpolationLiteralsNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLiteralsHost0);
ComponentFactory<import1.InterpolationLiterals> get InterpolationLiteralsNgFactory {
  return _InterpolationLiteralsNgFactory;
}

final List<dynamic> styles$InterpolationLiteralsHost = const [];

class _ViewInterpolationLiteralsHost0 extends AppView<import1.InterpolationLiterals> {
  ViewInterpolationLiterals0 _compView_0;
  import1.InterpolationLiterals _InterpolationLiterals_0_5;
  _ViewInterpolationLiteralsHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationLiterals> build() {
    _compView_0 = ViewInterpolationLiterals0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationLiterals_0_5 = import1.InterpolationLiterals();
    _compView_0.create(_InterpolationLiterals_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationLiterals_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationLiterals> viewFactory_InterpolationLiteralsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationLiteralsHost0(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLocals = const [];

class ViewInterpolationLocals0 extends AppView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import11.NgFor _NgFor_0_9;
  var _expr_0;
  static import4.ComponentStyles _componentStyles;
  ViewInterpolationLocals0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  ComponentRef<import1.InterpolationLocals> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import3.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_InterpolationLocals1);
    _NgFor_0_9 = import11.NgFor(_appEl_0, _TemplateRef_0_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.bars;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _NgFor_0_9.ngForOf = currVal_0;
      _expr_0 = currVal_0;
    }
    if (!import9.AppViewUtils.throwOnChanges) {
      _NgFor_0_9.ngDoCheck();
    }
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InterpolationLocals, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InterpolationLocals> viewFactory_InterpolationLocals0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInterpolationLocals0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationLocals> _InterpolationLocalsNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLocalsHost0);
ComponentFactory<import1.InterpolationLocals> get InterpolationLocalsNgFactory {
  return _InterpolationLocalsNgFactory;
}

class _ViewInterpolationLocals1 extends AppView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import11.NgFor _NgFor_0_9;
  var _expr_0;
  _ViewInterpolationLocals1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationLocals> build() {
    final _anchor_0 = import3.createAnchor();
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_InterpolationLocals2);
    _NgFor_0_9 = import11.NgFor(_appEl_0, _TemplateRef_0_8);
    init0(_appEl_0);
  }

  @override
  void detectChangesInternal() {
    final local_bar = locals['\$implicit'];
    final currVal_0 = local_bar;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _NgFor_0_9.ngForOf = currVal_0;
      _expr_0 = currVal_0;
    }
    if (!import9.AppViewUtils.throwOnChanges) {
      _NgFor_0_9.ngDoCheck();
    }
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }
}

AppView<import1.InterpolationLocals> viewFactory_InterpolationLocals1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationLocals1(parentView, parentIndex);
}

class _ViewInterpolationLocals2 extends AppView<import1.InterpolationLocals> {
  var _expr_0;
  var _expr_1;
  final import2.Text _text_1 = import3.createText('');
  final import2.Text _text_3 = import3.createText('');
  _ViewInterpolationLocals2(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationLocals> build() {
    final _text_0 = import3.createText('Hello ');
    final _text_2 = import3.createText(': ');
    final _text_4 = import3.createText('!');
    init([_text_0, _text_1, _text_2, _text_3, _text_4], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final local_bar = parentView.locals['\$implicit'];
    final local_foo = locals['\$implicit'];
    final currVal_0 = import9.interpolateString0(_ctx.callMethod(local_bar));
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = import9.interpolate0(local_foo);
    if (import9.checkBinding(_expr_1, currVal_1)) {
      _text_3.text = currVal_1;
      _expr_1 = currVal_1;
    }
  }
}

AppView<import1.InterpolationLocals> viewFactory_InterpolationLocals2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationLocals2(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLocalsHost = const [];

class _ViewInterpolationLocalsHost0 extends AppView<import1.InterpolationLocals> {
  ViewInterpolationLocals0 _compView_0;
  import1.InterpolationLocals _InterpolationLocals_0_5;
  _ViewInterpolationLocalsHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InterpolationLocals> build() {
    _compView_0 = ViewInterpolationLocals0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationLocals_0_5 = import1.InterpolationLocals();
    _compView_0.create(_InterpolationLocals_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InterpolationLocals_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InterpolationLocals> viewFactory_InterpolationLocalsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInterpolationLocalsHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InterpolationComponent, InterpolationComponentNgFactory);
  _ngRef.registerComponent(InterpolationComponentNoWhitespace, InterpolationComponentNoWhitespaceNgFactory);
  _ngRef.registerComponent(InterpolationTwoAdjacent, InterpolationTwoAdjacentNgFactory);
  _ngRef.registerComponent(InterpolationLongerSentence, InterpolationLongerSentenceNgFactory);
  _ngRef.registerComponent(InterpolationLiterals, InterpolationLiteralsNgFactory);
  _ngRef.registerComponent(InterpolationLocals, InterpolationLocalsNgFactory);
  _ref0.initReflector();
}
