// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'interpolation.dart';
export 'interpolation.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'interpolation.dart' as import1;
import 'package:angular/src/runtime/text_binding.dart' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/view.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/runtime/interpolate.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import11;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import13;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import15;
import 'package:angular/src/core/linker/views/render_view.dart' as import16;
import 'dart:core';

final List<dynamic> styles$InterpolationComponent = const [];

// View for component InterpolationComponent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationComponent0 extends import0.ComponentView<import1.InterpolationComponent> {
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationComponent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import8.appendText(parentRenderNode, '    ');
    final doc = import6.document;
    final _el_1 = import8.appendDiv(doc, parentRenderNode);
    final _text_2 = import8.appendText(_el_1, '\n      ');
    _el_1.append(this._textBinding_3.element);
    final _text_4 = import8.appendText(_el_1, '\n    ');
    final _text_5 = import8.appendText(parentRenderNode, '\n  ');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_3.updateText(import9.interpolateString0(_ctx.foo));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationComponent, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationComponent> _InterpolationComponentNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationComponentHost0);
ComponentFactory<import1.InterpolationComponent> get InterpolationComponentNgFactory {
  return _InterpolationComponentNgFactory;
}

final List<dynamic> styles$InterpolationComponentHost = const [];

// Host for component InterpolationComponent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationComponentHost0 extends import11.HostView<import1.InterpolationComponent> {
  @override
  void build() {
    // Child component InterpolationComponent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationComponent();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationComponent> viewFactory_InterpolationComponentHost0() {
  return _ViewInterpolationComponentHost0();
}

final List<dynamic> styles$InterpolationComponentNoWhitespace = const [];

// View for component InterpolationComponentNoWhitespace in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationComponentNoWhitespace0 extends import0.ComponentView<import1.InterpolationComponentNoWhitespace> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationComponentNoWhitespace0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.foo));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationComponentNoWhitespace, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationComponentNoWhitespace> _InterpolationComponentNoWhitespaceNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationComponentNoWhitespaceHost0);
ComponentFactory<import1.InterpolationComponentNoWhitespace> get InterpolationComponentNoWhitespaceNgFactory {
  return _InterpolationComponentNoWhitespaceNgFactory;
}

final List<dynamic> styles$InterpolationComponentNoWhitespaceHost = const [];

// Host for component InterpolationComponentNoWhitespace in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationComponentNoWhitespaceHost0 extends import11.HostView<import1.InterpolationComponentNoWhitespace> {
  @override
  void build() {
    // Child component InterpolationComponentNoWhitespace in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationComponentNoWhitespace0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationComponentNoWhitespace();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationComponentNoWhitespace> viewFactory_InterpolationComponentNoWhitespaceHost0() {
  return _ViewInterpolationComponentNoWhitespaceHost0();
}

final List<dynamic> styles$InterpolationTwoAdjacent = const [];

// View for component InterpolationTwoAdjacent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationTwoAdjacent0 extends import0.ComponentView<import1.InterpolationTwoAdjacent> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationTwoAdjacent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    _el_0.append(this._textBinding_1.element);
    final _text_2 = import8.appendText(_el_0, ' ');
    _el_0.append(this._textBinding_3.element);
    final _text_4 = import8.appendText(_el_0, '!');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.greeting));
    this._textBinding_3.updateText(import9.interpolateString0(_ctx.noun));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationTwoAdjacent, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationTwoAdjacent> _InterpolationTwoAdjacentNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationTwoAdjacentHost0);
ComponentFactory<import1.InterpolationTwoAdjacent> get InterpolationTwoAdjacentNgFactory {
  return _InterpolationTwoAdjacentNgFactory;
}

final List<dynamic> styles$InterpolationTwoAdjacentHost = const [];

// Host for component InterpolationTwoAdjacent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationTwoAdjacentHost0 extends import11.HostView<import1.InterpolationTwoAdjacent> {
  @override
  void build() {
    // Child component InterpolationTwoAdjacent in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationTwoAdjacent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationTwoAdjacent();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationTwoAdjacent> viewFactory_InterpolationTwoAdjacentHost0() {
  return _ViewInterpolationTwoAdjacentHost0();
}

final List<dynamic> styles$InterpolationLongerSentence = const [];

// View for component InterpolationLongerSentence in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationLongerSentence0 extends import0.ComponentView<import1.InterpolationLongerSentence> {
  final import2.TextBinding _textBinding_2 = import2.TextBinding();
  final import2.TextBinding _textBinding_4 = import2.TextBinding();
  final import2.TextBinding _textBinding_6 = import2.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLongerSentence0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Welcome ');
    _el_0.append(this._textBinding_2.element);
    final _text_3 = import8.appendText(_el_0, ' to the ');
    _el_0.append(this._textBinding_4.element);
    final _text_5 = import8.appendText(_el_0, ' of ');
    _el_0.append(this._textBinding_6.element);
    final _text_7 = import8.appendText(_el_0, '!');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_2.updateText(import9.interpolateString0(_ctx.name));
    this._textBinding_4.updateText(import9.interpolateString0(_ctx.business));
    this._textBinding_6.updateText(import9.interpolateString0(_ctx.location));
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLongerSentence, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationLongerSentence> _InterpolationLongerSentenceNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLongerSentenceHost0);
ComponentFactory<import1.InterpolationLongerSentence> get InterpolationLongerSentenceNgFactory {
  return _InterpolationLongerSentenceNgFactory;
}

final List<dynamic> styles$InterpolationLongerSentenceHost = const [];

// Host for component InterpolationLongerSentence in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationLongerSentenceHost0 extends import11.HostView<import1.InterpolationLongerSentence> {
  @override
  void build() {
    // Child component InterpolationLongerSentence in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationLongerSentence0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLongerSentence();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLongerSentence> viewFactory_InterpolationLongerSentenceHost0() {
  return _ViewInterpolationLongerSentenceHost0();
}

final List<dynamic> styles$InterpolationLiterals = const [];

// View for component InterpolationLiterals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationLiterals0 extends import0.ComponentView<import1.InterpolationLiterals> {
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLiterals0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Welcome');
    final _text_2 = import8.appendText(_el_0, ' ');
    final _text_3 = import8.appendText(_el_0, 'Home');
    final _text_4 = import8.appendText(_el_0, '!');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLiterals, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationLiterals> _InterpolationLiteralsNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLiteralsHost0);
ComponentFactory<import1.InterpolationLiterals> get InterpolationLiteralsNgFactory {
  return _InterpolationLiteralsNgFactory;
}

final List<dynamic> styles$InterpolationLiteralsHost = const [];

// Host for component InterpolationLiterals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationLiteralsHost0 extends import11.HostView<import1.InterpolationLiterals> {
  @override
  void build() {
    // Child component InterpolationLiterals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationLiterals0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLiterals();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLiterals> viewFactory_InterpolationLiteralsHost0() {
  return _ViewInterpolationLiteralsHost0();
}

final List<dynamic> styles$InterpolationLocals = const [];

// View for component InterpolationLocals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewInterpolationLocals0 extends import0.ComponentView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import13.NgFor _NgFor_0_9;
  static import3.ComponentStyles _componentStyles;
  ViewInterpolationLocals0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('interpolation');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import8.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InterpolationLocals1);
    this._NgFor_0_9 = import13.NgFor(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.bars, null)) {
        (this._NgFor_0_9.ngForOf = _ctx.bars);
      }
    }
    if ((!import7.debugThrowIfChanged)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$InterpolationLocals, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InterpolationLocals> _InterpolationLocalsNgFactory = const ComponentFactory('interpolation', viewFactory_InterpolationLocalsHost0);
ComponentFactory<import1.InterpolationLocals> get InterpolationLocalsNgFactory {
  return _InterpolationLocalsNgFactory;
}

class _ViewInterpolationLocals1 extends import15.EmbeddedView<import1.InterpolationLocals> {
  ViewContainer _appEl_0;
  import13.NgFor _NgFor_0_9;
  var _expr_0;
  _ViewInterpolationLocals1(import16.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final _anchor_0 = import8.createAnchor();
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InterpolationLocals2);
    this._NgFor_0_9 = import13.NgFor(this._appEl_0, _TemplateRef_0_8);
    this.initRootNode(this._appEl_0);
  }

  @override
  void detectChangesInternal() {
    final local_bar = import7.unsafeCast<List<int>>(this.locals['\$implicit']);
    final currVal_0 = local_bar;
    if (import7.checkBinding(this._expr_0, currVal_0, 'bar', '<FileLocation: 64 asset:_goldens/test/_files/interpolation.dart:2:21>')) {
      this._NgFor_0_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import7.debugThrowIfChanged)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }
}

import15.EmbeddedView<void> viewFactory_InterpolationLocals1(import16.RenderView parentView, int parentIndex) {
  return _ViewInterpolationLocals1(parentView, parentIndex);
}

class _ViewInterpolationLocals2 extends import15.EmbeddedView<import1.InterpolationLocals> {
  final import2.TextBinding _textBinding_1 = import2.TextBinding();
  final import2.TextBinding _textBinding_3 = import2.TextBinding();
  _ViewInterpolationLocals2(import16.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final _text_0 = import8.createText('Hello ');
    final _text_2 = import8.createText(': ');
    final _text_4 = import8.createText('!');
    this.initRootNodesAndSubscriptions([_text_0, this._textBinding_1.element, _text_2, this._textBinding_3.element, _text_4], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final local_bar = import7.unsafeCast<List<int>>(import7.unsafeCast<_ViewInterpolationLocals1>(this.parentView).locals['\$implicit']);
    final local_foo = import7.unsafeCast<int>(this.locals['\$implicit']);
    this._textBinding_1.updateText(import9.interpolateString0(_ctx.callMethod(local_bar)));
    this._textBinding_3.updateText(import9.interpolate0(local_foo));
  }
}

import15.EmbeddedView<void> viewFactory_InterpolationLocals2(import16.RenderView parentView, int parentIndex) {
  return _ViewInterpolationLocals2(parentView, parentIndex);
}

final List<dynamic> styles$InterpolationLocalsHost = const [];

// Host for component InterpolationLocals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewInterpolationLocalsHost0 extends import11.HostView<import1.InterpolationLocals> {
  @override
  void build() {
    // Child component InterpolationLocals in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewInterpolationLocals0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InterpolationLocals();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.InterpolationLocals> viewFactory_InterpolationLocalsHost0() {
  return _ViewInterpolationLocalsHost0();
}

final List<dynamic> styles$Attribute = const [];

// View for component Attribute in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewAttribute0 extends import0.ComponentView<import1.Attribute> {
  var _expr_0;
  var _expr_1;
  import6.Element _el_0;
  import6.Element _el_2;
  static import3.ComponentStyles _componentStyles;
  ViewAttribute0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import6.document;
    this._el_0 = import8.appendElement(doc, parentRenderNode, 'img');
    final _text_1 = import8.appendText(parentRenderNode, ' ');
    this._el_2 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString0(_ctx.altText);
    if (import7.checkBinding(this._expr_0, currVal_0, '\n{{altText}}\n', '<FileLocation: 9 asset:_goldens/test/_files/interpolation.dart:1:10>')) {
      import8.setProperty(this._el_0, 'alt', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = import9.interpolateString2('', _ctx.altText, '\n', _ctx.altText, '');
    if (import7.checkBinding(this._expr_1, currVal_1, '\n{{altText}}\n{{altText}}\n', '<FileLocation: 39 asset:_goldens/test/_files/interpolation.dart:4:10>')) {
      import8.setProperty(this._el_2, 'alt', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$Attribute, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.Attribute> _AttributeNgFactory = const ComponentFactory('attribute', viewFactory_AttributeHost0);
ComponentFactory<import1.Attribute> get AttributeNgFactory {
  return _AttributeNgFactory;
}

final List<dynamic> styles$AttributeHost = const [];

// Host for component Attribute in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewAttributeHost0 extends import11.HostView<import1.Attribute> {
  @override
  void build() {
    // Child component Attribute in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewAttribute0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.Attribute();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.Attribute> viewFactory_AttributeHost0() {
  return _ViewAttributeHost0();
}

final List<dynamic> styles$AttributePW = const [];

// View for component AttributePW in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class ViewAttributePW0 extends import0.ComponentView<import1.AttributePW> {
  var _expr_0;
  var _expr_1;
  import6.Element _el_1;
  import6.Element _el_3;
  static import3.ComponentStyles _componentStyles;
  ViewAttributePW0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import6.document.createElement('attribute');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/interpolation.dart' : null);
  }

  @override
  void build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import8.appendText(parentRenderNode, '    ');
    final doc = import6.document;
    this._el_1 = import8.appendElement(doc, parentRenderNode, 'img');
    final _text_2 = import8.appendText(parentRenderNode, '\n    ');
    this._el_3 = import8.appendElement(doc, parentRenderNode, 'img');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = import9.interpolateString1('\n', _ctx.altText, '\n');
    if (import7.checkBinding(this._expr_0, currVal_0, '\n{{altText}}\n', '<FileLocation: 9 asset:_goldens/test/_files/interpolation.dart:1:10>')) {
      import8.setProperty(this._el_1, 'alt', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = import9.interpolateString2('\n', _ctx.altText, '\n', _ctx.altText, '\n');
    if (import7.checkBinding(this._expr_1, currVal_1, '\n{{altText}}\n{{altText}}\n', '<FileLocation: 39 asset:_goldens/test/_files/interpolation.dart:4:10>')) {
      import8.setProperty(this._el_3, 'alt', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import3.ComponentStyles.unscoped(styles$AttributePW, _debugComponentUrl));
      if (import7.isDevMode) {
        import3.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.AttributePW> _AttributePWNgFactory = const ComponentFactory('attribute', viewFactory_AttributePWHost0);
ComponentFactory<import1.AttributePW> get AttributePWNgFactory {
  return _AttributePWNgFactory;
}

final List<dynamic> styles$AttributePWHost = const [];

// Host for component AttributePW in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
class _ViewAttributePWHost0 extends import11.HostView<import1.AttributePW> {
  @override
  void build() {
    // Child component AttributePW in asset:_goldens/test/_files/interpolation.dart (changeDetection: Default)
    this.componentView = ViewAttributePW0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.AttributePW();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.AttributePW> viewFactory_AttributePWHost0() {
  return _ViewAttributePWHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InterpolationComponent, InterpolationComponentNgFactory);
  _ngRef.registerComponent(InterpolationComponentNoWhitespace, InterpolationComponentNoWhitespaceNgFactory);
  _ngRef.registerComponent(InterpolationTwoAdjacent, InterpolationTwoAdjacentNgFactory);
  _ngRef.registerComponent(InterpolationLongerSentence, InterpolationLongerSentenceNgFactory);
  _ngRef.registerComponent(InterpolationLiterals, InterpolationLiteralsNgFactory);
  _ngRef.registerComponent(InterpolationLocals, InterpolationLocalsNgFactory);
  _ngRef.registerComponent(Attribute, AttributeNgFactory);
  _ngRef.registerComponent(AttributePW, AttributePWNgFactory);
  _ref0.initReflector();
}
