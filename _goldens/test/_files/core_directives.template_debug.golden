// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'core_directives.dart';
export 'core_directives.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import3;
import 'package:angular/src/debug/debug_app_view.dart';
import 'core_directives.dart' as import5;
import 'dart:html' as import6;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart' as import10;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import12;
import 'package:angular/angular.dart';
import 'dart:core';

const List<dynamic> styles$TestFooComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [
  new StaticNodeDebugInfo([NgIf], null, <String, dynamic>{}),
  new StaticNodeDebugInfo([TemplateRef, import3.NgFor], null, <String, dynamic>{})
];

class ViewTestFooComponent0 extends DebugAppView<import5.TestFooComponent> {
  import6.Comment _anchor_0;
  import6.DivElement _el_0_0;
  import6.Text _text_0_1;
  ViewContainer _appEl_1;
  import3.NgFor _NgFor_1_9;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import10.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestFooComponent0) {
    rootEl = import6.document.createElement('test-foo');
    _renderType ??= import12.appViewUtils.createRenderType('asset:_goldens/test/_files/core_directives.dart class TestFooComponent - inline template', ViewEncapsulation.None, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import5.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import6.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_0);
    dbgElm(this, _anchor_0, 0, 0, 9);
    var _anchor_1 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_1);
    dbgElm(this, _anchor_1, 1, 1, 9);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = new TemplateRef(_appEl_1, viewFactory_TestFooComponent2);
    _NgFor_1_9 = new import3.NgFor(_appEl_1, _TemplateRef_1_8);
    init([], null, [_anchor_0, _anchor_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import5.TestFooComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.foo, null)) {
        if (_ctx.foo) {
          var doc = import6.document;
          _el_0_0 = doc.createElement('div');
          dbgElm(this, _el_0_0, 0, 0, 4);
          _text_0_1 = new import6.Text('Foo');
          _el_0_0.append(_text_0_1);
          dbgElm(this, _text_0_1, 1, 0, 21);
          addInlinedNodes(_anchor_0, [_el_0_0], true);
        }
      }
    }
    if (firstCheck) {
      if (!identical(_ctx.bars, null)) {
        (_NgFor_1_9.ngForOf = _ctx.bars);
      }
    }
    if (!import12.AppViewUtils.throwOnChanges) {
      _NgFor_1_9.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1?.destroyNestedViews();
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent2 = [null, null, null];

class _ViewTestFooComponent2 extends DebugAppView<import5.TestFooComponent> {
  import6.DivElement _el_0;
  import6.Element _el_1;
  import6.Text _text_2;
  var _expr_0;
  _ViewTestFooComponent2(AppView<dynamic> parentView, int parentIndex) : super(import10.ViewType.EMBEDDED, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestFooComponent2) {
    componentType = ViewTestFooComponent0._renderType;
  }
  @override
  ComponentRef<import5.TestFooComponent> build() {
    var doc = import6.document;
    _el_0 = doc.createElement('div');
    dbgElm(this, _el_0, 0, 1, 4);
    _el_1 = createSpanAndAppendDbg(this, doc, _el_0, 1, 2, 6);
    _text_2 = new import6.Text('');
    _el_1.append(_text_2);
    dbgElm(this, _text_2, 2, 2, 35);
    _el_1.addEventListener('click', eventHandler1(_handle_click_1_0));
    init0Dbg(_el_0, [_el_0, _el_1, _text_2]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final String local_bar = locals['\$implicit'];
    dbg(2, 2, 35);
    final currVal_0 = import12.interpolate0(local_bar);
    if (import12.checkBinding(_expr_0, currVal_0)) {
      _text_2.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  void _handle_click_1_0($event) {
    final String local_bar = locals['\$implicit'];
    dbg(1, 2, 12);
    ctx.onClick(local_bar);
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent2(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestFooComponent2(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo([import5.TestFooComponent], import5.TestFooComponent, <String, dynamic>{})
];

class _ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import5.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import10.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestFooComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_5 = new import5.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import5.TestFooComponent>(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import5.TestFooComponent> TestFooComponentNgFactory = const ComponentFactory<import5.TestFooComponent>('test-foo', viewFactory_TestFooComponentHost0, _TestFooComponentMetadata);
const _TestFooComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
