// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'empty_properties.dart';
export 'empty_properties.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'empty_properties.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;

final List<dynamic> styles$EmptyPropertiesComponent = const [];

class ViewEmptyPropertiesComponent0 extends AppView<import1.EmptyPropertiesComponent> {
  ViewFancyButtonComponent0 _compView_0;
  import1.FancyButtonComponent _FancyButtonComponent_0_5;
  ViewFancyButtonComponent0 _compView_1;
  import1.FancyButtonComponent _FancyButtonComponent_1_5;
  ViewFancyButtonComponent0 _compView_2;
  import1.FancyButtonComponent _FancyButtonComponent_2_5;
  ViewFancyButtonComponent0 _compView_3;
  import1.FancyButtonComponent _FancyButtonComponent_3_5;
  static import2.ComponentStyles _componentStyles;
  ViewEmptyPropertiesComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('empty-properties');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/empty_properties.dart' : null);
  }

  @override
  ComponentRef<import1.EmptyPropertiesComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewFancyButtonComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    import8.setAttribute(_el_0, 'raised', '');
    _FancyButtonComponent_0_5 = import1.FancyButtonComponent();
    _compView_0.create(_FancyButtonComponent_0_5, []);
    _compView_1 = ViewFancyButtonComponent0(this, 1);
    final _el_1 = _compView_1.rootEl;
    parentRenderNode.append(_el_1);
    _FancyButtonComponent_1_5 = import1.FancyButtonComponent();
    _compView_1.create(_FancyButtonComponent_1_5, []);
    _compView_2 = ViewFancyButtonComponent0(this, 2);
    final _el_2 = _compView_2.rootEl;
    parentRenderNode.append(_el_2);
    _FancyButtonComponent_2_5 = import1.FancyButtonComponent();
    _compView_2.create(_FancyButtonComponent_2_5, []);
    _compView_3 = ViewFancyButtonComponent0(this, 3);
    final _el_3 = _compView_3.rootEl;
    parentRenderNode.append(_el_3);
    _FancyButtonComponent_3_5 = import1.FancyButtonComponent();
    _compView_3.create(_FancyButtonComponent_3_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      _FancyButtonComponent_0_5.raised = true;
      _FancyButtonComponent_1_5.raised = true;
      _FancyButtonComponent_2_5.raised = true;
      _FancyButtonComponent_3_5.raised = false;
    }
    _compView_0.detectChanges();
    _compView_1.detectChanges();
    _compView_2.detectChanges();
    _compView_3.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
    _compView_1.destroy();
    _compView_2.destroy();
    _compView_3.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmptyPropertiesComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.EmptyPropertiesComponent> viewFactory_EmptyPropertiesComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewEmptyPropertiesComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.EmptyPropertiesComponent> _EmptyPropertiesComponentNgFactory = const ComponentFactory('empty-properties', viewFactory_EmptyPropertiesComponentHost0);
ComponentFactory<import1.EmptyPropertiesComponent> get EmptyPropertiesComponentNgFactory {
  return _EmptyPropertiesComponentNgFactory;
}

final List<dynamic> styles$EmptyPropertiesComponentHost = const [];

class _ViewEmptyPropertiesComponentHost0 extends AppView<import1.EmptyPropertiesComponent> {
  ViewEmptyPropertiesComponent0 _compView_0;
  import1.EmptyPropertiesComponent _EmptyPropertiesComponent_0_5;
  _ViewEmptyPropertiesComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmptyPropertiesComponent> build() {
    _compView_0 = ViewEmptyPropertiesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmptyPropertiesComponent_0_5 = import1.EmptyPropertiesComponent();
    _compView_0.create(_EmptyPropertiesComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmptyPropertiesComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.EmptyPropertiesComponent> viewFactory_EmptyPropertiesComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmptyPropertiesComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$FancyButtonComponent = const [];

class ViewFancyButtonComponent0 extends AppView<import1.FancyButtonComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewFancyButtonComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('fancy-button');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/empty_properties.dart' : null);
  }

  @override
  ComponentRef<import1.FancyButtonComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FancyButtonComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.FancyButtonComponent> viewFactory_FancyButtonComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewFancyButtonComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.FancyButtonComponent> _FancyButtonComponentNgFactory = const ComponentFactory('fancy-button', viewFactory_FancyButtonComponentHost0);
ComponentFactory<import1.FancyButtonComponent> get FancyButtonComponentNgFactory {
  return _FancyButtonComponentNgFactory;
}

final List<dynamic> styles$FancyButtonComponentHost = const [];

class _ViewFancyButtonComponentHost0 extends AppView<import1.FancyButtonComponent> {
  ViewFancyButtonComponent0 _compView_0;
  import1.FancyButtonComponent _FancyButtonComponent_0_5;
  _ViewFancyButtonComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.FancyButtonComponent> build() {
    _compView_0 = ViewFancyButtonComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _FancyButtonComponent_0_5 = import1.FancyButtonComponent();
    _compView_0.create(_FancyButtonComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _FancyButtonComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.FancyButtonComponent> viewFactory_FancyButtonComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewFancyButtonComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(EmptyPropertiesComponent, EmptyPropertiesComponentNgFactory);
  _ngRef.registerComponent(FancyButtonComponent, FancyButtonComponentNgFactory);
  _ref0.initReflector();
}
