// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'view_encapsulation.dart';
export 'view_encapsulation.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'view_encapsulated_styles.css.shim.dart' as import0;
import 'package:angular/src/core/linker/app_view.dart';
import 'view_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import10;
import 'package:angular/src/core/linker/template_ref.dart';
import 'view_encapsulated_styles.css.dart' as import12;

final List<dynamic> styles$EmulatedComponent = [import0.styles, '._nghost-%ID%{border:1px solid black}', 'div._ngcontent-%ID%{color:red}'];

class ViewEmulatedComponent0 extends AppView<import2.EmulatedComponent> {
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewEmulatedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('Emulated');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/view_encapsulation.dart' : null);
  }

  @override
  ComponentRef<import2.EmulatedComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import7.document;
    final _el_0 = import10.appendDiv(doc, parentRenderNode);
    addShimC(_el_0);
    final _text_1 = import10.appendText(_el_0, 'Emulated in Component');
    final _anchor_2 = import10.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(_appEl_2, viewFactory_EmulatedComponent1);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.scoped(styles$EmulatedComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import2.EmulatedComponent> viewFactory_EmulatedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewEmulatedComponent0(parentView, parentIndex);
}

const ComponentFactory<import2.EmulatedComponent> _EmulatedComponentNgFactory = const ComponentFactory('Emulated', viewFactory_EmulatedComponentHost0);
ComponentFactory<import2.EmulatedComponent> get EmulatedComponentNgFactory {
  return _EmulatedComponentNgFactory;
}

class _ViewEmulatedComponent1 extends AppView<import2.EmulatedComponent> {
  _ViewEmulatedComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import2.EmulatedComponent> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    addShimC(_el_0);
    final _text_1 = import10.appendText(_el_0, 'Emulated in Template');
    init0(_el_0);
  }
}

AppView<import2.EmulatedComponent> viewFactory_EmulatedComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmulatedComponent1(parentView, parentIndex);
}

final List<dynamic> styles$EmulatedComponentHost = const [];

class _ViewEmulatedComponentHost0 extends AppView<import2.EmulatedComponent> {
  ViewEmulatedComponent0 _compView_0;
  import2.EmulatedComponent _EmulatedComponent_0_5;
  _ViewEmulatedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import2.EmulatedComponent> build() {
    _compView_0 = ViewEmulatedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmulatedComponent_0_5 = import2.EmulatedComponent();
    _compView_0.create(_EmulatedComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmulatedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import2.EmulatedComponent> viewFactory_EmulatedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmulatedComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$NoneComponent = [import12.styles, ':host { border: 1px solid #000; } ', 'div { color: red; }'];

class ViewNoneComponent0 extends AppView<import2.NoneComponent> {
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewNoneComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('None');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/view_encapsulation.dart' : null);
  }

  @override
  ComponentRef<import2.NoneComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import7.document;
    final _el_0 = import10.appendDiv(doc, parentRenderNode);
    final _text_1 = import10.appendText(_el_0, 'Emulated in Component');
    final _anchor_2 = import10.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(_appEl_2, viewFactory_NoneComponent1);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$NoneComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import2.NoneComponent> viewFactory_NoneComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewNoneComponent0(parentView, parentIndex);
}

const ComponentFactory<import2.NoneComponent> _NoneComponentNgFactory = const ComponentFactory('None', viewFactory_NoneComponentHost0);
ComponentFactory<import2.NoneComponent> get NoneComponentNgFactory {
  return _NoneComponentNgFactory;
}

class _ViewNoneComponent1 extends AppView<import2.NoneComponent> {
  _ViewNoneComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import2.NoneComponent> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import10.appendText(_el_0, 'Emulated in Template');
    init0(_el_0);
  }
}

AppView<import2.NoneComponent> viewFactory_NoneComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNoneComponent1(parentView, parentIndex);
}

final List<dynamic> styles$NoneComponentHost = const [];

class _ViewNoneComponentHost0 extends AppView<import2.NoneComponent> {
  ViewNoneComponent0 _compView_0;
  import2.NoneComponent _NoneComponent_0_5;
  _ViewNoneComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import2.NoneComponent> build() {
    _compView_0 = ViewNoneComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _NoneComponent_0_5 = import2.NoneComponent();
    _compView_0.create(_NoneComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _NoneComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import2.NoneComponent> viewFactory_NoneComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNoneComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(EmulatedComponent, EmulatedComponentNgFactory);
  _ngRef.registerComponent(NoneComponent, NoneComponentNgFactory);
  _ref0.initReflector();
}
