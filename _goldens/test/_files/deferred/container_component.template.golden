// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

import 'container_component.dart';
export 'container_component.dart';
import 'package:angular/angular.dart';
import 'package:_goldens/component.dart';
import 'deferred_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'container_component.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'dart:html' as import4;
import 'deferred_component.template.dart' as import5;
import 'deferred_component.dart' as import6;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import8;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import10;
import 'package:angular/src/runtime.dart' as import11;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'deferred_component.dart' deferred as deflib0;
import 'deferred_component.template.dart' deferred as deflib1;

final List<dynamic> styles$TestContainerComponent = const [];

class ViewTestContainerComponent0 extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  ViewContainer _appEl_2;
  bool _query_queryMe_1_0_isDirty = true;
  NgIf _NgIf_2_9;
  ViewContainer _appEl_3;
  void Function() _cancelDeferredLoad3;
  ViewContainer _appEl_4;
  void Function() _cancelDeferredLoad4;
  import4.Element _el_5;
  import5.ViewNotDeferredChildComponent0 _compView_5;
  import6.NotDeferredChildComponent _NotDeferredChildComponent_5_5;
  static RenderComponentType _renderType;
  ViewTestContainerComponent0(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import4.document.createElement('test-container');
    _renderType ??= import10.appViewUtils.createRenderType((import11.isDevMode ? 'asset:_goldens/test/_files/deferred/container_component.dart' : null), ViewEncapsulation.None, styles$TestContainerComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final _rootEl = rootEl;
    final import4.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_0);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_TestContainerComponent1);
    _cancelDeferredLoad0 = loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_0, _TemplateRef_0_8);
    final _anchor_1 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_1);
    _appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_TestContainerComponent2);
    _NgIf_1_9 = NgIf(_appEl_1, _TemplateRef_1_8);
    final _anchor_2 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_2);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(_appEl_2, viewFactory_TestContainerComponent4);
    _NgIf_2_9 = NgIf(_appEl_2, _TemplateRef_2_8);
    final _anchor_3 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_3);
    _appEl_3 = ViewContainer(3, null, this, _anchor_3);
    TemplateRef _TemplateRef_3_8 = TemplateRef(_appEl_3, viewFactory_TestContainerComponent6);
    _cancelDeferredLoad3 = loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_3, _TemplateRef_3_8);
    final _anchor_4 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_4);
    _appEl_4 = ViewContainer(4, null, this, _anchor_4);
    TemplateRef _TemplateRef_4_8 = TemplateRef(_appEl_4, viewFactory_TestContainerComponent7);
    _cancelDeferredLoad4 = loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_4, _TemplateRef_4_8);
    _compView_5 = import5.ViewNotDeferredChildComponent0(this, 5);
    _el_5 = _compView_5.rootEl;
    parentRenderNode.append(_el_5);
    _NotDeferredChildComponent_5_5 = import6.NotDeferredChildComponent();
    _compView_5.create(_NotDeferredChildComponent_5_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_1_9.ngIf = _ctx.showDeferredChild;
    _NgIf_2_9.ngIf = _ctx.showDeferredChild;
    _appEl_0.detectChangesInNestedViews();
    _appEl_1.detectChangesInNestedViews();
    _appEl_2.detectChangesInNestedViews();
    _appEl_3.detectChangesInNestedViews();
    _appEl_4.detectChangesInNestedViews();
    if (!import10.AppViewUtils.throwOnChanges) {
      if (_query_queryMe_1_0_isDirty) {
        ctx.queryDeferredChild = import10.firstOrNull(_appEl_2.mapNestedViews((_ViewTestContainerComponent4 nestedView) {
          return nestedView._appEl_1.mapNestedViews((_ViewTestContainerComponent5 nestedView) {
            return [nestedView._DeferredChild3Component_0_5];
          });
        }));
        _query_queryMe_1_0_isDirty = false;
      }
    }
    _compView_5.detectChanges();
  }

  @override
  void destroyInternal() {
    _appEl_0?.destroyNestedViews();
    _appEl_1?.destroyNestedViews();
    _appEl_2?.destroyNestedViews();
    _appEl_3?.destroyNestedViews();
    _appEl_4?.destroyNestedViews();
    _compView_5?.destroy();
    _cancelDeferredLoad0();
    _cancelDeferredLoad3();
    _cancelDeferredLoad4();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewTestContainerComponent0(parentView, parentIndex);
}

class _ViewTestContainerComponent1 extends AppView<import1.TestContainerComponent> {
  import4.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChild1Component_0_5;
  _ViewTestContainerComponent1(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = import5.viewFactory_DeferredChild1Component0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChild1Component_0_5 = import6.DeferredChild1Component();
    _compView_0.create(_DeferredChild1Component_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent1(parentView, parentIndex);
}

class _ViewTestContainerComponent2 extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  _ViewTestContainerComponent2(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final _anchor_0 = createViewContainerAnchor();
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_TestContainerComponent3);
    _cancelDeferredLoad0 = loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_0, _TemplateRef_0_8);
    init0(_appEl_0);
  }

  @override
  void detectChangesInternal() {
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0?.destroyNestedViews();
    _cancelDeferredLoad0();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent2(parentView, parentIndex);
}

class _ViewTestContainerComponent3 extends AppView<import1.TestContainerComponent> {
  import4.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChild2Component_0_5;
  _ViewTestContainerComponent3(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = import5.viewFactory_DeferredChild2Component0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChild2Component_0_5 = import6.DeferredChild2Component();
    _compView_0.create(_DeferredChild2Component_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent3(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent3(parentView, parentIndex);
}

class _ViewTestContainerComponent4 extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_1;
  void Function() _cancelDeferredLoad1;
  _ViewTestContainerComponent4(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    var doc = import4.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = createViewContainerAnchor();
    _el_0.append(_anchor_1);
    _appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_TestContainerComponent5);
    _cancelDeferredLoad1 = loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_1, _TemplateRef_1_8);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1?.destroyNestedViews();
    _cancelDeferredLoad1();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent4(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent4(parentView, parentIndex);
}

class _ViewTestContainerComponent5 extends AppView<import1.TestContainerComponent> {
  import4.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChild3Component_0_5;
  _ViewTestContainerComponent5(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = import5.viewFactory_DeferredChild3Component0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChild3Component_0_5 = import6.DeferredChild3Component();
    _compView_0.create(_DeferredChild3Component_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import11.unsafeCast<ViewTestContainerComponent0>(parentView.parentView)._query_queryMe_1_0_isDirty = true;
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent5(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent5(parentView, parentIndex);
}

class _ViewTestContainerComponent6 extends AppView<import1.TestContainerComponent> {
  import4.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChildComponentWithoutNgContent_0_5;
  _ViewTestContainerComponent6(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = import5.viewFactory_DeferredChildComponentWithoutNgContent0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChildComponentWithoutNgContent_0_5 = import6.DeferredChildComponentWithoutNgContent();
    final _text_1 = import4.Text('Hello World');
    _compView_0.create(_DeferredChildComponentWithoutNgContent_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent6(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent6(parentView, parentIndex);
}

class _ViewTestContainerComponent7 extends AppView<import1.TestContainerComponent> {
  import4.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChildComponentWithNgContent_0_5;
  _ViewTestContainerComponent7(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = import5.viewFactory_DeferredChildComponentWithNgContent0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChildComponentWithNgContent_0_5 = import6.DeferredChildComponentWithNgContent();
    final _text_1 = import4.Text('Hello World');
    _compView_0.create(_DeferredChildComponentWithNgContent_0_5, [
      [_text_1]
    ]);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent7(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponent7(parentView, parentIndex);
}

final List<dynamic> styles$TestContainerComponentHost = const [];

class _ViewTestContainerComponentHost0 extends AppView<import1.TestContainerComponent> {
  ViewTestContainerComponent0 _compView_0;
  import1.TestContainerComponent _TestContainerComponent_0_5;
  _ViewTestContainerComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import8.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    _compView_0 = ViewTestContainerComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestContainerComponent_0_5 = import1.TestContainerComponent();
    _compView_0.create(_TestContainerComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _TestContainerComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestContainerComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.TestContainerComponent> _TestContainerComponentNgFactory = const ComponentFactory('test-container', viewFactory_TestContainerComponentHost0);
ComponentFactory<import1.TestContainerComponent> get TestContainerComponentNgFactory {
  return _TestContainerComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestContainerComponent, TestContainerComponentNgFactory);
  _ref0.initReflector();
}
