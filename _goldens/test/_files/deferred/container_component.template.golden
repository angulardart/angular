// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'container_component.dart';
export 'container_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'container_component.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'deferred_component.template.dart' as import4;
import 'deferred_component.dart' as import5;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import6;
import 'package:angular/src/core/linker/views/render_view.dart' as import7;
import 'package:angular/src/core/linker/view_type.dart' as import8;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import10;
import 'package:angular/src/runtime.dart' as import11;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import13;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import15;
import 'package:angular/src/runtime/queries.dart' as import16;
import 'external_service.dart' as import17;
import 'deferred_component.dart' deferred as deflib0;
import 'deferred_component.template.dart' deferred as deflib1;

final List<dynamic> styles$TestContainerComponent = const [];

// View for component TestContainerComponent in asset:_goldens/test/_files/deferred/container_component.dart (changeDetection: Default)
class ViewTestContainerComponent0 extends AppView<import1.TestContainerComponent> {
  bool _query_queryMe_1_0_isDirty = true;
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  ViewContainer _appEl_2;
  NgIf _NgIf_2_9;
  ViewContainer _appEl_3;
  void Function() _cancelDeferredLoad3;
  ViewContainer _appEl_4;
  void Function() _cancelDeferredLoad4;
  import4.ViewNotDeferredChildComponent0 _compView_5;
  import5.NotDeferredChildComponent _NotDeferredChildComponent_5_5;
  ViewContainer _appEl_6;
  void Function() _cancelDeferredLoad6;
  static import6.ComponentStyles _componentStyles;
  ViewTestContainerComponent0(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import10.document.createElement('test-container');
  }
  static String get _debugComponentUrl {
    return (import11.isDevMode ? 'asset:_goldens/test/_files/deferred/container_component.dart' : null);
  }

  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final import10.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import13.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_TestContainerComponent1);
    this._cancelDeferredLoad0 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import13.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_TestContainerComponent2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    final _anchor_2 = import13.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(this._appEl_2, viewFactory_TestContainerComponent4);
    this._NgIf_2_9 = NgIf(this._appEl_2, _TemplateRef_2_8);
    final _anchor_3 = import13.appendAnchor(parentRenderNode);
    this._appEl_3 = ViewContainer(3, null, this, _anchor_3);
    TemplateRef _TemplateRef_3_8 = TemplateRef(this._appEl_3, viewFactory_TestContainerComponent6);
    this._cancelDeferredLoad3 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_3, _TemplateRef_3_8);
    final _anchor_4 = import13.appendAnchor(parentRenderNode);
    this._appEl_4 = ViewContainer(4, null, this, _anchor_4);
    TemplateRef _TemplateRef_4_8 = TemplateRef(this._appEl_4, viewFactory_TestContainerComponent7);
    this._cancelDeferredLoad4 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_4, _TemplateRef_4_8);
    // Child component NotDeferredChildComponent in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_5 = deflib1.ViewNotDeferredChildComponent0(this, 5);
    final _el_5 = this._compView_5.rootEl;
    parentRenderNode.append(_el_5);
    this._NotDeferredChildComponent_5_5 = deflib0.NotDeferredChildComponent();
    this._compView_5.create0(this._NotDeferredChildComponent_5_5);
    final _anchor_6 = import13.appendAnchor(parentRenderNode);
    this._appEl_6 = ViewContainer(6, null, this, _anchor_6);
    TemplateRef _TemplateRef_6_8 = TemplateRef(this._appEl_6, viewFactory_TestContainerComponent8);
    this._cancelDeferredLoad6 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_6, _TemplateRef_6_8);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.showDeferredChild;
    this._NgIf_2_9.ngIf = _ctx.showDeferredChild;
    this._appEl_0.detectChangesInNestedViews();
    this._appEl_1.detectChangesInNestedViews();
    this._appEl_2.detectChangesInNestedViews();
    this._appEl_3.detectChangesInNestedViews();
    this._appEl_4.detectChangesInNestedViews();
    this._appEl_6.detectChangesInNestedViews();
    if ((!import11.debugThrowIfChanged)) {
      if (this._query_queryMe_1_0_isDirty) {
        _ctx.queryDeferredChild = import16.firstOrNull(this._appEl_2.mapNestedViews((_ViewTestContainerComponent4 nestedView) {
          return nestedView._appEl_1.mapNestedViews((_ViewTestContainerComponent5 nestedView) {
            return [nestedView._DeferredChild3Component_0_5];
          });
        }));
        this._query_queryMe_1_0_isDirty = false;
      }
    }
    this._compView_5.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._appEl_1.destroyNestedViews();
    this._appEl_2.destroyNestedViews();
    this._appEl_3.destroyNestedViews();
    this._appEl_4.destroyNestedViews();
    this._appEl_6.destroyNestedViews();
    this._compView_5.destroyInternalState();
    this._cancelDeferredLoad0();
    this._cancelDeferredLoad3();
    this._cancelDeferredLoad4();
    this._cancelDeferredLoad6();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import6.ComponentStyles.unscoped(styles$TestContainerComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.TestContainerComponent> _TestContainerComponentNgFactory = const ComponentFactory('test-container', viewFactory_TestContainerComponentHost0);
ComponentFactory<import1.TestContainerComponent> get TestContainerComponentNgFactory {
  return _TestContainerComponentNgFactory;
}

class _ViewTestContainerComponent1 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  dynamic _DeferredChild1Component_0_5;
  _ViewTestContainerComponent1(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChild1Component in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChild1Component0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._DeferredChild1Component_0_5 = deflib0.DeferredChild1Component();
    this._compView_0.create0(this._DeferredChild1Component_0_5);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent1(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent1(parentView, parentIndex);
}

class _ViewTestContainerComponent2 extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  void Function() _cancelDeferredLoad0;
  _ViewTestContainerComponent2(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final _anchor_0 = import13.createAnchor();
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_TestContainerComponent3);
    this._cancelDeferredLoad0 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_0, _TemplateRef_0_8);
    this.init1(this._appEl_0);
  }

  @override
  void detectChangesInternal() {
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._cancelDeferredLoad0();
  }
}

AppView<void> viewFactory_TestContainerComponent2(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent2(parentView, parentIndex);
}

class _ViewTestContainerComponent3 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  dynamic _DeferredChild2Component_0_5;
  _ViewTestContainerComponent3(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChild2Component in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChild2Component0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._DeferredChild2Component_0_5 = deflib0.DeferredChild2Component();
    this._compView_0.create0(this._DeferredChild2Component_0_5);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent3(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent3(parentView, parentIndex);
}

class _ViewTestContainerComponent4 extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_1;
  void Function() _cancelDeferredLoad1;
  _ViewTestContainerComponent4(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    final doc = import10.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import13.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_TestContainerComponent5);
    this._cancelDeferredLoad1 = import15.loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, this._appEl_1, _TemplateRef_1_8);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
    this._cancelDeferredLoad1();
  }
}

AppView<void> viewFactory_TestContainerComponent4(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent4(parentView, parentIndex);
}

class _ViewTestContainerComponent5 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  dynamic _DeferredChild3Component_0_5;
  _ViewTestContainerComponent5(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChild3Component in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChild3Component0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._DeferredChild3Component_0_5 = deflib0.DeferredChild3Component();
    this._compView_0.create0(this._DeferredChild3Component_0_5);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void dirtyParentQueriesInternal() {
    import11.unsafeCast<ViewTestContainerComponent0>(this.parentView.parentView)._query_queryMe_1_0_isDirty = true;
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent5(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent5(parentView, parentIndex);
}

class _ViewTestContainerComponent6 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  dynamic _DeferredChildComponentWithoutNgContent_0_5;
  _ViewTestContainerComponent6(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChildComponentWithoutNgContent in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChildComponentWithoutNgContent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._DeferredChildComponentWithoutNgContent_0_5 = deflib0.DeferredChildComponentWithoutNgContent();
    this._compView_0.create0(this._DeferredChildComponentWithoutNgContent_0_5);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent6(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent6(parentView, parentIndex);
}

class _ViewTestContainerComponent7 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  dynamic _DeferredChildComponentWithNgContent_0_5;
  _ViewTestContainerComponent7(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChildComponentWithNgContent in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChildComponentWithNgContent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._DeferredChildComponentWithNgContent_0_5 = deflib0.DeferredChildComponentWithNgContent();
    final _text_1 = import13.createText('Hello World');
    this._compView_0.create(this._DeferredChildComponentWithNgContent_0_5, [
      [_text_1]
    ]);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent7(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent7(parentView, parentIndex);
}

class _ViewTestContainerComponent8 extends AppView<import1.TestContainerComponent> {
  AppView _compView_0;
  import17.ExternalServiceImmediatelyCreated _ExternalServiceImmediatelyCreated_0_5;
  dynamic _DeferredChildComponentWithServices_0_6;
  import17.ExternalServiceLazilyCreatedMaybe __ExternalServiceLazilyCreatedMaybe_0_7;
  _ViewTestContainerComponent8(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  import17.ExternalServiceLazilyCreatedMaybe get _ExternalServiceLazilyCreatedMaybe_0_7 {
    if ((this.__ExternalServiceLazilyCreatedMaybe_0_7 == null)) {
      (this.__ExternalServiceLazilyCreatedMaybe_0_7 = import17.ExternalServiceLazilyCreatedMaybe());
    }
    return this.__ExternalServiceLazilyCreatedMaybe_0_7;
  }

  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component DeferredChildComponentWithServices in asset:_goldens/test/_files/deferred/deferred_component.dart (changeDetection: Default)
    this._compView_0 = deflib1.ViewDeferredChildComponentWithServices0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ExternalServiceImmediatelyCreated_0_5 = import17.ExternalServiceImmediatelyCreated();
    this._DeferredChildComponentWithServices_0_6 = deflib0.DeferredChildComponentWithServices(this._ExternalServiceImmediatelyCreated_0_5);
    this._compView_0.create0(this._DeferredChildComponentWithServices_0_6);
    this.init1(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import17.ExternalServiceImmediatelyCreated)) {
        return this._ExternalServiceImmediatelyCreated_0_5;
      }
      if (identical(token, import17.ExternalServiceLazilyCreatedMaybe)) {
        return this._ExternalServiceLazilyCreatedMaybe_0_7;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<void> viewFactory_TestContainerComponent8(import7.RenderView parentView, int parentIndex) {
  return _ViewTestContainerComponent8(parentView, parentIndex);
}

final List<dynamic> styles$TestContainerComponentHost = const [];

// Host for component TestContainerComponent in asset:_goldens/test/_files/deferred/container_component.dart (changeDetection: Default)
class _ViewTestContainerComponentHost0 extends AppView<import1.TestContainerComponent> {
  ViewTestContainerComponent0 _compView_0;
  import1.TestContainerComponent _TestContainerComponent_0_5;
  _ViewTestContainerComponentHost0(import7.RenderView parentView, int parentIndex) : super(import8.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.TestContainerComponent> build() {
    // Child component TestContainerComponent in asset:_goldens/test/_files/deferred/container_component.dart (changeDetection: Default)
    this._compView_0 = ViewTestContainerComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._TestContainerComponent_0_5 = import1.TestContainerComponent();
    this._compView_0.create(this._TestContainerComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._TestContainerComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponentHost0() {
  return _ViewTestContainerComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestContainerComponent, TestContainerComponentNgFactory);
  _ref0.initReflector();
}
