// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'container_component.dart';
export 'container_component.dart';
import 'package:angular/angular.dart';
import 'package:_goldens/component.dart';
import 'deferred_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'container_component.dart' as import3;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart' as import7;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import9;
import 'package:angular/src/core/linker/app_view_utils.dart' as import10;
import 'package:angular/angular.dart';
import 'deferred_component.dart' deferred as deflib0;
import 'deferred_component.template.dart' deferred as deflib1;
import 'package:_goldens/component.dart' deferred as deflib2;
import 'package:_goldens/component.template.dart' deferred as deflib3;

const List<dynamic> styles$TestContainerComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestContainerComponent0 = [
  null,
  new StaticNodeDebugInfo([TemplateRef], null, <String, dynamic>{}),
  new StaticNodeDebugInfo([TemplateRef], null, <String, dynamic>{})
];

class ViewTestContainerComponent0 extends DebugAppView<import3.TestContainerComponent> {
  ViewContainer _appEl_1;
  ViewContainer _appEl_2;
  static RenderComponentType _renderType;
  ViewTestContainerComponent0(AppView<dynamic> parentView, int parentIndex) : super(import7.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestContainerComponent0) {
    rootEl = import9.document.createElement('test-container');
    _renderType ??= import10.appViewUtils.createRenderType('asset:_goldens/test/_files/deferred/container_component.dart class TestContainerComponent - inline template', ViewEncapsulation.None, styles$TestContainerComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import3.TestContainerComponent> build() {
    final _rootEl = rootEl;
    final import9.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    import9.Text _text_0 = new import9.Text('\'');
    parentRenderNode.append(_text_0);
    dbgElm(this, _text_0, 0, 0, 0);
    var _anchor_1 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_1);
    dbgElm(this, _anchor_1, 1, 1, 26);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_7 = new TemplateRef(_appEl_1, viewFactory_TestContainerComponent1);
    loadDeferred(deflib0.loadLibrary, deflib1.loadLibrary, _appEl_1, _TemplateRef_1_7);
    var _anchor_2 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_2);
    dbgElm(this, _anchor_2, 2, 2, 24);
    _appEl_2 = new ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = new TemplateRef(_appEl_2, viewFactory_TestContainerComponent2);
    loadDeferred(deflib2.loadLibrary, deflib3.loadLibrary, _appEl_2, _TemplateRef_2_7);
    init(const [], null, [_text_0, _anchor_1, _anchor_2]);
    return null;
  }

  @override
  void detectChangesInternal() {
    _appEl_1.detectChangesInNestedViews();
    _appEl_2.detectChangesInNestedViews();
  }
}

AppView<import3.TestContainerComponent> viewFactory_TestContainerComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewTestContainerComponent0(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestContainerComponent1 = [
  new StaticNodeDebugInfo([deflib0.DeferredChildComponent], deflib0.DeferredChildComponent, <String, dynamic>{}),
  null
];

class _ViewTestContainerComponent1 extends DebugAppView<import3.TestContainerComponent> {
  import9.Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChildComponent_0_5;
  _ViewTestContainerComponent1(AppView<dynamic> parentView, int parentIndex) : super(import7.ViewType.EMBEDDED, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestContainerComponent1) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import3.TestContainerComponent> build() {
    _compView_0 = deflib1.viewFactory_DeferredChildComponent0(this, 0);
    _el_0 = _compView_0.rootEl;
    dbgElm(this, _el_0, 0, 1, 6);
    _DeferredChildComponent_0_5 = new deflib0.DeferredChildComponent();
    import9.Text _text_1 = new import9.Text('Foo');
    dbgElm(this, _text_1, 1, 1, 36);
    _compView_0.create(_DeferredChildComponent_0_5, []);
    init0Dbg(_el_0, [_el_0, _text_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import3.TestContainerComponent> viewFactory_TestContainerComponent1(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestContainerComponent1(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestContainerComponent2 = [
  new StaticNodeDebugInfo([deflib2.SampleComponent], deflib2.SampleComponent, <String, dynamic>{})
];

class _ViewTestContainerComponent2 extends DebugAppView<import3.TestContainerComponent> {
  import9.Element _el_0;
  AppView _compView_0;
  dynamic _SampleComponent_0_5;
  _ViewTestContainerComponent2(AppView<dynamic> parentView, int parentIndex) : super(import7.ViewType.EMBEDDED, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestContainerComponent2) {
    componentType = ViewTestContainerComponent0._renderType;
  }
  @override
  ComponentRef<import3.TestContainerComponent> build() {
    _compView_0 = deflib3.viewFactory_SampleComponent0(this, 0);
    _el_0 = _compView_0.rootEl;
    dbgElm(this, _el_0, 0, 2, 6);
    _SampleComponent_0_5 = new deflib2.SampleComponent();
    _compView_0.create(_SampleComponent_0_5, []);
    init0Dbg(_el_0, [_el_0]);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import3.TestContainerComponent> viewFactory_TestContainerComponent2(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestContainerComponent2(parentView, parentIndex);
}

const List<dynamic> styles$TestContainerComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestContainerComponentHost0 = [
  new StaticNodeDebugInfo([import3.TestContainerComponent], import3.TestContainerComponent, <String, dynamic>{})
];

class _ViewTestContainerComponentHost0 extends DebugAppView<dynamic> {
  ViewTestContainerComponent0 _compView_0;
  import3.TestContainerComponent _TestContainerComponent_0_5;
  _ViewTestContainerComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import7.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestContainerComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestContainerComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestContainerComponent_0_5 = new import3.TestContainerComponent();
    _compView_0.create(_TestContainerComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import3.TestContainerComponent>(0, this, rootEl, _TestContainerComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestContainerComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestContainerComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import3.TestContainerComponent> TestContainerComponentNgFactory = const ComponentFactory<import3.TestContainerComponent>('test-container', viewFactory_TestContainerComponentHost0, _TestContainerComponentMetadata);
const _TestContainerComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestContainerComponent, TestContainerComponentNgFactory);
  _ref0.initReflector();
}
