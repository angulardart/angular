// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'deferred_component.dart';
export 'deferred_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'deferred_component.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'external_service.dart' as import10;

final List<dynamic> styles$DeferredChild1Component = const [];

class ViewDeferredChild1Component0 extends AppView<import1.DeferredChild1Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild1Component0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-1');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChild1Component> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'Deferred Child 1');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChild1Component, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChild1Component> _DeferredChild1ComponentNgFactory = const ComponentFactory('deferred-child-1', viewFactory_DeferredChild1ComponentHost0);
ComponentFactory<import1.DeferredChild1Component> get DeferredChild1ComponentNgFactory {
  return _DeferredChild1ComponentNgFactory;
}

final List<dynamic> styles$DeferredChild1ComponentHost = const [];

class _ViewDeferredChild1ComponentHost0 extends AppView<import1.DeferredChild1Component> {
  ViewDeferredChild1Component0 _compView_0;
  import1.DeferredChild1Component _DeferredChild1Component_0_5;
  _ViewDeferredChild1ComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DeferredChild1Component> build() {
    _compView_0 = ViewDeferredChild1Component0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DeferredChild1Component_0_5 = import1.DeferredChild1Component();
    _compView_0.create(_DeferredChild1Component_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChild1Component_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChild1Component> viewFactory_DeferredChild1ComponentHost0() {
  return _ViewDeferredChild1ComponentHost0(null, null);
}

final List<dynamic> styles$DeferredChild2Component = const [];

class ViewDeferredChild2Component0 extends AppView<import1.DeferredChild2Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild2Component0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-2');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChild2Component> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'Deferred Child 2');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChild2Component, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChild2Component> _DeferredChild2ComponentNgFactory = const ComponentFactory('deferred-child-2', viewFactory_DeferredChild2ComponentHost0);
ComponentFactory<import1.DeferredChild2Component> get DeferredChild2ComponentNgFactory {
  return _DeferredChild2ComponentNgFactory;
}

final List<dynamic> styles$DeferredChild2ComponentHost = const [];

class _ViewDeferredChild2ComponentHost0 extends AppView<import1.DeferredChild2Component> {
  ViewDeferredChild2Component0 _compView_0;
  import1.DeferredChild2Component _DeferredChild2Component_0_5;
  _ViewDeferredChild2ComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DeferredChild2Component> build() {
    _compView_0 = ViewDeferredChild2Component0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DeferredChild2Component_0_5 = import1.DeferredChild2Component();
    _compView_0.create(_DeferredChild2Component_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChild2Component_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChild2Component> viewFactory_DeferredChild2ComponentHost0() {
  return _ViewDeferredChild2ComponentHost0(null, null);
}

final List<dynamic> styles$DeferredChild3Component = const [];

class ViewDeferredChild3Component0 extends AppView<import1.DeferredChild3Component> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChild3Component0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-3');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChild3Component> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final _text_0 = import9.appendText(parentRenderNode, 'Deferred Child 3');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChild3Component, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChild3Component> _DeferredChild3ComponentNgFactory = const ComponentFactory('deferred-child-3', viewFactory_DeferredChild3ComponentHost0);
ComponentFactory<import1.DeferredChild3Component> get DeferredChild3ComponentNgFactory {
  return _DeferredChild3ComponentNgFactory;
}

final List<dynamic> styles$DeferredChild3ComponentHost = const [];

class _ViewDeferredChild3ComponentHost0 extends AppView<import1.DeferredChild3Component> {
  ViewDeferredChild3Component0 _compView_0;
  import1.DeferredChild3Component _DeferredChild3Component_0_5;
  _ViewDeferredChild3ComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DeferredChild3Component> build() {
    _compView_0 = ViewDeferredChild3Component0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DeferredChild3Component_0_5 = import1.DeferredChild3Component();
    _compView_0.create(_DeferredChild3Component_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChild3Component_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChild3Component> viewFactory_DeferredChild3ComponentHost0() {
  return _ViewDeferredChild3ComponentHost0(null, null);
}

final List<dynamic> styles$NotDeferredChildComponent = const [];

class ViewNotDeferredChildComponent0 extends AppView<import1.NotDeferredChildComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewNotDeferredChildComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('not-deferred-child');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.NotDeferredChildComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$NotDeferredChildComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.NotDeferredChildComponent> _NotDeferredChildComponentNgFactory = const ComponentFactory('not-deferred-child', viewFactory_NotDeferredChildComponentHost0);
ComponentFactory<import1.NotDeferredChildComponent> get NotDeferredChildComponentNgFactory {
  return _NotDeferredChildComponentNgFactory;
}

final List<dynamic> styles$NotDeferredChildComponentHost = const [];

class _ViewNotDeferredChildComponentHost0 extends AppView<import1.NotDeferredChildComponent> {
  ViewNotDeferredChildComponent0 _compView_0;
  import1.NotDeferredChildComponent _NotDeferredChildComponent_0_5;
  _ViewNotDeferredChildComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.NotDeferredChildComponent> build() {
    _compView_0 = ViewNotDeferredChildComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _NotDeferredChildComponent_0_5 = import1.NotDeferredChildComponent();
    _compView_0.create(_NotDeferredChildComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _NotDeferredChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.NotDeferredChildComponent> viewFactory_NotDeferredChildComponentHost0() {
  return _ViewNotDeferredChildComponentHost0(null, null);
}

final List<dynamic> styles$DeferredChildComponentWithoutNgContent = const [];

class ViewDeferredChildComponentWithoutNgContent0 extends AppView<import1.DeferredChildComponentWithoutNgContent> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithoutNgContent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-without-ng-content');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithoutNgContent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    final _text_1 = import9.appendText(_el_0, 'Child');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithoutNgContent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChildComponentWithoutNgContent> _DeferredChildComponentWithoutNgContentNgFactory = const ComponentFactory('deferred-child-without-ng-content', viewFactory_DeferredChildComponentWithoutNgContentHost0);
ComponentFactory<import1.DeferredChildComponentWithoutNgContent> get DeferredChildComponentWithoutNgContentNgFactory {
  return _DeferredChildComponentWithoutNgContentNgFactory;
}

final List<dynamic> styles$DeferredChildComponentWithoutNgContentHost = const [];

class _ViewDeferredChildComponentWithoutNgContentHost0 extends AppView<import1.DeferredChildComponentWithoutNgContent> {
  ViewDeferredChildComponentWithoutNgContent0 _compView_0;
  import1.DeferredChildComponentWithoutNgContent _DeferredChildComponentWithoutNgContent_0_5;
  _ViewDeferredChildComponentWithoutNgContentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithoutNgContent> build() {
    _compView_0 = ViewDeferredChildComponentWithoutNgContent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DeferredChildComponentWithoutNgContent_0_5 = import1.DeferredChildComponentWithoutNgContent();
    _compView_0.create(_DeferredChildComponentWithoutNgContent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChildComponentWithoutNgContent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChildComponentWithoutNgContent> viewFactory_DeferredChildComponentWithoutNgContentHost0() {
  return _ViewDeferredChildComponentWithoutNgContentHost0(null, null);
}

final List<dynamic> styles$DeferredChildComponentWithNgContent = const [];

class ViewDeferredChildComponentWithNgContent0 extends AppView<import1.DeferredChildComponentWithNgContent> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithNgContent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-with-ng-content');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithNgContent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    project(_el_0, 0);
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithNgContent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChildComponentWithNgContent> _DeferredChildComponentWithNgContentNgFactory = const ComponentFactory('deferred-child-with-ng-content', viewFactory_DeferredChildComponentWithNgContentHost0);
ComponentFactory<import1.DeferredChildComponentWithNgContent> get DeferredChildComponentWithNgContentNgFactory {
  return _DeferredChildComponentWithNgContentNgFactory;
}

final List<dynamic> styles$DeferredChildComponentWithNgContentHost = const [];

class _ViewDeferredChildComponentWithNgContentHost0 extends AppView<import1.DeferredChildComponentWithNgContent> {
  ViewDeferredChildComponentWithNgContent0 _compView_0;
  import1.DeferredChildComponentWithNgContent _DeferredChildComponentWithNgContent_0_5;
  _ViewDeferredChildComponentWithNgContentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithNgContent> build() {
    _compView_0 = ViewDeferredChildComponentWithNgContent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _DeferredChildComponentWithNgContent_0_5 = import1.DeferredChildComponentWithNgContent();
    _compView_0.create(_DeferredChildComponentWithNgContent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChildComponentWithNgContent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChildComponentWithNgContent> viewFactory_DeferredChildComponentWithNgContentHost0() {
  return _ViewDeferredChildComponentWithNgContentHost0(null, null);
}

final List<dynamic> styles$DeferredChildComponentWithServices = const [];

class ViewDeferredChildComponentWithServices0 extends AppView<import1.DeferredChildComponentWithServices> {
  static import2.ComponentStyles _componentStyles;
  ViewDeferredChildComponentWithServices0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('deferred-child-with-services');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/deferred/deferred_component.dart' : null);
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithServices> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DeferredChildComponentWithServices, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DeferredChildComponentWithServices> _DeferredChildComponentWithServicesNgFactory = const ComponentFactory('deferred-child-with-services', viewFactory_DeferredChildComponentWithServicesHost0);
ComponentFactory<import1.DeferredChildComponentWithServices> get DeferredChildComponentWithServicesNgFactory {
  return _DeferredChildComponentWithServicesNgFactory;
}

final List<dynamic> styles$DeferredChildComponentWithServicesHost = const [];

class _ViewDeferredChildComponentWithServicesHost0 extends AppView<import1.DeferredChildComponentWithServices> {
  ViewDeferredChildComponentWithServices0 _compView_0;
  import10.ExternalServiceImmediatelyCreated _ExternalServiceImmediatelyCreated_0_5;
  import1.DeferredChildComponentWithServices _DeferredChildComponentWithServices_0_6;
  import10.ExternalServiceLazilyCreatedMaybe __ExternalServiceLazilyCreatedMaybe_0_7;
  _ViewDeferredChildComponentWithServicesHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  import10.ExternalServiceLazilyCreatedMaybe get _ExternalServiceLazilyCreatedMaybe_0_7 {
    if ((__ExternalServiceLazilyCreatedMaybe_0_7 == null)) {
      (__ExternalServiceLazilyCreatedMaybe_0_7 = import10.ExternalServiceLazilyCreatedMaybe());
    }
    return __ExternalServiceLazilyCreatedMaybe_0_7;
  }

  @override
  ComponentRef<import1.DeferredChildComponentWithServices> build() {
    _compView_0 = ViewDeferredChildComponentWithServices0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _ExternalServiceImmediatelyCreated_0_5 = import10.ExternalServiceImmediatelyCreated();
    _DeferredChildComponentWithServices_0_6 = import1.DeferredChildComponentWithServices(_ExternalServiceImmediatelyCreated_0_5);
    _compView_0.create(_DeferredChildComponentWithServices_0_6, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _DeferredChildComponentWithServices_0_6);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import10.ExternalServiceImmediatelyCreated)) {
        return _ExternalServiceImmediatelyCreated_0_5;
      }
      if (identical(token, import10.ExternalServiceLazilyCreatedMaybe)) {
        return _ExternalServiceLazilyCreatedMaybe_0_7;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.DeferredChildComponentWithServices> viewFactory_DeferredChildComponentWithServicesHost0() {
  return _ViewDeferredChildComponentWithServicesHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(DeferredChild1Component, DeferredChild1ComponentNgFactory);
  _ngRef.registerComponent(DeferredChild2Component, DeferredChild2ComponentNgFactory);
  _ngRef.registerComponent(DeferredChild3Component, DeferredChild3ComponentNgFactory);
  _ngRef.registerComponent(NotDeferredChildComponent, NotDeferredChildComponentNgFactory);
  _ngRef.registerComponent(DeferredChildComponentWithoutNgContent, DeferredChildComponentWithoutNgContentNgFactory);
  _ngRef.registerComponent(DeferredChildComponentWithNgContent, DeferredChildComponentWithNgContentNgFactory);
  _ngRef.registerComponent(DeferredChildComponentWithServices, DeferredChildComponentWithServicesNgFactory);
  _ref0.initReflector();
}
