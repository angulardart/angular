// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'injectables.dart';
export 'injectables.dart';
import 'dart:html' as html;
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'injectables.dart' as _i1;
import 'dart:html' as _i2;
import 'package:angular/src/core/linker/app_view.dart';
import 'injectables.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'dart:core';
import 'package:angular/src/core/di/opaque_token.dart' as import10;

final List<dynamic> styles$InjectableComponent = const [];

class ViewInjectableComponent0 extends AppView<import1.InjectableComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewInjectableComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('test-injectables');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/injectables.dart' : null), ViewEncapsulation.None, styles$InjectableComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.InjectableComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import2.Text _text_1 = import2.Text('Inject!');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInjectableComponent0(parentView, parentIndex);
}

final List<dynamic> styles$InjectableComponentHost = const [];

class _ViewInjectableComponentHost0 extends AppView<import1.InjectableComponent> {
  ViewInjectableComponent0 _compView_0;
  dynamic _test_0_5;
  import1.InjectableComponent _InjectableComponent_0_6;
  dynamic __SomeDep_0_7;
  dynamic __BaseService_0_8;
  _ViewInjectableComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  dynamic get _SomeDep_0_7 {
    if ((this.__SomeDep_0_7 == null)) {
      (__SomeDep_0_7 = import1.createLinkedHashMap(this._test_0_5));
    }
    return this.__SomeDep_0_7;
  }

  dynamic get _BaseService_0_8 {
    if ((this.__BaseService_0_8 == null)) {
      (__BaseService_0_8 = import1.createLinkedHashMap(this._SomeDep_0_7, this.injectorGet(import1.SomeDep, this.viewData.parentIndex), this._SomeDep_0_7));
    }
    return this.__BaseService_0_8;
  }

  @override
  ComponentRef<import1.InjectableComponent> build() {
    _compView_0 = ViewInjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _test_0_5 = import1.injectableFactory(this.injectorGet(import2.Window, viewData.parentIndex));
    _InjectableComponent_0_6 = import1.InjectableComponent(null, this.injectorGet(import1.InjectableService, viewData.parentIndex, null), _test_0_5, this.injectorGet(String, viewData.parentIndex, null));
    _compView_0.create(_InjectableComponent_0_6, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InjectableComponent_0_6);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const import10.OpaqueToken('test')) && (0 == nodeIndex))) {
      return _test_0_5;
    }
    if ((identical(token, import1.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_7;
    }
    if ((identical(token, import1.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_8;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInjectableComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.InjectableComponent> _InjectableComponentNgFactory = const ComponentFactory('test-injectables', viewFactory_InjectableComponentHost0);
ComponentFactory<import1.InjectableComponent> get InjectableComponentNgFactory {
  return _InjectableComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InjectableComponent, InjectableComponentNgFactory);
  _ngRef.registerFactory(SomeDep, () => new SomeDep());
  _ngRef.registerFactory(BaseService, () => new BaseService());
  _ngRef.registerFactory(InjectableService, () => new InjectableService());
  _ngRef.registerFactory(InjectsXsrfToken, (String p0) => new InjectsXsrfToken(p0));
  _ngRef.registerDependencies(InjectsXsrfToken, const [
    const [const _ngRef.Inject(const _i1.XsrfToken())]
  ]);
  _ngRef.registerDependencies(injectableFactory, const [
    const [_i2.Window]
  ]);
  _ref0.initReflector();
}
