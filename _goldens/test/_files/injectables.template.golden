// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'injectables.dart';
export 'injectables.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'injectables.dart' as _i1;
import 'dart:html' as _i2;
import 'package:angular/src/core/linker/app_view.dart';
import 'injectables.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/di/errors.dart' as import9;
import 'package:angular/src/core/di/opaque_token.dart' as import10;
import 'dart:core';

final List<dynamic> styles$InjectableComponent = const [];

class ViewInjectableComponent0 extends AppView<import1.InjectableComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectableComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('test-injectables');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/injectables.dart' : null);
  }

  @override
  ComponentRef<import1.InjectableComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Inject!');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InjectableComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInjectableComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.InjectableComponent> _InjectableComponentNgFactory = const ComponentFactory('test-injectables', viewFactory_InjectableComponentHost0);
ComponentFactory<import1.InjectableComponent> get InjectableComponentNgFactory {
  return _InjectableComponentNgFactory;
}

final List<dynamic> styles$InjectableComponentHost = const [];

class _ViewInjectableComponentHost0 extends AppView<import1.InjectableComponent> {
  ViewInjectableComponent0 _compView_0;
  dynamic _test_0_5;
  import1.InjectableComponent _InjectableComponent_0_6;
  dynamic __SomeDep_0_7;
  dynamic __BaseService_0_8;
  _ViewInjectableComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  dynamic get _SomeDep_0_7 {
    if ((__SomeDep_0_7 == null)) {
      (__SomeDep_0_7 = import1.createLinkedHashMap(_test_0_5));
    }
    return __SomeDep_0_7;
  }

  dynamic get _BaseService_0_8 {
    if ((__BaseService_0_8 == null)) {
      (__BaseService_0_8 = (import6.isDevMode
          ? import9.debugInjectorWrap(import1.BaseService, () {
              return import1.createLinkedHashMap(_SomeDep_0_7, this.injectorGet(import1.SomeDep, viewData.parentIndex), _SomeDep_0_7);
            })
          : import1.createLinkedHashMap(_SomeDep_0_7, this.injectorGet(import1.SomeDep, viewData.parentIndex), _SomeDep_0_7)));
    }
    return __BaseService_0_8;
  }

  @override
  ComponentRef<import1.InjectableComponent> build() {
    _compView_0 = ViewInjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _test_0_5 = (import6.isDevMode
        ? import9.debugInjectorWrap(const import10.OpaqueToken<dynamic>('test'), () {
            return import1.injectableFactory(this.injectorGet(import5.Window, viewData.parentIndex));
          })
        : import1.injectableFactory(this.injectorGet(import5.Window, viewData.parentIndex)));
    _InjectableComponent_0_6 = (import6.isDevMode
        ? import9.debugInjectorWrap(import1.InjectableComponent, () {
            return import1.InjectableComponent(null, this.injectorGet(import1.InjectableService, viewData.parentIndex, null), _test_0_5, this.injectorGet(String, viewData.parentIndex, null));
          })
        : import1.InjectableComponent(null, this.injectorGet(import1.InjectableService, viewData.parentIndex, null), _test_0_5, this.injectorGet(String, viewData.parentIndex, null)));
    _compView_0.create(_InjectableComponent_0_6, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InjectableComponent_0_6);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const import10.OpaqueToken<dynamic>('test')) && (0 == nodeIndex))) {
      return _test_0_5;
    }
    if ((identical(token, import1.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_7;
    }
    if ((identical(token, import1.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_8;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInjectableComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InjectableComponent, InjectableComponentNgFactory);
  _ngRef.registerFactory(SomeDep, () => new SomeDep());
  _ngRef.registerFactory(BaseService, () => new BaseService());
  _ngRef.registerFactory(InjectableService, () => new InjectableService());
  _ngRef.registerFactory(InjectsXsrfToken, (String p0) => new InjectsXsrfToken(p0));
  _ngRef.registerDependencies(InjectsXsrfToken, const [
    const [const _ngRef.Inject(const _i1.XsrfToken())]
  ]);
  _ngRef.registerDependencies(injectableFactory, const [
    const [_i2.Window]
  ]);
  _ref0.initReflector();
}
