// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'whitespace.dart';
export 'whitespace.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'whitespace.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;

final List<dynamic> styles$PreserveWhitespace = const [];

class ViewPreserveWhitespace0 extends AppView<import1.PreserveWhitespace> {
  static import2.ComponentStyles _componentStyles;
  ViewPreserveWhitespace0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('preserve-whitespace');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/whitespace.dart' : null);
  }

  @override
  ComponentRef<import1.PreserveWhitespace> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, '    ');
    final doc = import5.document;
    final _el_1 = import8.appendDiv(doc, parentRenderNode);
    final _text_2 = import8.appendText(_el_1, '\n      Welcome...\n      To...\n      ');
    final _el_3 = import8.appendElement(doc, _el_1, 'strong');
    final _text_4 = import8.appendText(_el_3, 'Jurassic...');
    final _text_5 = import8.appendText(_el_1, '\n      Park!\n    ');
    final _text_6 = import8.appendText(parentRenderNode, '\n  ');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$PreserveWhitespace, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.PreserveWhitespace> viewFactory_PreserveWhitespace0(AppView<dynamic> parentView, int parentIndex) {
  return ViewPreserveWhitespace0(parentView, parentIndex);
}

const ComponentFactory<import1.PreserveWhitespace> _PreserveWhitespaceNgFactory = const ComponentFactory('preserve-whitespace', viewFactory_PreserveWhitespaceHost0);
ComponentFactory<import1.PreserveWhitespace> get PreserveWhitespaceNgFactory {
  return _PreserveWhitespaceNgFactory;
}

final List<dynamic> styles$PreserveWhitespaceHost = const [];

class _ViewPreserveWhitespaceHost0 extends AppView<import1.PreserveWhitespace> {
  ViewPreserveWhitespace0 _compView_0;
  import1.PreserveWhitespace _PreserveWhitespace_0_5;
  _ViewPreserveWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.PreserveWhitespace> build() {
    _compView_0 = ViewPreserveWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _PreserveWhitespace_0_5 = import1.PreserveWhitespace();
    _compView_0.create(_PreserveWhitespace_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _PreserveWhitespace_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.PreserveWhitespace> viewFactory_PreserveWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewPreserveWhitespaceHost0(parentView, parentIndex);
}

final List<dynamic> styles$MinifyWhitespace = const [];

class ViewMinifyWhitespace0 extends AppView<import1.MinifyWhitespace> {
  static import2.ComponentStyles _componentStyles;
  ViewMinifyWhitespace0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('preserve-whitespace');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/whitespace.dart' : null);
  }

  @override
  ComponentRef<import1.MinifyWhitespace> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    final _text_1 = import8.appendText(_el_0, 'Welcome... To... ');
    final _el_2 = import8.appendElement(doc, _el_0, 'strong');
    final _text_3 = import8.appendText(_el_2, 'Jurassic...');
    final _text_4 = import8.appendText(_el_0, ' Park!');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$MinifyWhitespace, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.MinifyWhitespace> viewFactory_MinifyWhitespace0(AppView<dynamic> parentView, int parentIndex) {
  return ViewMinifyWhitespace0(parentView, parentIndex);
}

const ComponentFactory<import1.MinifyWhitespace> _MinifyWhitespaceNgFactory = const ComponentFactory('preserve-whitespace', viewFactory_MinifyWhitespaceHost0);
ComponentFactory<import1.MinifyWhitespace> get MinifyWhitespaceNgFactory {
  return _MinifyWhitespaceNgFactory;
}

final List<dynamic> styles$MinifyWhitespaceHost = const [];

class _ViewMinifyWhitespaceHost0 extends AppView<import1.MinifyWhitespace> {
  ViewMinifyWhitespace0 _compView_0;
  import1.MinifyWhitespace _MinifyWhitespace_0_5;
  _ViewMinifyWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.MinifyWhitespace> build() {
    _compView_0 = ViewMinifyWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _MinifyWhitespace_0_5 = import1.MinifyWhitespace();
    _compView_0.create(_MinifyWhitespace_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _MinifyWhitespace_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.MinifyWhitespace> viewFactory_MinifyWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewMinifyWhitespaceHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(PreserveWhitespace, PreserveWhitespaceNgFactory);
  _ngRef.registerComponent(MinifyWhitespace, MinifyWhitespaceNgFactory);
  _ref0.initReflector();
}
