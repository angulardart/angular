// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'whitespace.dart';
export 'whitespace.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'whitespace.dart' as import1;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';

final List<dynamic> styles$PreserveWhitespace = const [];

class ViewPreserveWhitespace0 extends AppView<import1.PreserveWhitespace> {
  static RenderComponentType _renderType;
  ViewPreserveWhitespace0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('preserve-whitespace');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/whitespace.dart' : null), ViewEncapsulation.None, styles$PreserveWhitespace);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.PreserveWhitespace> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = createText('    ');
    parentRenderNode.append(_text_0);
    var doc = import5.document;
    final _el_1 = createDivAndAppend(doc, parentRenderNode);
    final _text_2 = createText('\n      Welcome...\n      To...\n      ');
    _el_1.append(_text_2);
    final _el_3 = createAndAppend(doc, 'strong', _el_1);
    final _text_4 = createText('Jurassic...');
    _el_3.append(_text_4);
    final _text_5 = createText('\n      Park!\n    ');
    _el_1.append(_text_5);
    final _text_6 = createText('\n  ');
    parentRenderNode.append(_text_6);
    init(const [], null);
  }
}

AppView<import1.PreserveWhitespace> viewFactory_PreserveWhitespace0(AppView<dynamic> parentView, int parentIndex) {
  return ViewPreserveWhitespace0(parentView, parentIndex);
}

const ComponentFactory<import1.PreserveWhitespace> _PreserveWhitespaceNgFactory = const ComponentFactory('preserve-whitespace', viewFactory_PreserveWhitespaceHost0);
ComponentFactory<import1.PreserveWhitespace> get PreserveWhitespaceNgFactory {
  return _PreserveWhitespaceNgFactory;
}

final List<dynamic> styles$PreserveWhitespaceHost = const [];

class _ViewPreserveWhitespaceHost0 extends AppView<import1.PreserveWhitespace> {
  ViewPreserveWhitespace0 _compView_0;
  import1.PreserveWhitespace _PreserveWhitespace_0_5;
  _ViewPreserveWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.PreserveWhitespace> build() {
    _compView_0 = ViewPreserveWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _PreserveWhitespace_0_5 = import1.PreserveWhitespace();
    _compView_0.create(_PreserveWhitespace_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _PreserveWhitespace_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.PreserveWhitespace> viewFactory_PreserveWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewPreserveWhitespaceHost0(parentView, parentIndex);
}

final List<dynamic> styles$MinifyWhitespace = const [];

class ViewMinifyWhitespace0 extends AppView<import1.MinifyWhitespace> {
  static RenderComponentType _renderType;
  ViewMinifyWhitespace0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('preserve-whitespace');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/whitespace.dart' : null), ViewEncapsulation.None, styles$MinifyWhitespace);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.MinifyWhitespace> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import5.document;
    final _el_0 = createDivAndAppend(doc, parentRenderNode);
    final _text_1 = createText('Welcome... To... ');
    _el_0.append(_text_1);
    final _el_2 = createAndAppend(doc, 'strong', _el_0);
    final _text_3 = createText('Jurassic...');
    _el_2.append(_text_3);
    final _text_4 = createText(' Park!');
    _el_0.append(_text_4);
    init(const [], null);
  }
}

AppView<import1.MinifyWhitespace> viewFactory_MinifyWhitespace0(AppView<dynamic> parentView, int parentIndex) {
  return ViewMinifyWhitespace0(parentView, parentIndex);
}

const ComponentFactory<import1.MinifyWhitespace> _MinifyWhitespaceNgFactory = const ComponentFactory('preserve-whitespace', viewFactory_MinifyWhitespaceHost0);
ComponentFactory<import1.MinifyWhitespace> get MinifyWhitespaceNgFactory {
  return _MinifyWhitespaceNgFactory;
}

final List<dynamic> styles$MinifyWhitespaceHost = const [];

class _ViewMinifyWhitespaceHost0 extends AppView<import1.MinifyWhitespace> {
  ViewMinifyWhitespace0 _compView_0;
  import1.MinifyWhitespace _MinifyWhitespace_0_5;
  _ViewMinifyWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.MinifyWhitespace> build() {
    _compView_0 = ViewMinifyWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _MinifyWhitespace_0_5 = import1.MinifyWhitespace();
    _compView_0.create(_MinifyWhitespace_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _MinifyWhitespace_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.MinifyWhitespace> viewFactory_MinifyWhitespaceHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewMinifyWhitespaceHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(PreserveWhitespace, PreserveWhitespaceNgFactory);
  _ngRef.registerComponent(MinifyWhitespace, MinifyWhitespaceNgFactory);
  _ref0.initReflector();
}
