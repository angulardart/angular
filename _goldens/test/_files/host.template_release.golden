// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'host.dart';
export 'host.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'host.dart' as import1;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/angular.dart';

final List<dynamic> styles$HostComponentNewSyntax = const [];

class ViewHostComponentNewSyntax0 extends AppView<import1.HostComponentNewSyntax> {
  static RenderComponentType _renderType;
  ViewHostComponentNewSyntax0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('host');
    rootEl.className = import1.HostComponentNewSyntax.hostClass;
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$HostComponentNewSyntax);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.HostComponentNewSyntax> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

AppView<import1.HostComponentNewSyntax> viewFactory_HostComponentNewSyntax0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHostComponentNewSyntax0(parentView, parentIndex);
}

final List<dynamic> styles$HostComponentNewSyntaxHost = const [];

class _ViewHostComponentNewSyntaxHost0 extends AppView<dynamic> {
  ViewHostComponentNewSyntax0 _compView_0;
  import1.HostComponentNewSyntax _HostComponentNewSyntax_0_5;
  _ViewHostComponentNewSyntaxHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHostComponentNewSyntax0(this, 0);
    rootEl = _compView_0.rootEl;
    _HostComponentNewSyntax_0_5 = new import1.HostComponentNewSyntax();
    _compView_0.create(_HostComponentNewSyntax_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.HostComponentNewSyntax>(0, this, rootEl, _HostComponentNewSyntax_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HostComponentNewSyntaxHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHostComponentNewSyntaxHost0(parentView, parentIndex);
}

const ComponentFactory<import1.HostComponentNewSyntax> HostComponentNewSyntaxNgFactory = const ComponentFactory<import1.HostComponentNewSyntax>('host', viewFactory_HostComponentNewSyntaxHost0, _HostComponentNewSyntaxMetadata);
final List<dynamic> styles$HostComponent = const [];

class ViewHostComponent0 extends AppView<import1.HostComponent> {
  var _expr_0;
  var _expr_1;
  bool _expr_2;
  static RenderComponentType _renderType;
  ViewHostComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('host');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$HostComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.HostComponent> build() {
    final import1.HostComponent _ctx = ctx;
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    _rootEl.addEventListener('click', eventHandler1(_ctx.onClick));
    _rootEl.addEventListener('keydown', eventHandler0(_ctx.onKeyDown));
    return null;
  }

  void detectHostChanges(bool firstCheck) {
    if (firstCheck) {
      if (!identical(import1.HostComponent.hostClassFoo, null)) {
        updateElemClass(rootEl, 'foo', import1.HostComponent.hostClassFoo);
      }
      if (!identical(import1.HostComponent.hostStyleColor, null)) {
        rootEl.style.setProperty('color', import1.HostComponent.hostStyleColor?.toString());
      }
    }
    final currVal_0 = ctx.title;
    if (!identical(_expr_0, currVal_0)) {
      setProp(rootEl, 'title', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = ctx.title;
    if (!identical(_expr_1, currVal_1)) {
      setAttr(rootEl, 'aria-title', currVal_1?.toString());
      _expr_1 = currVal_1;
    }
    final currVal_2 = ctx.isDisabled;
    if (!identical(_expr_2, currVal_2)) {
      updateElemClass(rootEl, 'is-disabled', currVal_2);
      _expr_2 = currVal_2;
    }
  }
}

AppView<import1.HostComponent> viewFactory_HostComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHostComponent0(parentView, parentIndex);
}

final List<dynamic> styles$HostComponentHost = const [];

class _ViewHostComponentHost0 extends AppView<dynamic> {
  ViewHostComponent0 _compView_0;
  import1.HostComponent _HostComponent_0_5;
  _ViewHostComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHostComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _HostComponent_0_5 = new import1.HostComponent();
    _compView_0.create(_HostComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.HostComponent>(0, this, rootEl, _HostComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HostComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHostComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.HostComponent> HostComponentNgFactory = const ComponentFactory<import1.HostComponent>('host', viewFactory_HostComponentHost0, _HostComponentMetadata);
const _HostComponentNewSyntaxMetadata = const [];
const _HostComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HostComponentNewSyntax, HostComponentNewSyntaxNgFactory);
  _ngRef.registerComponent(HostComponent, HostComponentNgFactory);
  _ref0.initReflector();
}
