// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'host.dart';
export 'host.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'host.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/core/linker/app_view_utils.dart' as import10;

final List<dynamic> styles$HostComponentNewSyntax = const [];

// View for component HostComponentNewSyntax in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class ViewHostComponentNewSyntax0 extends AppView<import1.HostComponentNewSyntax> {
  static import2.ComponentStyles _componentStyles;
  ViewHostComponentNewSyntax0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('host');
    this.updateChildClassNonHtml(this.rootEl, import1.HostComponentNewSyntax.hostClass);
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.HostComponentNewSyntax> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HostComponentNewSyntax, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HostComponentNewSyntax> _HostComponentNewSyntaxNgFactory = const ComponentFactory('host', viewFactory_HostComponentNewSyntaxHost0);
ComponentFactory<import1.HostComponentNewSyntax> get HostComponentNewSyntaxNgFactory {
  return _HostComponentNewSyntaxNgFactory;
}

final List<dynamic> styles$HostComponentNewSyntaxHost = const [];

// Host for component HostComponentNewSyntax in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class _ViewHostComponentNewSyntaxHost0 extends AppView<import1.HostComponentNewSyntax> {
  ViewHostComponentNewSyntax0 _compView_0;
  import1.HostComponentNewSyntax _HostComponentNewSyntax_0_5;
  _ViewHostComponentNewSyntaxHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.HostComponentNewSyntax> build() {
    // Child component HostComponentNewSyntax in asset:_goldens/test/_files/host.dart (changeDetection: Default)
    this._compView_0 = ViewHostComponentNewSyntax0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._HostComponentNewSyntax_0_5 = import1.HostComponentNewSyntax();
    this._compView_0.create(this._HostComponentNewSyntax_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._HostComponentNewSyntax_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.HostComponentNewSyntax> viewFactory_HostComponentNewSyntaxHost0() {
  return _ViewHostComponentNewSyntaxHost0(null, null);
}

final List<dynamic> styles$UsesHostComponentWithDirective = const [];

// View for component UsesHostComponentWithDirective in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class ViewUsesHostComponentWithDirective0 extends AppView<import1.UsesHostComponentWithDirective> {
  ViewHostComponent0 _compView_0;
  import1.HostComponent _HostComponent_0_5;
  import1.ListensToFooEvent _ListensToFooEvent_0_6;
  static import2.ComponentStyles _componentStyles;
  ViewUsesHostComponentWithDirective0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('uses-host');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.UsesHostComponentWithDirective> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component HostComponent in asset:_goldens/test/_files/host.dart (changeDetection: Default)
    this._compView_0 = ViewHostComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    parentRenderNode.append(_el_0);
    import9.setAttribute(_el_0, 'listens-to-foo', '');
    this._HostComponent_0_5 = import1.HostComponent();
    this._ListensToFooEvent_0_6 = import1.ListensToFooEvent();
    this._compView_0.create0(this._HostComponent_0_5);
    final subscription_0 = this._HostComponent_0_5.fooEvents.listen(this.eventHandler0(this._ListensToFooEvent_0_6.onOutputFoo));
    this.init(const [], [subscription_0]);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    this._compView_0.detectHostChanges(firstCheck);
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesHostComponentWithDirective, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesHostComponentWithDirective> _UsesHostComponentWithDirectiveNgFactory = const ComponentFactory('uses-host', viewFactory_UsesHostComponentWithDirectiveHost0);
ComponentFactory<import1.UsesHostComponentWithDirective> get UsesHostComponentWithDirectiveNgFactory {
  return _UsesHostComponentWithDirectiveNgFactory;
}

final List<dynamic> styles$UsesHostComponentWithDirectiveHost = const [];

// Host for component UsesHostComponentWithDirective in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class _ViewUsesHostComponentWithDirectiveHost0 extends AppView<import1.UsesHostComponentWithDirective> {
  ViewUsesHostComponentWithDirective0 _compView_0;
  import1.UsesHostComponentWithDirective _UsesHostComponentWithDirective_0_5;
  _ViewUsesHostComponentWithDirectiveHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.UsesHostComponentWithDirective> build() {
    // Child component UsesHostComponentWithDirective in asset:_goldens/test/_files/host.dart (changeDetection: Default)
    this._compView_0 = ViewUsesHostComponentWithDirective0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._UsesHostComponentWithDirective_0_5 = import1.UsesHostComponentWithDirective();
    this._compView_0.create(this._UsesHostComponentWithDirective_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._UsesHostComponentWithDirective_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.UsesHostComponentWithDirective> viewFactory_UsesHostComponentWithDirectiveHost0() {
  return _ViewUsesHostComponentWithDirectiveHost0(null, null);
}

final List<dynamic> styles$HostComponent = const [];

// View for component HostComponent in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class ViewHostComponent0 extends AppView<import1.HostComponent> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  bool _expr_4;
  static import2.ComponentStyles _componentStyles;
  ViewHostComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('host');
    import9.updateAttribute(this.rootEl, 'has-shiny', (import1.HostComponent.hasShinyAttribute ? '' : null));
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.HostComponent> build() {
    final _ctx = this.ctx;
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
    parentRenderNode.addEventListener('click', this.eventHandler1(_ctx.onClick));
    import10.appViewUtils.eventManager.addEventListener(parentRenderNode, 'tripleclick', this.eventHandler1(this._handle_tripleclick__));
    parentRenderNode.addEventListener('keydown', this.eventHandler0(_ctx.onKeyDown));
  }

  void _handle_tripleclick__($event) {
    final _ctx = this.ctx;
    _ctx.onClickNotSimple($event, _ctx.title);
  }

  void detectHostChanges(bool firstCheck) {
    final _ctx = this.ctx;
    if (firstCheck) {
      if (!identical(import1.HostComponent.hostClassFoo, null)) {
        import9.updateClassBindingNonHtml(this.rootEl, 'foo', import1.HostComponent.hostClassFoo);
      }
      if (!identical(import1.HostComponent.hostStyleColor, null)) {
        this.rootEl.style.setProperty('color', import1.HostComponent.hostStyleColor);
      }
    }
    final currVal_0 = import1.HostComponent.hasTerrible;
    if (import10.checkBinding(this._expr_0, currVal_0)) {
      import9.updateAttribute(this.rootEl, 'has-terrible', (currVal_0 ? '' : null));
      this._expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.title;
    if (import10.checkBinding(this._expr_1, currVal_1)) {
      import9.setProperty(this.rootEl, 'title', currVal_1);
      this._expr_1 = currVal_1;
    }
    final currVal_2 = _ctx.title;
    if (import10.checkBinding(this._expr_2, currVal_2)) {
      import9.updateAttribute(this.rootEl, 'aria-title', currVal_2);
      this._expr_2 = currVal_2;
    }
    final currVal_3 = _ctx.isDisabled;
    if (import10.checkBinding(this._expr_3, currVal_3)) {
      import9.updateAttribute(this.rootEl, 'aria-disabled', (currVal_3 ? '' : null));
      this._expr_3 = currVal_3;
    }
    final currVal_4 = _ctx.isDisabled;
    if (import10.checkBinding(this._expr_4, currVal_4)) {
      import9.updateClassBindingNonHtml(this.rootEl, 'is-disabled', currVal_4);
      this._expr_4 = currVal_4;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HostComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HostComponent> _HostComponentNgFactory = const ComponentFactory('host', viewFactory_HostComponentHost0);
ComponentFactory<import1.HostComponent> get HostComponentNgFactory {
  return _HostComponentNgFactory;
}

final List<dynamic> styles$HostComponentHost = const [];

// Host for component HostComponent in asset:_goldens/test/_files/host.dart (changeDetection: Default)
class _ViewHostComponentHost0 extends AppView<import1.HostComponent> {
  ViewHostComponent0 _compView_0;
  import1.HostComponent _HostComponent_0_5;
  _ViewHostComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.HostComponent> build() {
    // Child component HostComponent in asset:_goldens/test/_files/host.dart (changeDetection: Default)
    this._compView_0 = ViewHostComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._HostComponent_0_5 = import1.HostComponent();
    this._compView_0.create(this._HostComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._HostComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    this._compView_0.detectHostChanges(firstCheck);
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.HostComponent> viewFactory_HostComponentHost0() {
  return _ViewHostComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HostComponentNewSyntax, HostComponentNewSyntaxNgFactory);
  _ngRef.registerComponent(UsesHostComponentWithDirective, UsesHostComponentWithDirectiveNgFactory);
  _ngRef.registerComponent(HostComponent, HostComponentNgFactory);
  _ref0.initReflector();
}
