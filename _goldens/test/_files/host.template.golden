// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'host.dart';
export 'host.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'host.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;

final List<dynamic> styles$HostComponentNewSyntax = const [];

class ViewHostComponentNewSyntax0 extends AppView<import1.HostComponentNewSyntax> {
  static import2.ComponentStyles _componentStyles;
  ViewHostComponentNewSyntax0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('host');
    rootEl.className = import1.HostComponentNewSyntax.hostClass;
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.HostComponentNewSyntax> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HostComponentNewSyntax, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.HostComponentNewSyntax> viewFactory_HostComponentNewSyntax0(AppView<dynamic> parentView, int parentIndex) {
  return ViewHostComponentNewSyntax0(parentView, parentIndex);
}

const ComponentFactory<import1.HostComponentNewSyntax> _HostComponentNewSyntaxNgFactory = const ComponentFactory('host', viewFactory_HostComponentNewSyntaxHost0);
ComponentFactory<import1.HostComponentNewSyntax> get HostComponentNewSyntaxNgFactory {
  return _HostComponentNewSyntaxNgFactory;
}

final List<dynamic> styles$HostComponentNewSyntaxHost = const [];

class _ViewHostComponentNewSyntaxHost0 extends AppView<import1.HostComponentNewSyntax> {
  ViewHostComponentNewSyntax0 _compView_0;
  import1.HostComponentNewSyntax _HostComponentNewSyntax_0_5;
  _ViewHostComponentNewSyntaxHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.HostComponentNewSyntax> build() {
    _compView_0 = ViewHostComponentNewSyntax0(this, 0);
    rootEl = _compView_0.rootEl;
    _HostComponentNewSyntax_0_5 = import1.HostComponentNewSyntax();
    _compView_0.create(_HostComponentNewSyntax_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _HostComponentNewSyntax_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.HostComponentNewSyntax> viewFactory_HostComponentNewSyntaxHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewHostComponentNewSyntaxHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesHostComponentWithDirective = const [];

class ViewUsesHostComponentWithDirective0 extends AppView<import1.UsesHostComponentWithDirective> {
  ViewHostComponent0 _compView_0;
  import1.HostComponent _HostComponent_0_5;
  import1.ListensToFooEvent _ListensToFooEvent_0_6;
  static import2.ComponentStyles _componentStyles;
  ViewUsesHostComponentWithDirective0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-host');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.UsesHostComponentWithDirective> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewHostComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    import8.setAttribute(_el_0, 'listens-to-foo', '');
    _HostComponent_0_5 = import1.HostComponent();
    _ListensToFooEvent_0_6 = import1.ListensToFooEvent();
    _compView_0.create(_HostComponent_0_5, []);
    final subscription_0 = _HostComponent_0_5.fooEvents.listen(eventHandler0(_ListensToFooEvent_0_6.onOutputFoo));
    init(const [], [subscription_0]);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesHostComponentWithDirective, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesHostComponentWithDirective> viewFactory_UsesHostComponentWithDirective0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesHostComponentWithDirective0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesHostComponentWithDirective> _UsesHostComponentWithDirectiveNgFactory = const ComponentFactory('uses-host', viewFactory_UsesHostComponentWithDirectiveHost0);
ComponentFactory<import1.UsesHostComponentWithDirective> get UsesHostComponentWithDirectiveNgFactory {
  return _UsesHostComponentWithDirectiveNgFactory;
}

final List<dynamic> styles$UsesHostComponentWithDirectiveHost = const [];

class _ViewUsesHostComponentWithDirectiveHost0 extends AppView<import1.UsesHostComponentWithDirective> {
  ViewUsesHostComponentWithDirective0 _compView_0;
  import1.UsesHostComponentWithDirective _UsesHostComponentWithDirective_0_5;
  _ViewUsesHostComponentWithDirectiveHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesHostComponentWithDirective> build() {
    _compView_0 = ViewUsesHostComponentWithDirective0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesHostComponentWithDirective_0_5 = import1.UsesHostComponentWithDirective();
    _compView_0.create(_UsesHostComponentWithDirective_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesHostComponentWithDirective_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesHostComponentWithDirective> viewFactory_UsesHostComponentWithDirectiveHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesHostComponentWithDirectiveHost0(parentView, parentIndex);
}

final List<dynamic> styles$HostComponent = const [];

class ViewHostComponent0 extends AppView<import1.HostComponent> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  bool _expr_4;
  static import2.ComponentStyles _componentStyles;
  ViewHostComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('host');
    import8.setAttribute(rootEl, 'has-shiny', (import1.HostComponent.hasShinyAttribute ? '' : null));
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/host.dart' : null);
  }

  @override
  ComponentRef<import1.HostComponent> build() {
    final import1.HostComponent _ctx = ctx;
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    _rootEl.addEventListener('click', eventHandler1(_ctx.onClick));
    _rootEl.addEventListener('keydown', eventHandler0(_ctx.onKeyDown));
  }

  void detectHostChanges(bool firstCheck) {
    if (firstCheck) {
      if (!identical(import1.HostComponent.hostClassFoo, null)) {
        import8.updateClassBindingNonHtml(rootEl, 'foo', import1.HostComponent.hostClassFoo);
      }
      if (!identical(import1.HostComponent.hostStyleColor, null)) {
        rootEl.style.setProperty('color', import1.HostComponent.hostStyleColor?.toString());
      }
    }
    final currVal_0 = import1.HostComponent.hasTerrible;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      import8.updateAttribute(rootEl, 'has-terrible', (currVal_0 ? '' : null));
      _expr_0 = currVal_0;
    }
    final currVal_1 = ctx.title;
    if (import9.checkBinding(_expr_1, currVal_1)) {
      import8.setProperty(rootEl, 'title', currVal_1);
      _expr_1 = currVal_1;
    }
    final currVal_2 = ctx.title;
    if (import9.checkBinding(_expr_2, currVal_2)) {
      import8.updateAttribute(rootEl, 'aria-title', currVal_2);
      _expr_2 = currVal_2;
    }
    final currVal_3 = ctx.isDisabled;
    if (import9.checkBinding(_expr_3, currVal_3)) {
      import8.updateAttribute(rootEl, 'aria-disabled', (currVal_3 ? '' : null));
      _expr_3 = currVal_3;
    }
    final currVal_4 = ctx.isDisabled;
    if (import9.checkBinding(_expr_4, currVal_4)) {
      import8.updateClassBindingNonHtml(rootEl, 'is-disabled', currVal_4);
      _expr_4 = currVal_4;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HostComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.HostComponent> viewFactory_HostComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewHostComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.HostComponent> _HostComponentNgFactory = const ComponentFactory('host', viewFactory_HostComponentHost0);
ComponentFactory<import1.HostComponent> get HostComponentNgFactory {
  return _HostComponentNgFactory;
}

final List<dynamic> styles$HostComponentHost = const [];

class _ViewHostComponentHost0 extends AppView<import1.HostComponent> {
  ViewHostComponent0 _compView_0;
  import1.HostComponent _HostComponent_0_5;
  _ViewHostComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.HostComponent> build() {
    _compView_0 = ViewHostComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _HostComponent_0_5 = import1.HostComponent();
    _compView_0.create(_HostComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _HostComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.HostComponent> viewFactory_HostComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewHostComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(HostComponentNewSyntax, HostComponentNewSyntaxNgFactory);
  _ngRef.registerComponent(UsesHostComponentWithDirective, UsesHostComponentWithDirectiveNgFactory);
  _ngRef.registerComponent(HostComponent, HostComponentNgFactory);
  _ref0.initReflector();
}
