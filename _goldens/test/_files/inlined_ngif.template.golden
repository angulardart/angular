// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'inlined_ngif.dart';
export 'inlined_ngif.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'inlined_ngif.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;

final List<dynamic> styles$InlinedNgIfComponent = const [];

class ViewInlinedNgIfComponent0 extends AppView<import1.InlinedNgIfComponent> {
  bool _expr_0 = false;
  import2.Comment _anchor_0;
  import2.DivElement _el_0_0;
  static import3.ComponentStyles _componentStyles;
  ViewInlinedNgIfComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('inlined-ngif');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null);
  }

  @override
  ComponentRef<import1.InlinedNgIfComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import8.appendAnchor(parentRenderNode);
    init([], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.foo == true);
    if (import9.checkBinding(_expr_0, currVal_0)) {
      if (currVal_0) {
        final doc = import2.document;
        _el_0_0 = doc.createElement('div');
        final _text_0_1 = import8.appendText(_el_0_0, 'Hello World!');
        addInlinedNodes(_anchor_0, [_el_0_0], true);
      } else {
        removeInlinedNodes([_el_0_0], true);
      }
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$InlinedNgIfComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InlinedNgIfComponent> viewFactory_InlinedNgIfComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInlinedNgIfComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.InlinedNgIfComponent> _InlinedNgIfComponentNgFactory = const ComponentFactory('inlined-ngif', viewFactory_InlinedNgIfComponentHost0);
ComponentFactory<import1.InlinedNgIfComponent> get InlinedNgIfComponentNgFactory {
  return _InlinedNgIfComponentNgFactory;
}

final List<dynamic> styles$InlinedNgIfComponentHost = const [];

class _ViewInlinedNgIfComponentHost0 extends AppView<import1.InlinedNgIfComponent> {
  ViewInlinedNgIfComponent0 _compView_0;
  import1.InlinedNgIfComponent _InlinedNgIfComponent_0_5;
  _ViewInlinedNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfComponent> build() {
    _compView_0 = ViewInlinedNgIfComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfComponent_0_5 = import1.InlinedNgIfComponent();
    _compView_0.create(_InlinedNgIfComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InlinedNgIfComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InlinedNgIfComponent> viewFactory_InlinedNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponent = const [];

class ViewInlinedNgIfWithImmutableConditionComponent0 extends AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  import2.Comment _anchor_0;
  static import3.ComponentStyles _componentStyles;
  ViewInlinedNgIfWithImmutableConditionComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('inlined-ngif-with-immutable-condition');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null);
  }

  @override
  ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import8.appendAnchor(parentRenderNode);
    init([], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.foo, null)) {
        if (_ctx.foo) {
          final doc = import2.document;
          final _el_0_0 = doc.createElement('div');
          final _text_0_1 = import8.appendText(_el_0_0, 'Hello World!');
          addInlinedNodes(_anchor_0, [_el_0_0], true);
        }
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$InlinedNgIfWithImmutableConditionComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.InlinedNgIfWithImmutableConditionComponent> viewFactory_InlinedNgIfWithImmutableConditionComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewInlinedNgIfWithImmutableConditionComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> _InlinedNgIfWithImmutableConditionComponentNgFactory = const ComponentFactory('inlined-ngif-with-immutable-condition', viewFactory_InlinedNgIfWithImmutableConditionComponentHost0);
ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> get InlinedNgIfWithImmutableConditionComponentNgFactory {
  return _InlinedNgIfWithImmutableConditionComponentNgFactory;
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponentHost = const [];

class _ViewInlinedNgIfWithImmutableConditionComponentHost0 extends AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  ViewInlinedNgIfWithImmutableConditionComponent0 _compView_0;
  import1.InlinedNgIfWithImmutableConditionComponent _InlinedNgIfWithImmutableConditionComponent_0_5;
  _ViewInlinedNgIfWithImmutableConditionComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    _compView_0 = ViewInlinedNgIfWithImmutableConditionComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfWithImmutableConditionComponent_0_5 = import1.InlinedNgIfWithImmutableConditionComponent();
    _compView_0.create(_InlinedNgIfWithImmutableConditionComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InlinedNgIfWithImmutableConditionComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InlinedNgIfWithImmutableConditionComponent> viewFactory_InlinedNgIfWithImmutableConditionComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfWithImmutableConditionComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InlinedNgIfComponent, InlinedNgIfComponentNgFactory);
  _ngRef.registerComponent(InlinedNgIfWithImmutableConditionComponent, InlinedNgIfWithImmutableConditionComponentNgFactory);
  _ref0.initReflector();
}
