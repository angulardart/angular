// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'inlined_ngif.dart';
export 'inlined_ngif.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'inlined_ngif.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import10;
import 'package:angular/src/core/linker/template_ref.dart';

final List<dynamic> styles$InlinedNgIfComponent = const [];

class ViewInlinedNgIfComponent0 extends AppView<import1.InlinedNgIfComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewInlinedNgIfComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import7.document.createElement('inlined-ngif');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null);
  }

  @override
  ComponentRef<import1.InlinedNgIfComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import10.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_InlinedNgIfComponent1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.foo;
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InlinedNgIfComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.InlinedNgIfComponent> _InlinedNgIfComponentNgFactory = const ComponentFactory('inlined-ngif', viewFactory_InlinedNgIfComponentHost0);
ComponentFactory<import1.InlinedNgIfComponent> get InlinedNgIfComponentNgFactory {
  return _InlinedNgIfComponentNgFactory;
}

class _ViewInlinedNgIfComponent1 extends AppView<import1.InlinedNgIfComponent> {
  _ViewInlinedNgIfComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfComponent> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import10.appendText(_el_0, 'Hello World!');
    init1(_el_0);
  }
}

AppView<void> viewFactory_InlinedNgIfComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfComponent1(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfComponentHost = const [];

class _ViewInlinedNgIfComponentHost0 extends AppView<import1.InlinedNgIfComponent> {
  ViewInlinedNgIfComponent0 _compView_0;
  import1.InlinedNgIfComponent _InlinedNgIfComponent_0_5;
  _ViewInlinedNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfComponent> build() {
    _compView_0 = ViewInlinedNgIfComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfComponent_0_5 = import1.InlinedNgIfComponent();
    _compView_0.create(_InlinedNgIfComponent_0_5, projectedNodes);
    init1(rootEl);
    return ComponentRef(0, this, rootEl, _InlinedNgIfComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InlinedNgIfComponent> viewFactory_InlinedNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$IgnoredNgIfComponent = const [];

class ViewIgnoredNgIfComponent0 extends AppView<import1.IgnoredNgIfComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewIgnoredNgIfComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import7.document.createElement('inlined-ngif');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null);
  }

  @override
  ComponentRef<import1.IgnoredNgIfComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import10.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_IgnoredNgIfComponent1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.foo;
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$IgnoredNgIfComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.IgnoredNgIfComponent> _IgnoredNgIfComponentNgFactory = const ComponentFactory('inlined-ngif', viewFactory_IgnoredNgIfComponentHost0);
ComponentFactory<import1.IgnoredNgIfComponent> get IgnoredNgIfComponentNgFactory {
  return _IgnoredNgIfComponentNgFactory;
}

class _ViewIgnoredNgIfComponent1 extends AppView<import1.IgnoredNgIfComponent> {
  _ViewIgnoredNgIfComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.IgnoredNgIfComponent> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import10.appendText(_el_0, 'Hello ');
    final _text_2 = import10.appendText(_el_0, (ctx.name ?? ''));
    final _text_3 = import10.appendText(_el_0, '!');
    init1(_el_0);
  }
}

AppView<void> viewFactory_IgnoredNgIfComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewIgnoredNgIfComponent1(parentView, parentIndex);
}

final List<dynamic> styles$IgnoredNgIfComponentHost = const [];

class _ViewIgnoredNgIfComponentHost0 extends AppView<import1.IgnoredNgIfComponent> {
  ViewIgnoredNgIfComponent0 _compView_0;
  import1.IgnoredNgIfComponent _IgnoredNgIfComponent_0_5;
  _ViewIgnoredNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.IgnoredNgIfComponent> build() {
    _compView_0 = ViewIgnoredNgIfComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _IgnoredNgIfComponent_0_5 = import1.IgnoredNgIfComponent();
    _compView_0.create(_IgnoredNgIfComponent_0_5, projectedNodes);
    init1(rootEl);
    return ComponentRef(0, this, rootEl, _IgnoredNgIfComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.IgnoredNgIfComponent> viewFactory_IgnoredNgIfComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewIgnoredNgIfComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponent = const [];

class ViewInlinedNgIfWithImmutableConditionComponent0 extends AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewInlinedNgIfWithImmutableConditionComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import7.document.createElement('inlined-ngif-with-immutable-condition');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null);
  }

  @override
  ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import10.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_InlinedNgIfWithImmutableConditionComponent1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.foo;
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$InlinedNgIfWithImmutableConditionComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> _InlinedNgIfWithImmutableConditionComponentNgFactory = const ComponentFactory('inlined-ngif-with-immutable-condition', viewFactory_InlinedNgIfWithImmutableConditionComponentHost0);
ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> get InlinedNgIfWithImmutableConditionComponentNgFactory {
  return _InlinedNgIfWithImmutableConditionComponentNgFactory;
}

class _ViewInlinedNgIfWithImmutableConditionComponent1 extends AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  _ViewInlinedNgIfWithImmutableConditionComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import10.appendText(_el_0, 'Hello World!');
    init1(_el_0);
  }
}

AppView<void> viewFactory_InlinedNgIfWithImmutableConditionComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfWithImmutableConditionComponent1(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponentHost = const [];

class _ViewInlinedNgIfWithImmutableConditionComponentHost0 extends AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  ViewInlinedNgIfWithImmutableConditionComponent0 _compView_0;
  import1.InlinedNgIfWithImmutableConditionComponent _InlinedNgIfWithImmutableConditionComponent_0_5;
  _ViewInlinedNgIfWithImmutableConditionComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    _compView_0 = ViewInlinedNgIfWithImmutableConditionComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfWithImmutableConditionComponent_0_5 = import1.InlinedNgIfWithImmutableConditionComponent();
    _compView_0.create(_InlinedNgIfWithImmutableConditionComponent_0_5, projectedNodes);
    init1(rootEl);
    return ComponentRef(0, this, rootEl, _InlinedNgIfWithImmutableConditionComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InlinedNgIfWithImmutableConditionComponent> viewFactory_InlinedNgIfWithImmutableConditionComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfWithImmutableConditionComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InlinedNgIfComponent, InlinedNgIfComponentNgFactory);
  _ngRef.registerComponent(IgnoredNgIfComponent, IgnoredNgIfComponentNgFactory);
  _ngRef.registerComponent(InlinedNgIfWithImmutableConditionComponent, InlinedNgIfWithImmutableConditionComponentNgFactory);
  _ref0.initReflector();
}
