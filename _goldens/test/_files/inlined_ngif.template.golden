// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'inlined_ngif.dart';
export 'inlined_ngif.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart' as import0;
import 'inlined_ngif.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart' as import8;

final List<dynamic> styles$InlinedNgIfComponent = const [];

class ViewInlinedNgIfComponent0 extends import0.AppView<import1.InlinedNgIfComponent> {
  import2.Comment _anchor_0;
  import2.DivElement _el_0_0;
  import2.Text _text_0_1;
  bool _expr_0 = false;
  static import3.RenderComponentType _renderType;
  ViewInlinedNgIfComponent0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('inlined-ngif');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null), import8.ViewEncapsulation.None, styles$InlinedNgIfComponent);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.InlinedNgIfComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import0.createViewContainerAnchor();
    parentRenderNode.append(_anchor_0);
    init([], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.InlinedNgIfComponent _ctx = ctx;
    final currVal_0 = (_ctx.foo == true);
    if (import6.checkBinding(_expr_0, currVal_0)) {
      if (currVal_0) {
        var doc = import2.document;
        _el_0_0 = doc.createElement('div');
        _text_0_1 = import2.Text('Hello World!');
        _el_0_0.append(_text_0_1);
        addInlinedNodes(_anchor_0, [_el_0_0], true);
      } else {
        removeInlinedNodes([_el_0_0], true);
      }
      _expr_0 = currVal_0;
    }
  }
}

import0.AppView<import1.InlinedNgIfComponent> viewFactory_InlinedNgIfComponent0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewInlinedNgIfComponent0(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfComponentHost = const [];

class _ViewInlinedNgIfComponentHost0 extends import0.AppView<import1.InlinedNgIfComponent> {
  ViewInlinedNgIfComponent0 _compView_0;
  import1.InlinedNgIfComponent _InlinedNgIfComponent_0_5;
  _ViewInlinedNgIfComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.InlinedNgIfComponent> build() {
    _compView_0 = ViewInlinedNgIfComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfComponent_0_5 = import1.InlinedNgIfComponent();
    _compView_0.create(_InlinedNgIfComponent_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _InlinedNgIfComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.InlinedNgIfComponent> viewFactory_InlinedNgIfComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfComponentHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.InlinedNgIfComponent> _InlinedNgIfComponentNgFactory = const import8.ComponentFactory('inlined-ngif', viewFactory_InlinedNgIfComponentHost0);
import8.ComponentFactory<import1.InlinedNgIfComponent> get InlinedNgIfComponentNgFactory {
  return _InlinedNgIfComponentNgFactory;
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponent = const [];

class ViewInlinedNgIfWithImmutableConditionComponent0 extends import0.AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  import2.Comment _anchor_0;
  import2.DivElement _el_0_0;
  import2.Text _text_0_1;
  static import3.RenderComponentType _renderType;
  ViewInlinedNgIfWithImmutableConditionComponent0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('inlined-ngif-with-immutable-condition');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/inlined_ngif.dart' : null), import8.ViewEncapsulation.None, styles$InlinedNgIfWithImmutableConditionComponent);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import0.createViewContainerAnchor();
    parentRenderNode.append(_anchor_0);
    init([], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.InlinedNgIfWithImmutableConditionComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.foo, null)) {
        if (_ctx.foo) {
          var doc = import2.document;
          _el_0_0 = doc.createElement('div');
          _text_0_1 = import2.Text('Hello World!');
          _el_0_0.append(_text_0_1);
          addInlinedNodes(_anchor_0, [_el_0_0], true);
        }
      }
    }
  }
}

import0.AppView<import1.InlinedNgIfWithImmutableConditionComponent> viewFactory_InlinedNgIfWithImmutableConditionComponent0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewInlinedNgIfWithImmutableConditionComponent0(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfWithImmutableConditionComponentHost = const [];

class _ViewInlinedNgIfWithImmutableConditionComponentHost0 extends import0.AppView<import1.InlinedNgIfWithImmutableConditionComponent> {
  ViewInlinedNgIfWithImmutableConditionComponent0 _compView_0;
  import1.InlinedNgIfWithImmutableConditionComponent _InlinedNgIfWithImmutableConditionComponent_0_5;
  _ViewInlinedNgIfWithImmutableConditionComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.InlinedNgIfWithImmutableConditionComponent> build() {
    _compView_0 = ViewInlinedNgIfWithImmutableConditionComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIfWithImmutableConditionComponent_0_5 = import1.InlinedNgIfWithImmutableConditionComponent();
    _compView_0.create(_InlinedNgIfWithImmutableConditionComponent_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _InlinedNgIfWithImmutableConditionComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.InlinedNgIfWithImmutableConditionComponent> viewFactory_InlinedNgIfWithImmutableConditionComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfWithImmutableConditionComponentHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> _InlinedNgIfWithImmutableConditionComponentNgFactory = const import8.ComponentFactory('inlined-ngif-with-immutable-condition', viewFactory_InlinedNgIfWithImmutableConditionComponentHost0);
import8.ComponentFactory<import1.InlinedNgIfWithImmutableConditionComponent> get InlinedNgIfWithImmutableConditionComponentNgFactory {
  return _InlinedNgIfWithImmutableConditionComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InlinedNgIfComponent, InlinedNgIfComponentNgFactory);
  _ngRef.registerComponent(InlinedNgIfWithImmutableConditionComponent, InlinedNgIfWithImmutableConditionComponentNgFactory);
  _ref0.initReflector();
}
