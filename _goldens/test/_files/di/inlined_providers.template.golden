// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'inlined_providers.dart';
export 'inlined_providers.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'inlined_providers.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;

final List<dynamic> styles$ParentComponent = const [];

// View for component ParentComponent in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class ViewParentComponent0 extends AppView<import1.ParentComponent> {
  ViewChildComponentProvidingA$B$C0 _compView_0;
  import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_0_5;
  import1.A __A_0_6;
  import1.B __B_0_7;
  import1.C __C_0_8;
  ViewChildComponentProvidingA$B$C0 _compView_1;
  import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_1_5;
  import1.A __A_1_6;
  import1.B __B_1_7;
  import1.C __C_1_8;
  ViewChildComponentWithNgContentProviding$D0 _compView_2;
  import1.ChildComponentWithNgContentProviding$D _ChildComponentWithNgContentProviding$D_2_5;
  import1.D _D_2_6;
  ViewChildComponentInjecting$D0 _compView_3;
  import1.ChildComponentInjecting$D _ChildComponentInjecting$D_3_5;
  ViewChildComponentWithVisibilityAll0 _compView_4;
  import1.ChildComponentWithVisibilityAll _ChildComponentWithVisibilityAll_4_5;
  ViewChildComponentProvidingA$B$C0 _compView_5;
  import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_5_5;
  import1.DirectiveProviding$A2$D2 _DirectiveProviding$A2$D2_5_6;
  import1.A2 __A_5_7;
  import1.B __B_5_8;
  import1.C __C_5_9;
  import1.D2 __D_5_10;
  ViewChildComponentWithNgContentProviding$D0 _compView_6;
  import1.ChildComponentWithNgContentProviding$D _ChildComponentWithNgContentProviding$D_6_5;
  import1.DirectiveProviding$A2$D2 _DirectiveProviding$A2$D2_6_6;
  import1.D2 _D_6_7;
  import1.A2 __A_6_8;
  ViewChildComponentInjecting$D0 _compView_7;
  import1.ChildComponentInjecting$D _ChildComponentInjecting$D_7_5;
  static import2.ComponentStyles _componentStyles;
  ViewParentComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('parent-component');
  }
  import1.A get _A_0_6 {
    if ((this.__A_0_6 == null)) {
      (this.__A_0_6 = import1.A());
    }
    return this.__A_0_6;
  }

  import1.B get _B_0_7 {
    if ((this.__B_0_7 == null)) {
      (this.__B_0_7 = import1.B());
    }
    return this.__B_0_7;
  }

  import1.C get _C_0_8 {
    if ((this.__C_0_8 == null)) {
      (this.__C_0_8 = import1.C());
    }
    return this.__C_0_8;
  }

  import1.A get _A_1_6 {
    if ((this.__A_1_6 == null)) {
      (this.__A_1_6 = import1.A());
    }
    return this.__A_1_6;
  }

  import1.B get _B_1_7 {
    if ((this.__B_1_7 == null)) {
      (this.__B_1_7 = import1.B());
    }
    return this.__B_1_7;
  }

  import1.C get _C_1_8 {
    if ((this.__C_1_8 == null)) {
      (this.__C_1_8 = import1.C());
    }
    return this.__C_1_8;
  }

  import1.A2 get _A_5_7 {
    if ((this.__A_5_7 == null)) {
      (this.__A_5_7 = import1.A2());
    }
    return this.__A_5_7;
  }

  import1.B get _B_5_8 {
    if ((this.__B_5_8 == null)) {
      (this.__B_5_8 = import1.B());
    }
    return this.__B_5_8;
  }

  import1.C get _C_5_9 {
    if ((this.__C_5_9 == null)) {
      (this.__C_5_9 = import1.C());
    }
    return this.__C_5_9;
  }

  import1.D2 get _D_5_10 {
    if ((this.__D_5_10 == null)) {
      (this.__D_5_10 = import1.D2());
    }
    return this.__D_5_10;
  }

  import1.A2 get _A_6_8 {
    if ((this.__A_6_8 == null)) {
      (this.__A_6_8 = import1.A2());
    }
    return this.__A_6_8;
  }

  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/di/inlined_providers.dart' : null);
  }

  @override
  ComponentRef<import1.ParentComponent> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewChildComponentProvidingA$B$C0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    parentRenderNode.append(_el_0);
    this._ChildComponentProvidingA$B$C_0_5 = import1.ChildComponentProvidingA$B$C();
    this._compView_0.create0(this._ChildComponentProvidingA$B$C_0_5);
    // Child component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_1 = ViewChildComponentProvidingA$B$C0(this, 1);
    final _el_1 = this._compView_1.rootEl;
    parentRenderNode.append(_el_1);
    this._ChildComponentProvidingA$B$C_1_5 = import1.ChildComponentProvidingA$B$C();
    this._compView_1.create0(this._ChildComponentProvidingA$B$C_1_5);
    // Child component ChildComponentWithNgContentProviding$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_2 = ViewChildComponentWithNgContentProviding$D0(this, 2);
    final _el_2 = this._compView_2.rootEl;
    parentRenderNode.append(_el_2);
    this._ChildComponentWithNgContentProviding$D_2_5 = import1.ChildComponentWithNgContentProviding$D();
    this._D_2_6 = import1.D();
    // Child component ChildComponentInjecting$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_3 = ViewChildComponentInjecting$D0(this, 3);
    final _el_3 = this._compView_3.rootEl;
    this._ChildComponentInjecting$D_3_5 = import1.ChildComponentInjecting$D(this._D_2_6);
    this._compView_3.create0(this._ChildComponentInjecting$D_3_5);
    this._compView_2.create(this._ChildComponentWithNgContentProviding$D_2_5, [
      [_el_3]
    ]);
    // Child component ChildComponentWithVisibilityAll in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_4 = ViewChildComponentWithVisibilityAll0(this, 4);
    final _el_4 = this._compView_4.rootEl;
    parentRenderNode.append(_el_4);
    this._ChildComponentWithVisibilityAll_4_5 = import1.ChildComponentWithVisibilityAll();
    this._compView_4.create0(this._ChildComponentWithVisibilityAll_4_5);
    // Child component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_5 = ViewChildComponentProvidingA$B$C0(this, 5);
    final _el_5 = this._compView_5.rootEl;
    parentRenderNode.append(_el_5);
    import9.setAttribute(_el_5, 'directive-providing-a2-d2', '');
    this._ChildComponentProvidingA$B$C_5_5 = import1.ChildComponentProvidingA$B$C();
    this._DirectiveProviding$A2$D2_5_6 = import1.DirectiveProviding$A2$D2();
    this._compView_5.create0(this._ChildComponentProvidingA$B$C_5_5);
    // Child component ChildComponentWithNgContentProviding$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_6 = ViewChildComponentWithNgContentProviding$D0(this, 6);
    final _el_6 = this._compView_6.rootEl;
    parentRenderNode.append(_el_6);
    import9.setAttribute(_el_6, 'directive-providing-a2-d2', '');
    this._ChildComponentWithNgContentProviding$D_6_5 = import1.ChildComponentWithNgContentProviding$D();
    this._DirectiveProviding$A2$D2_6_6 = import1.DirectiveProviding$A2$D2();
    this._D_6_7 = import1.D2();
    // Child component ChildComponentInjecting$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_7 = ViewChildComponentInjecting$D0(this, 7);
    final _el_7 = this._compView_7.rootEl;
    this._ChildComponentInjecting$D_7_5 = import1.ChildComponentInjecting$D(this._D_6_7);
    this._compView_7.create0(this._ChildComponentInjecting$D_7_5);
    this._compView_6.create(this._ChildComponentWithNgContentProviding$D_6_5, [
      [_el_7]
    ]);
    this.init0();
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    if ((1 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_1_6;
      }
      if (identical(token, import1.B)) {
        return this._B_1_7;
      }
      if (identical(token, import1.C)) {
        return this._C_1_8;
      }
    }
    if ((identical(token, import1.D) && ((2 <= nodeIndex) && (nodeIndex <= 3)))) {
      return this._D_2_6;
    }
    if ((identical(token, import1.ChildComponentWithVisibilityAll) && (4 == nodeIndex))) {
      return this._ChildComponentWithVisibilityAll_4_5;
    }
    if ((5 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_5_7;
      }
      if (identical(token, import1.B)) {
        return this._B_5_8;
      }
      if (identical(token, import1.C)) {
        return this._C_5_9;
      }
      if (identical(token, import1.D)) {
        return this._D_5_10;
      }
    }
    if (((6 <= nodeIndex) && (nodeIndex <= 7))) {
      if (identical(token, import1.D)) {
        return this._D_6_7;
      }
      if (identical(token, import1.A)) {
        return this._A_6_8;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_2.detectChanges();
    this._compView_3.detectChanges();
    this._compView_4.detectChanges();
    this._compView_5.detectChanges();
    this._compView_6.detectChanges();
    this._compView_7.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_2.destroyInternalState();
    this._compView_3.destroyInternalState();
    this._compView_4.destroyInternalState();
    this._compView_5.destroyInternalState();
    this._compView_6.destroyInternalState();
    this._compView_7.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ParentComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ParentComponent> _ParentComponentNgFactory = const ComponentFactory('parent-component', viewFactory_ParentComponentHost0);
ComponentFactory<import1.ParentComponent> get ParentComponentNgFactory {
  return _ParentComponentNgFactory;
}

final List<dynamic> styles$ParentComponentHost = const [];

// Host for component ParentComponent in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class _ViewParentComponentHost0 extends AppView<import1.ParentComponent> {
  ViewParentComponent0 _compView_0;
  import1.ParentComponent _ParentComponent_0_5;
  _ViewParentComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.ParentComponent> build() {
    // Child component ParentComponent in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewParentComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ParentComponent_0_5 = import1.ParentComponent();
    this._compView_0.create(this._ParentComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ParentComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ParentComponent> viewFactory_ParentComponentHost0() {
  return _ViewParentComponentHost0(null, null);
}

final List<dynamic> styles$ChildComponentProvidingA$B$C = const [];

// View for component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class ViewChildComponentProvidingA$B$C0 extends AppView<import1.ChildComponentProvidingA$B$C> {
  static import2.ComponentStyles _componentStyles;
  ViewChildComponentProvidingA$B$C0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('child-component-providing-a-b-c');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/di/inlined_providers.dart' : null);
  }

  @override
  ComponentRef<import1.ChildComponentProvidingA$B$C> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ChildComponentProvidingA$B$C, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ChildComponentProvidingA$B$C> _ChildComponentProvidingA$B$CNgFactory = const ComponentFactory('child-component-providing-a-b-c', viewFactory_ChildComponentProvidingA$B$CHost0);
ComponentFactory<import1.ChildComponentProvidingA$B$C> get ChildComponentProvidingA$B$CNgFactory {
  return _ChildComponentProvidingA$B$CNgFactory;
}

final List<dynamic> styles$ChildComponentProvidingA$B$CHost = const [];

// Host for component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class _ViewChildComponentProvidingA$B$CHost0 extends AppView<import1.ChildComponentProvidingA$B$C> {
  ViewChildComponentProvidingA$B$C0 _compView_0;
  import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_0_5;
  import1.A __A_0_6;
  import1.B __B_0_7;
  import1.C __C_0_8;
  _ViewChildComponentProvidingA$B$CHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  import1.A get _A_0_6 {
    if ((this.__A_0_6 == null)) {
      (this.__A_0_6 = import1.A());
    }
    return this.__A_0_6;
  }

  import1.B get _B_0_7 {
    if ((this.__B_0_7 == null)) {
      (this.__B_0_7 = import1.B());
    }
    return this.__B_0_7;
  }

  import1.C get _C_0_8 {
    if ((this.__C_0_8 == null)) {
      (this.__C_0_8 = import1.C());
    }
    return this.__C_0_8;
  }

  @override
  ComponentRef<import1.ChildComponentProvidingA$B$C> build() {
    // Child component ChildComponentProvidingA$B$C in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewChildComponentProvidingA$B$C0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ChildComponentProvidingA$B$C_0_5 = import1.ChildComponentProvidingA$B$C();
    this._compView_0.create(this._ChildComponentProvidingA$B$C_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ChildComponentProvidingA$B$C_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ChildComponentProvidingA$B$C> viewFactory_ChildComponentProvidingA$B$CHost0() {
  return _ViewChildComponentProvidingA$B$CHost0(null, null);
}

final List<dynamic> styles$ChildComponentWithNgContentProviding$D = const [];

// View for component ChildComponentWithNgContentProviding$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class ViewChildComponentWithNgContentProviding$D0 extends AppView<import1.ChildComponentWithNgContentProviding$D> {
  static import2.ComponentStyles _componentStyles;
  ViewChildComponentWithNgContentProviding$D0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('child-component-with-ngcontent-providing-d');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/di/inlined_providers.dart' : null);
  }

  @override
  ComponentRef<import1.ChildComponentWithNgContentProviding$D> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ChildComponentWithNgContentProviding$D, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ChildComponentWithNgContentProviding$D> _ChildComponentWithNgContentProviding$DNgFactory = const ComponentFactory('child-component-with-ngcontent-providing-d', viewFactory_ChildComponentWithNgContentProviding$DHost0);
ComponentFactory<import1.ChildComponentWithNgContentProviding$D> get ChildComponentWithNgContentProviding$DNgFactory {
  return _ChildComponentWithNgContentProviding$DNgFactory;
}

final List<dynamic> styles$ChildComponentWithNgContentProviding$DHost = const [];

// Host for component ChildComponentWithNgContentProviding$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class _ViewChildComponentWithNgContentProviding$DHost0 extends AppView<import1.ChildComponentWithNgContentProviding$D> {
  ViewChildComponentWithNgContentProviding$D0 _compView_0;
  import1.ChildComponentWithNgContentProviding$D _ChildComponentWithNgContentProviding$D_0_5;
  import1.D __D_0_6;
  _ViewChildComponentWithNgContentProviding$DHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  import1.D get _D_0_6 {
    if ((this.__D_0_6 == null)) {
      (this.__D_0_6 = import1.D());
    }
    return this.__D_0_6;
  }

  @override
  ComponentRef<import1.ChildComponentWithNgContentProviding$D> build() {
    // Child component ChildComponentWithNgContentProviding$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewChildComponentWithNgContentProviding$D0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ChildComponentWithNgContentProviding$D_0_5 = import1.ChildComponentWithNgContentProviding$D();
    this._compView_0.create(this._ChildComponentWithNgContentProviding$D_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ChildComponentWithNgContentProviding$D_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.D) && (0 == nodeIndex))) {
      return this._D_0_6;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ChildComponentWithNgContentProviding$D> viewFactory_ChildComponentWithNgContentProviding$DHost0() {
  return _ViewChildComponentWithNgContentProviding$DHost0(null, null);
}

final List<dynamic> styles$ChildComponentInjecting$D = const [];

// View for component ChildComponentInjecting$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class ViewChildComponentInjecting$D0 extends AppView<import1.ChildComponentInjecting$D> {
  static import2.ComponentStyles _componentStyles;
  ViewChildComponentInjecting$D0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('child-component-injecting-d');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/di/inlined_providers.dart' : null);
  }

  @override
  ComponentRef<import1.ChildComponentInjecting$D> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ChildComponentInjecting$D, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ChildComponentInjecting$D> _ChildComponentInjecting$DNgFactory = const ComponentFactory('child-component-injecting-d', viewFactory_ChildComponentInjecting$DHost0);
ComponentFactory<import1.ChildComponentInjecting$D> get ChildComponentInjecting$DNgFactory {
  return _ChildComponentInjecting$DNgFactory;
}

final List<dynamic> styles$ChildComponentInjecting$DHost = const [];

// Host for component ChildComponentInjecting$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class _ViewChildComponentInjecting$DHost0 extends AppView<import1.ChildComponentInjecting$D> {
  ViewChildComponentInjecting$D0 _compView_0;
  import1.ChildComponentInjecting$D _ChildComponentInjecting$D_0_5;
  _ViewChildComponentInjecting$DHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.ChildComponentInjecting$D> build() {
    // Child component ChildComponentInjecting$D in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewChildComponentInjecting$D0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ChildComponentInjecting$D_0_5 = (import7.isDevMode
        ? import10.debugInjectorWrap(import1.ChildComponentInjecting$D, () {
            return import1.ChildComponentInjecting$D(this.injectorGet(import1.D, this.parentIndex));
          })
        : import1.ChildComponentInjecting$D(this.injectorGet(import1.D, this.parentIndex)));
    this._compView_0.create(this._ChildComponentInjecting$D_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ChildComponentInjecting$D_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ChildComponentInjecting$D> viewFactory_ChildComponentInjecting$DHost0() {
  return _ViewChildComponentInjecting$DHost0(null, null);
}

final List<dynamic> styles$ChildComponentWithVisibilityAll = const [];

// View for component ChildComponentWithVisibilityAll in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class ViewChildComponentWithVisibilityAll0 extends AppView<import1.ChildComponentWithVisibilityAll> {
  static import2.ComponentStyles _componentStyles;
  ViewChildComponentWithVisibilityAll0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import6.document.createElement('child-component-with-visibility-all');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/di/inlined_providers.dart' : null);
  }

  @override
  ComponentRef<import1.ChildComponentWithVisibilityAll> build() {
    final import6.HtmlElement parentRenderNode = this.initViewRoot();
    this.init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ChildComponentWithVisibilityAll, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ChildComponentWithVisibilityAll> _ChildComponentWithVisibilityAllNgFactory = const ComponentFactory('child-component-with-visibility-all', viewFactory_ChildComponentWithVisibilityAllHost0);
ComponentFactory<import1.ChildComponentWithVisibilityAll> get ChildComponentWithVisibilityAllNgFactory {
  return _ChildComponentWithVisibilityAllNgFactory;
}

final List<dynamic> styles$ChildComponentWithVisibilityAllHost = const [];

// Host for component ChildComponentWithVisibilityAll in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
class _ViewChildComponentWithVisibilityAllHost0 extends AppView<import1.ChildComponentWithVisibilityAll> {
  ViewChildComponentWithVisibilityAll0 _compView_0;
  import1.ChildComponentWithVisibilityAll _ChildComponentWithVisibilityAll_0_5;
  _ViewChildComponentWithVisibilityAllHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.ChildComponentWithVisibilityAll> build() {
    // Child component ChildComponentWithVisibilityAll in asset:_goldens/test/_files/di/inlined_providers.dart (changeDetection: Default)
    this._compView_0 = ViewChildComponentWithVisibilityAll0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._ChildComponentWithVisibilityAll_0_5 = import1.ChildComponentWithVisibilityAll();
    this._compView_0.create(this._ChildComponentWithVisibilityAll_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._ChildComponentWithVisibilityAll_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.ChildComponentWithVisibilityAll) && (0 == nodeIndex))) {
      return this._ChildComponentWithVisibilityAll_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.ChildComponentWithVisibilityAll> viewFactory_ChildComponentWithVisibilityAllHost0() {
  return _ViewChildComponentWithVisibilityAllHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ParentComponent, ParentComponentNgFactory);
  _ngRef.registerComponent(ChildComponentProvidingA$B$C, ChildComponentProvidingA$B$CNgFactory);
  _ngRef.registerComponent(ChildComponentWithNgContentProviding$D, ChildComponentWithNgContentProviding$DNgFactory);
  _ngRef.registerComponent(ChildComponentInjecting$D, ChildComponentInjecting$DNgFactory);
  _ngRef.registerComponent(ChildComponentWithVisibilityAll, ChildComponentWithVisibilityAllNgFactory);
  _ref0.initReflector();
}
