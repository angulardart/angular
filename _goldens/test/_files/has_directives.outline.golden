// ignore_for_file: library_prefixes,unused_import,no_default_super_constructor_explicit,duplicate_import,unused_shown_name
// The .template.dart files also export the user code.
export 'has_directives.dart';

// Required for referencing runtime code.
import 'dart:html';
import 'package:angular/angular.dart';
import 'package:angular/src/core/change_detection/directive_change_detector.dart';
import 'package:angular/src/core/linker/app_view.dart';

// Required for specifically referencing user code.
import 'has_directives.dart' as _user;

// Required for "type inference" (scoping).
import 'package:angular/angular.dart';

// For @Component class TestFooComponent.
external List<dynamic> get styles$TestFooComponent;
external ComponentFactory<_user.TestFooComponent> get TestFooComponentNgFactory;
external AppView<_user.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex);
class ViewTestFooComponent0 extends AppView<_user.TestFooComponent> {
  external ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex);
}
// For @Component class TestSubComponent.
external List<dynamic> get styles$TestSubComponent;
external ComponentFactory<_user.TestSubComponent> get TestSubComponentNgFactory;
external AppView<_user.TestSubComponent> viewFactory_TestSubComponent0(AppView<dynamic> parentView, int parentIndex);
class ViewTestSubComponent0 extends AppView<_user.TestSubComponent> {
  external ViewTestSubComponent0(AppView<dynamic> parentView, int parentIndex);
}
// For @Directive class TestDirective.
class TestDirectiveNgCd extends DirectiveChangeDetector {
  external _user.TestDirective get instance;
  external void deliverChanges();
  external TestDirectiveNgCd(_user.TestDirective instance);
  external void detectHostChanges(AppView view, Element node);
}

external void initReflector();
