// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'component_loader_pattern.dart';
export 'component_loader_pattern.dart';
import 'package:angular/angular.dart';
import 'package:angular/di.template.dart' as di_lib;
import 'example_of_file_that_is_not_generated_yet.template.dart' as example_lib;
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'example_of_file_that_is_not_generated_yet.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/di.template.dart' as _ref2;
import 'package:angular/src/core/linker/app_view.dart' as import0;
import 'component_loader_pattern.dart' as import1;
import 'package:angular/src/core/render/api.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart' as import4;
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart' as import8;

final List<dynamic> styles$TestComponent = const [];

class ViewTestComponent0 extends import0.AppView<import1.TestComponent> {
  static import2.RenderComponentType _renderType;
  ViewTestComponent0(import0.AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, import4.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('test');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/component_loader_pattern.dart' : null), import8.ViewEncapsulation.None, styles$TestComponent);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.TestComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

import0.AppView<import1.TestComponent> viewFactory_TestComponent0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewTestComponent0(parentView, parentIndex);
}

final List<dynamic> styles$TestComponentHost = const [];

class _ViewTestComponentHost0 extends import0.AppView<import1.TestComponent> {
  ViewTestComponent0 _compView_0;
  import1.TestComponent _TestComponent_0_5;
  _ViewTestComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, import4.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.TestComponent> build() {
    _compView_0 = ViewTestComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestComponent_0_5 = import1.TestComponent();
    _compView_0.create(_TestComponent_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _TestComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.TestComponent> viewFactory_TestComponentHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestComponentHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.TestComponent> _TestComponentNgFactory = const import8.ComponentFactory('test', viewFactory_TestComponentHost0);
import8.ComponentFactory<import1.TestComponent> get TestComponentNgFactory {
  return _TestComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestComponent, TestComponentNgFactory);
  _ref0.initReflector();
  _ref1.initReflector();
  _ref2.initReflector();
}
