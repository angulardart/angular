// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'providers.dart';
export 'providers.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'providers.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/di/errors.dart' as import9;
import 'package:angular/src/core/zone/ng_zone.dart' as import10;
import 'package:angular/src/core/di/opaque_token.dart' as import11;
import 'providers.dart' as import12;

final List<dynamic> styles$ProvidersComponent = const [];

class ViewProvidersComponent0 extends AppView<import1.ProvidersComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewProvidersComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('providers');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/providers.dart' : null);
  }

  @override
  ComponentRef<import1.ProvidersComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, 'Hello');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ProvidersComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.ProvidersComponent> viewFactory_ProvidersComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewProvidersComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.ProvidersComponent> _ProvidersComponentNgFactory = const ComponentFactory('providers', viewFactory_ProvidersComponentHost0);
ComponentFactory<import1.ProvidersComponent> get ProvidersComponentNgFactory {
  return _ProvidersComponentNgFactory;
}

final List<dynamic> styles$ProvidersComponentHost = const [];

class _ViewProvidersComponentHost0 extends AppView<import1.ProvidersComponent> {
  ViewProvidersComponent0 _compView_0;
  import1.ProvidersComponent _ProvidersComponent_0_5;
  import1.MyTypeAnnotation __MyTypeAnnotation_0_6;
  import1.MyInjectableTypeAnnotation __MyInjectableTypeAnnotation_0_7;
  dynamic __MyUseFactory_0_8;
  import1.MyUseClass __MyUseClass_0_9;
  import1.MyUseValue __MyUseValue_0_12;
  String __useValueString_0_13;
  List<dynamic> __useValueList_0_14;
  Map<String, dynamic> __useValueMap_0_15;
  dynamic __useEnums_0_16;
  String __XsrfToken_0_17;
  _ViewProvidersComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  import1.MyTypeAnnotation get _MyTypeAnnotation_0_6 {
    if ((__MyTypeAnnotation_0_6 == null)) {
      (__MyTypeAnnotation_0_6 = import1.MyTypeAnnotation());
    }
    return __MyTypeAnnotation_0_6;
  }

  import1.MyInjectableTypeAnnotation get _MyInjectableTypeAnnotation_0_7 {
    if ((__MyInjectableTypeAnnotation_0_7 == null)) {
      (__MyInjectableTypeAnnotation_0_7 = import1.MyInjectableTypeAnnotation());
    }
    return __MyInjectableTypeAnnotation_0_7;
  }

  dynamic get _MyUseFactory_0_8 {
    if ((__MyUseFactory_0_8 == null)) {
      (__MyUseFactory_0_8 = (import6.isDevMode
          ? import9.debugInjectorWrap(import1.MyUseFactory, () {
              return import1.ProvidersComponent.createService(this.injectorGet(import10.NgZone, viewData.parentIndex));
            })
          : import1.ProvidersComponent.createService(this.injectorGet(import10.NgZone, viewData.parentIndex))));
    }
    return __MyUseFactory_0_8;
  }

  import1.MyUseClass get _MyUseClass_0_9 {
    if ((__MyUseClass_0_9 == null)) {
      (__MyUseClass_0_9 = import1.MyUseClass());
    }
    return __MyUseClass_0_9;
  }

  import1.MyUseValue get _MyUseValue_0_12 {
    if ((__MyUseValue_0_12 == null)) {
      (__MyUseValue_0_12 = const import1.MyUseValue('Matan'));
    }
    return __MyUseValue_0_12;
  }

  String get _useValueString_0_13 {
    if ((__useValueString_0_13 == null)) {
      (__useValueString_0_13 = 'foo');
    }
    return __useValueString_0_13;
  }

  List<dynamic> get _useValueList_0_14 {
    if ((__useValueList_0_14 == null)) {
      (__useValueList_0_14 = const [import1.MyUseValue('Andrew'), import1.MyUseValue('Matan'), import1.MyUseValue.named(optional: true)]);
    }
    return __useValueList_0_14;
  }

  Map<String, dynamic> get _useValueMap_0_15 {
    if ((__useValueMap_0_15 == null)) {
      (__useValueMap_0_15 = const {'Andrew': import1.MyUseValue('Andrew'), 'Matan': import1.MyUseValue('Matan')});
    }
    return __useValueMap_0_15;
  }

  dynamic get _useEnums_0_16 {
    if ((__useEnums_0_16 == null)) {
      (__useEnums_0_16 = import1.MyEnum.first);
    }
    return __useEnums_0_16;
  }

  String get _XsrfToken_0_17 {
    if ((__XsrfToken_0_17 == null)) {
      (__XsrfToken_0_17 = 'ABC123');
    }
    return __XsrfToken_0_17;
  }

  @override
  ComponentRef<import1.ProvidersComponent> build() {
    _compView_0 = ViewProvidersComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _ProvidersComponent_0_5 = import1.ProvidersComponent();
    _compView_0.create(_ProvidersComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _ProvidersComponent_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.MyTypeAnnotation) && (0 == nodeIndex))) {
      return _MyTypeAnnotation_0_6;
    }
    if ((identical(token, import1.MyInjectableTypeAnnotation) && (0 == nodeIndex))) {
      return _MyInjectableTypeAnnotation_0_7;
    }
    if ((identical(token, import1.MyUseFactory) && (0 == nodeIndex))) {
      return _MyUseFactory_0_8;
    }
    if ((((identical(token, import1.MyUseClass) || identical(token, import1.MyUseExisting)) || identical(token, import1.MyUseExistingNested)) && (0 == nodeIndex))) {
      return _MyUseClass_0_9;
    }
    if ((identical(token, import1.MyUseValue) && (0 == nodeIndex))) {
      return _MyUseValue_0_12;
    }
    if ((identical(token, const import11.OpaqueToken<dynamic>('useValueString')) && (0 == nodeIndex))) {
      return _useValueString_0_13;
    }
    if ((identical(token, const import11.OpaqueToken<dynamic>('useValueList')) && (0 == nodeIndex))) {
      return _useValueList_0_14;
    }
    if ((identical(token, const import11.OpaqueToken<dynamic>('useValueMap')) && (0 == nodeIndex))) {
      return _useValueMap_0_15;
    }
    if ((identical(token, const import11.OpaqueToken<dynamic>('useEnums')) && (0 == nodeIndex))) {
      return _useEnums_0_16;
    }
    if ((identical(token, const import12.XsrfToken()) && (0 == nodeIndex))) {
      return _XsrfToken_0_17;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.ProvidersComponent> viewFactory_ProvidersComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewProvidersComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ProvidersComponent, ProvidersComponentNgFactory);
  _ngRef.registerFactory(MyInjectableTypeAnnotation, () => new MyInjectableTypeAnnotation());
  _ref0.initReflector();
}
