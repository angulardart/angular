// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'events.dart';
export 'events.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'events.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;

final List<dynamic> styles$UsesNativeEvents = const [];

class ViewUsesNativeEvents0 extends AppView<import1.UsesNativeEvents> {
  static import2.ComponentStyles _componentStyles;
  ViewUsesNativeEvents0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-native-events');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/events.dart' : null);
  }

  @override
  ComponentRef<import1.UsesNativeEvents> build() {
    final _ctx = ctx;
    final import6.HtmlElement parentRenderNode = initViewRoot();
    final doc = import6.document;
    final _el_0 = import9.appendElement(doc, parentRenderNode, 'button');
    _el_0.addEventListener('click', eventHandler0(_ctx.onClick));
    init0();
    parentRenderNode.addEventListener('focus', eventHandler0(_ctx.onFocus));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesNativeEvents, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesNativeEvents> _UsesNativeEventsNgFactory = const ComponentFactory('uses-native-events', viewFactory_UsesNativeEventsHost0);
ComponentFactory<import1.UsesNativeEvents> get UsesNativeEventsNgFactory {
  return _UsesNativeEventsNgFactory;
}

final List<dynamic> styles$UsesNativeEventsHost = const [];

class _ViewUsesNativeEventsHost0 extends AppView<import1.UsesNativeEvents> {
  ViewUsesNativeEvents0 _compView_0;
  import1.UsesNativeEvents _UsesNativeEvents_0_5;
  _ViewUsesNativeEventsHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.UsesNativeEvents> build() {
    _compView_0 = ViewUsesNativeEvents0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesNativeEvents_0_5 = import1.UsesNativeEvents();
    _compView_0.create(_UsesNativeEvents_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _UsesNativeEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesNativeEvents> viewFactory_UsesNativeEventsHost0() {
  return _ViewUsesNativeEventsHost0(null, null);
}

final List<dynamic> styles$UsesAngularEvents = const [];

class ViewUsesAngularEvents0 extends AppView<import1.UsesAngularEvents> {
  ViewHasAngularEvents0 _compView_0;
  import1.HasAngularEvents _HasAngularEvents_0_5;
  static import2.ComponentStyles _componentStyles;
  ViewUsesAngularEvents0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-angular-events');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/events.dart' : null);
  }

  @override
  ComponentRef<import1.UsesAngularEvents> build() {
    final _ctx = ctx;
    final import6.HtmlElement parentRenderNode = initViewRoot();
    _compView_0 = ViewHasAngularEvents0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _HasAngularEvents_0_5 = import1.HasAngularEvents();
    _compView_0.create0(_HasAngularEvents_0_5);
    final subscription_0 = _HasAngularEvents_0_5.foo.listen(eventHandler0(_ctx.onFoo));
    init(const [], [subscription_0]);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesAngularEvents, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesAngularEvents> _UsesAngularEventsNgFactory = const ComponentFactory('uses-angular-events', viewFactory_UsesAngularEventsHost0);
ComponentFactory<import1.UsesAngularEvents> get UsesAngularEventsNgFactory {
  return _UsesAngularEventsNgFactory;
}

final List<dynamic> styles$UsesAngularEventsHost = const [];

class _ViewUsesAngularEventsHost0 extends AppView<import1.UsesAngularEvents> {
  ViewUsesAngularEvents0 _compView_0;
  import1.UsesAngularEvents _UsesAngularEvents_0_5;
  _ViewUsesAngularEventsHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.UsesAngularEvents> build() {
    _compView_0 = ViewUsesAngularEvents0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesAngularEvents_0_5 = import1.UsesAngularEvents();
    _compView_0.create(_UsesAngularEvents_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _UsesAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesAngularEvents> viewFactory_UsesAngularEventsHost0() {
  return _ViewUsesAngularEventsHost0(null, null);
}

final List<dynamic> styles$HasAngularEvents = const [];

class ViewHasAngularEvents0 extends AppView<import1.HasAngularEvents> {
  static import2.ComponentStyles _componentStyles;
  ViewHasAngularEvents0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('has-angular-events');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/events.dart' : null);
  }

  @override
  ComponentRef<import1.HasAngularEvents> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasAngularEvents, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasAngularEvents> _HasAngularEventsNgFactory = const ComponentFactory('has-angular-events', viewFactory_HasAngularEventsHost0);
ComponentFactory<import1.HasAngularEvents> get HasAngularEventsNgFactory {
  return _HasAngularEventsNgFactory;
}

final List<dynamic> styles$HasAngularEventsHost = const [];

class _ViewHasAngularEventsHost0 extends AppView<import1.HasAngularEvents> {
  ViewHasAngularEvents0 _compView_0;
  import1.HasAngularEvents _HasAngularEvents_0_5;
  _ViewHasAngularEventsHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasAngularEvents> build() {
    _compView_0 = ViewHasAngularEvents0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasAngularEvents_0_5 = import1.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _HasAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasAngularEvents> viewFactory_HasAngularEventsHost0() {
  return _ViewHasAngularEventsHost0(null, null);
}

final List<dynamic> styles$HasManyNativeHostEvents = const [];

class ViewHasManyNativeHostEvents0 extends AppView<import1.HasManyNativeHostEvents> {
  static import2.ComponentStyles _componentStyles;
  ViewHasManyNativeHostEvents0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('material-button-like');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/events.dart' : null);
  }

  @override
  ComponentRef<import1.HasManyNativeHostEvents> build() {
    final _ctx = ctx;
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
    parentRenderNode.addEventListener('mousedown', eventHandler1(_ctx.onMouseDown));
    parentRenderNode.addEventListener('mouseup', eventHandler1(_ctx.onMouseUp));
    parentRenderNode.addEventListener('click', eventHandler1(_ctx.onClick));
    parentRenderNode.addEventListener('keypress', eventHandler1(_ctx.onKeyPress));
    parentRenderNode.addEventListener('focus', eventHandler1(_ctx.onFocus));
    parentRenderNode.addEventListener('blur', eventHandler1(_ctx.onBlur));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasManyNativeHostEvents, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.HasManyNativeHostEvents> _HasManyNativeHostEventsNgFactory = const ComponentFactory('material-button-like', viewFactory_HasManyNativeHostEventsHost0);
ComponentFactory<import1.HasManyNativeHostEvents> get HasManyNativeHostEventsNgFactory {
  return _HasManyNativeHostEventsNgFactory;
}

final List<dynamic> styles$HasManyNativeHostEventsHost = const [];

class _ViewHasManyNativeHostEventsHost0 extends AppView<import1.HasManyNativeHostEvents> {
  ViewHasManyNativeHostEvents0 _compView_0;
  import1.HasManyNativeHostEvents _HasManyNativeHostEvents_0_5;
  _ViewHasManyNativeHostEventsHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.HasManyNativeHostEvents> build() {
    _compView_0 = ViewHasManyNativeHostEvents0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _HasManyNativeHostEvents_0_5 = import1.HasManyNativeHostEvents();
    _compView_0.create(_HasManyNativeHostEvents_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(this, _el_0, _HasManyNativeHostEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.HasManyNativeHostEvents> viewFactory_HasManyNativeHostEventsHost0() {
  return _ViewHasManyNativeHostEventsHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesNativeEvents, UsesNativeEventsNgFactory);
  _ngRef.registerComponent(UsesAngularEvents, UsesAngularEventsNgFactory);
  _ngRef.registerComponent(HasAngularEvents, HasAngularEventsNgFactory);
  _ngRef.registerComponent(HasManyNativeHostEvents, HasManyNativeHostEventsNgFactory);
  _ref0.initReflector();
}
