// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'events.dart';
export 'events.dart';
import 'dart:async';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'events.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/angular.dart';

const List<dynamic> styles$UsesNativeEvents = const [];

class ViewUsesNativeEvents0 extends AppView<import1.UsesNativeEvents> {
  import2.ButtonElement _el_0;
  static RenderComponentType _renderType;
  ViewUsesNativeEvents0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('uses-native-events');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$UsesNativeEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.UsesNativeEvents> build() {
    final import1.UsesNativeEvents _ctx = ctx;
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'button', parentRenderNode);
    _el_0.addEventListener('click', eventHandler0(ctx.onClick));
    init(const [], null);
    _rootEl.addEventListener('focus', eventHandler0(_ctx.onFocus));
    return null;
  }
}

AppView<import1.UsesNativeEvents> viewFactory_UsesNativeEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewUsesNativeEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesNativeEventsHost = const [];

class _ViewUsesNativeEventsHost0 extends AppView<dynamic> {
  ViewUsesNativeEvents0 _compView_0;
  import1.UsesNativeEvents _UsesNativeEvents_0_5;
  _ViewUsesNativeEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesNativeEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesNativeEvents_0_5 = new import1.UsesNativeEvents();
    _compView_0.create(_UsesNativeEvents_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.UsesNativeEvents>(0, this, rootEl, _UsesNativeEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_UsesNativeEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewUsesNativeEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesNativeEvents> UsesNativeEventsNgFactory = const ComponentFactory<import1.UsesNativeEvents>('uses-native-events', viewFactory_UsesNativeEventsHost0, _UsesNativeEventsMetadata);
const List<dynamic> styles$UsesAngularEvents = const [];

class ViewUsesAngularEvents0 extends AppView<import1.UsesAngularEvents> {
  import2.Element _el_0;
  ViewHasAngularEvents0 _compView_0;
  import1.HasAngularEvents _HasAngularEvents_0_5;
  static RenderComponentType _renderType;
  ViewUsesAngularEvents0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('uses-angular-events');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$UsesAngularEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.UsesAngularEvents> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = new ViewHasAngularEvents0(this, 0);
    _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _HasAngularEvents_0_5 = new import1.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_5, []);
    final subscription_0 = _HasAngularEvents_0_5.foo.listen(eventHandler0(ctx.onFoo));
    init(const [], [subscription_0]);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.UsesAngularEvents> viewFactory_UsesAngularEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewUsesAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesAngularEventsHost = const [];

class _ViewUsesAngularEventsHost0 extends AppView<dynamic> {
  ViewUsesAngularEvents0 _compView_0;
  import1.UsesAngularEvents _UsesAngularEvents_0_5;
  _ViewUsesAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesAngularEvents_0_5 = new import1.UsesAngularEvents();
    _compView_0.create(_UsesAngularEvents_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.UsesAngularEvents>(0, this, rootEl, _UsesAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_UsesAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewUsesAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesAngularEvents> UsesAngularEventsNgFactory = const ComponentFactory<import1.UsesAngularEvents>('uses-angular-events', viewFactory_UsesAngularEventsHost0, _UsesAngularEventsMetadata);
const List<dynamic> styles$HasAngularEvents = const [];

class ViewHasAngularEvents0 extends AppView<import1.HasAngularEvents> {
  static RenderComponentType _renderType;
  ViewHasAngularEvents0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('has-angular-events');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$HasAngularEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.HasAngularEvents> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

AppView<import1.HasAngularEvents> viewFactory_HasAngularEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHasAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$HasAngularEventsHost = const [];

class _ViewHasAngularEventsHost0 extends AppView<dynamic> {
  ViewHasAngularEvents0 _compView_0;
  import1.HasAngularEvents _HasAngularEvents_0_5;
  _ViewHasAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    _HasAngularEvents_0_5 = new import1.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.HasAngularEvents>(0, this, rootEl, _HasAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HasAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHasAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import1.HasAngularEvents> HasAngularEventsNgFactory = const ComponentFactory<import1.HasAngularEvents>('has-angular-events', viewFactory_HasAngularEventsHost0, _HasAngularEventsMetadata);
const List<dynamic> styles$HasManyNativeHostEvents = const [];

class ViewHasManyNativeHostEvents0 extends AppView<import1.HasManyNativeHostEvents> {
  static RenderComponentType _renderType;
  ViewHasManyNativeHostEvents0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('material-button-like');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$HasManyNativeHostEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.HasManyNativeHostEvents> build() {
    final import1.HasManyNativeHostEvents _ctx = ctx;
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    _rootEl.addEventListener('mousedown', eventHandler0(_ctx.onMouseDown));
    _rootEl.addEventListener('mouseup', eventHandler0(_ctx.onMouseUp));
    _rootEl.addEventListener('click', eventHandler0(_ctx.onClick));
    _rootEl.addEventListener('keypress', eventHandler0(_ctx.onKeyPress));
    _rootEl.addEventListener('focus', eventHandler0(_ctx.onFocus));
    _rootEl.addEventListener('blur', eventHandler0(_ctx.onBlur));
    return null;
  }
}

AppView<import1.HasManyNativeHostEvents> viewFactory_HasManyNativeHostEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHasManyNativeHostEvents0(parentView, parentIndex);
}

const List<dynamic> styles$HasManyNativeHostEventsHost = const [];

class _ViewHasManyNativeHostEventsHost0 extends AppView<dynamic> {
  ViewHasManyNativeHostEvents0 _compView_0;
  import1.HasManyNativeHostEvents _HasManyNativeHostEvents_0_5;
  _ViewHasManyNativeHostEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasManyNativeHostEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    _HasManyNativeHostEvents_0_5 = new import1.HasManyNativeHostEvents();
    _compView_0.create(_HasManyNativeHostEvents_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.HasManyNativeHostEvents>(0, this, rootEl, _HasManyNativeHostEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HasManyNativeHostEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHasManyNativeHostEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import1.HasManyNativeHostEvents> HasManyNativeHostEventsNgFactory = const ComponentFactory<import1.HasManyNativeHostEvents>('material-button-like', viewFactory_HasManyNativeHostEventsHost0, _HasManyNativeHostEventsMetadata);
const _UsesNativeEventsMetadata = const [];
const _UsesAngularEventsMetadata = const [];
const _HasAngularEventsMetadata = const [];
const _HasManyNativeHostEventsMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesNativeEvents, UsesNativeEventsNgFactory);
  _ngRef.registerComponent(UsesAngularEvents, UsesAngularEventsNgFactory);
  _ngRef.registerComponent(HasAngularEvents, HasAngularEventsNgFactory);
  _ngRef.registerComponent(HasManyNativeHostEvents, HasManyNativeHostEventsNgFactory);
  _ref0.initReflector();
}
