// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'dart2js_golden.dart';
export 'dart2js_golden.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'dart2js_golden.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'dart2js_golden.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/src/di/errors.dart' as import8;
import 'package:angular/src/core/di/opaque_token.dart' as import9;
import 'dart:core';
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import12;
import 'package:angular/src/di/injector/injector.dart' as import13;
import 'package:angular/src/runtime/text_binding.dart' as import14;
import 'package:angular/src/runtime/interpolate.dart' as import15;
import 'dart:async' as import16;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import20;
import 'package:angular/src/core/linker/views/render_view.dart' as import21;
import 'package:angular/src/common/directives/ng_for.dart' as import22;
import 'package:angular/src/common/directives/ng_class.dart' as import23;
import 'package:angular/src/common/directives/ng_style.dart' as import24;

final List<dynamic> styles$RootComponent = const [];

// View for component RootComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewRootComponent0 extends import0.ComponentView<import1.RootComponent> {
  import1.HasProviders _HasProviders_0_5;
  import1.A __A_0_6;
  import1.B __B_0_7;
  import1.C __C_0_8;
  import1.HasProvider _HasProvider_1_5;
  import1.C2 __C_1_6;
  import1.HasProvider _HasProvider_2_5;
  import1.C2 __C_2_6;
  ViewUsesDefaultChangeDetectionAndInputs0 _compView_3;
  import1.UsesDefaultChangeDetectionAndInputs _UsesDefaultChangeDetectionAndInputs_3_5;
  ViewUsesOnPushChangeDetectionAndInputs0 _compView_4;
  import1.UsesOnPushChangeDetectionAndInputs _UsesOnPushChangeDetectionAndInputs_4_5;
  ViewInlinedNgIf0 _compView_5;
  import1.InlinedNgIf _InlinedNgIf_5_5;
  ViewEmbeddedNgIf0 _compView_6;
  import1.EmbeddedNgIf _EmbeddedNgIf_6_5;
  ViewEmbeddedNgFor0 _compView_7;
  import1.EmbeddedNgFor _EmbeddedNgFor_7_5;
  ViewInjectsFromArbitraryParent0 _compView_8;
  import1.InjectsFromArbitraryParent _InjectsFromArbitraryParent_8_5;
  ViewComponentConditionalFeatures0 _compView_9;
  import1.ComponentConditionalFeatures _ComponentConditionalFeatures_9_5;
  ViewUsesDomBindings0 _compView_10;
  import1.UsesDomBindings _UsesDomBindings_10_5;
  ViewUsesNgDirectives0 _compView_11;
  import1.UsesNgDirectives _UsesNgDirectives_11_5;
  ViewHasNestedProviderLookups0 _compView_12;
  import1.HasNestedProviderLookups _HasNestedProviderLookups_12_5;
  ViewHasHostListeners0 _compView_13;
  import1.HasHostListeners _HasHostListeners_13_5;
  static import2.ComponentStyles _componentStyles;
  ViewRootComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('root-component');
  }
  import1.A get _A_0_6 {
    if ((this.__A_0_6 == null)) {
      (this.__A_0_6 = import1.A());
    }
    return this.__A_0_6;
  }

  import1.B get _B_0_7 {
    if ((this.__B_0_7 == null)) {
      (this.__B_0_7 = import1.B());
    }
    return this.__B_0_7;
  }

  import1.C get _C_0_8 {
    if ((this.__C_0_8 == null)) {
      (this.__C_0_8 = import1.C());
    }
    return this.__C_0_8;
  }

  import1.C2 get _C_1_6 {
    if ((this.__C_1_6 == null)) {
      (this.__C_1_6 = import1.C2());
    }
    return this.__C_1_6;
  }

  import1.C2 get _C_2_6 {
    if ((this.__C_2_6 == null)) {
      (this.__C_2_6 = import1.C2());
    }
    return this.__C_2_6;
  }

  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    import7.setAttribute(_el_0, 'hasProviders', '');
    this._HasProviders_0_5 = import1.HasProviders();
    final _el_1 = import7.appendDiv(doc, _el_0);
    import7.setAttribute(_el_1, 'hasProvider', '');
    this._HasProvider_1_5 = import1.HasProvider();
    final _el_2 = import7.appendDiv(doc, parentRenderNode);
    import7.setAttribute(_el_2, 'hasProvider', '');
    this._HasProvider_2_5 = import1.HasProvider();
    // Child component UsesDefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_3 = ViewUsesDefaultChangeDetectionAndInputs0(this, 3);
    final _el_3 = this._compView_3.rootElement;
    parentRenderNode.append(_el_3);
    this._UsesDefaultChangeDetectionAndInputs_3_5 = import1.UsesDefaultChangeDetectionAndInputs();
    this._compView_3.create(this._UsesDefaultChangeDetectionAndInputs_3_5);
    // Child component UsesOnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_4 = ViewUsesOnPushChangeDetectionAndInputs0(this, 4);
    final _el_4 = this._compView_4.rootElement;
    parentRenderNode.append(_el_4);
    this._UsesOnPushChangeDetectionAndInputs_4_5 = import1.UsesOnPushChangeDetectionAndInputs();
    this._compView_4.create(this._UsesOnPushChangeDetectionAndInputs_4_5);
    // Child component InlinedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_5 = ViewInlinedNgIf0(this, 5);
    final _el_5 = this._compView_5.rootElement;
    parentRenderNode.append(_el_5);
    this._InlinedNgIf_5_5 = import1.InlinedNgIf();
    this._compView_5.create(this._InlinedNgIf_5_5);
    // Child component EmbeddedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_6 = ViewEmbeddedNgIf0(this, 6);
    final _el_6 = this._compView_6.rootElement;
    parentRenderNode.append(_el_6);
    this._EmbeddedNgIf_6_5 = import1.EmbeddedNgIf();
    this._compView_6.create(this._EmbeddedNgIf_6_5);
    // Child component EmbeddedNgFor in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_7 = ViewEmbeddedNgFor0(this, 7);
    final _el_7 = this._compView_7.rootElement;
    parentRenderNode.append(_el_7);
    this._EmbeddedNgFor_7_5 = import1.EmbeddedNgFor();
    this._compView_7.create(this._EmbeddedNgFor_7_5);
    // Child component InjectsFromArbitraryParent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_8 = ViewInjectsFromArbitraryParent0(this, 8);
    final _el_8 = this._compView_8.rootElement;
    parentRenderNode.append(_el_8);
    this._InjectsFromArbitraryParent_8_5 = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(this.parentView.injectorGet(const import9.MultiToken<String>('usPresidents'), this.parentIndex), this.parentView.injectorGet(const import9.MultiToken<String>('whiteHouse'), this.parentIndex), this.parentView.injectorGet(import1.InjectableService, this.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(this.parentView.injectorGet(const import9.MultiToken<String>('usPresidents'), this.parentIndex), this.parentView.injectorGet(const import9.MultiToken<String>('whiteHouse'), this.parentIndex), this.parentView.injectorGet(import1.InjectableService, this.parentIndex)));
    this._compView_8.create(this._InjectsFromArbitraryParent_8_5);
    // Child component ComponentConditionalFeatures in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_9 = ViewComponentConditionalFeatures0(this, 9);
    final _el_9 = this._compView_9.rootElement;
    parentRenderNode.append(_el_9);
    this._ComponentConditionalFeatures_9_5 = import1.ComponentConditionalFeatures();
    this._compView_9.create(this._ComponentConditionalFeatures_9_5);
    // Child component UsesDomBindings in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_10 = ViewUsesDomBindings0(this, 10);
    final _el_10 = this._compView_10.rootElement;
    parentRenderNode.append(_el_10);
    this._UsesDomBindings_10_5 = import1.UsesDomBindings();
    this._compView_10.create(this._UsesDomBindings_10_5);
    // Child component UsesNgDirectives in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_11 = ViewUsesNgDirectives0(this, 11);
    final _el_11 = this._compView_11.rootElement;
    parentRenderNode.append(_el_11);
    this._UsesNgDirectives_11_5 = import1.UsesNgDirectives();
    this._compView_11.create(this._UsesNgDirectives_11_5);
    // Child component HasNestedProviderLookups in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_12 = ViewHasNestedProviderLookups0(this, 12);
    final _el_12 = this._compView_12.rootElement;
    parentRenderNode.append(_el_12);
    this._HasNestedProviderLookups_12_5 = import1.HasNestedProviderLookups();
    this._compView_12.create(this._HasNestedProviderLookups_12_5);
    // Child component HasHostListeners in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_13 = ViewHasHostListeners0(this, 13);
    final _el_13 = this._compView_13.rootElement;
    parentRenderNode.append(_el_13);
    this._HasHostListeners_13_5 = import1.HasHostListeners();
    this._compView_13.create(this._HasHostListeners_13_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((nodeIndex <= 1)) {
      if ((identical(token, import1.C) && (1 == nodeIndex))) {
        return this._C_1_6;
      }
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    if ((identical(token, import1.C) && (2 == nodeIndex))) {
      return this._C_2_6;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      this._ComponentConditionalFeatures_9_5.useFeatureA = true;
      this._ComponentConditionalFeatures_9_5.useFeatureB = false;
    }
    this._compView_10.detectHostChanges(firstCheck);
    this._compView_3.detectChanges();
    this._compView_4.detectChanges();
    this._compView_5.detectChanges();
    this._compView_6.detectChanges();
    this._compView_7.detectChanges();
    this._compView_8.detectChanges();
    this._compView_9.detectChanges();
    this._compView_10.detectChanges();
    this._compView_11.detectChanges();
    this._compView_12.detectChanges();
    this._compView_13.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_3.destroyInternalState();
    this._compView_4.destroyInternalState();
    this._compView_5.destroyInternalState();
    this._compView_6.destroyInternalState();
    this._compView_7.destroyInternalState();
    this._compView_8.destroyInternalState();
    this._compView_9.destroyInternalState();
    this._compView_10.destroyInternalState();
    this._compView_11.destroyInternalState();
    this._compView_12.destroyInternalState();
    this._compView_13.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$RootComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.RootComponent> _RootComponentNgFactory = const ComponentFactory('root-component', viewFactory_RootComponentHost0);
ComponentFactory<import1.RootComponent> get RootComponentNgFactory {
  return _RootComponentNgFactory;
}

final List<dynamic> styles$RootComponentHost = const [];

// Host for component RootComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewRootComponentHost0 extends import12.HostView<import1.RootComponent> {
  _ViewRootComponentHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component RootComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewRootComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.RootComponent();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.RootComponent> viewFactory_RootComponentHost0(import13.Injector injector) {
  return _ViewRootComponentHost0(injector);
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputs = const [];

// View for component UsesDefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewUsesDefaultChangeDetectionAndInputs0 extends import0.ComponentView<import1.UsesDefaultChangeDetectionAndInputs> {
  ViewDefaultChangeDetectionAndInputs0 _compView_0;
  import1.DefaultChangeDetectionAndInputs _DefaultChangeDetectionAndInputs_0_5;
  String _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDefaultChangeDetectionAndInputs0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-default-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component DefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_0 = ViewDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._DefaultChangeDetectionAndInputs_0_5 = import1.DefaultChangeDetectionAndInputs();
    this._compView_0.create(this._DefaultChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        (this._DefaultChangeDetectionAndInputs_0_5.title = _ctx.title);
      }
    }
    final currVal_1 = _ctx.name;
    if (import6.checkBinding(this._expr_1, currVal_1)) {
      this._DefaultChangeDetectionAndInputs_0_5.name = currVal_1;
      this._expr_1 = currVal_1;
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDefaultChangeDetectionAndInputs, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> _UsesDefaultChangeDetectionAndInputsNgFactory = const ComponentFactory('uses-default-change-detection-and-inputs', viewFactory_UsesDefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> get UsesDefaultChangeDetectionAndInputsNgFactory {
  return _UsesDefaultChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputsHost = const [];

// Host for component UsesDefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewUsesDefaultChangeDetectionAndInputsHost0 extends import12.HostView<import1.UsesDefaultChangeDetectionAndInputs> {
  _ViewUsesDefaultChangeDetectionAndInputsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesDefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewUsesDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesDefaultChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.UsesDefaultChangeDetectionAndInputs> viewFactory_UsesDefaultChangeDetectionAndInputsHost0(import13.Injector injector) {
  return _ViewUsesDefaultChangeDetectionAndInputsHost0(injector);
}

final List<dynamic> styles$DefaultChangeDetectionAndInputs = const [];

// View for component DefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewDefaultChangeDetectionAndInputs0 extends import0.ComponentView<import1.DefaultChangeDetectionAndInputs> {
  final import14.TextBinding _textBinding_1 = import14.TextBinding();
  final import14.TextBinding _textBinding_3 = import14.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewDefaultChangeDetectionAndInputs0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('default-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(this._textBinding_1.element);
    final _text_2 = import7.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_3.element);
    final _text_4 = import7.appendText(parentRenderNode, ' ');
    final _text_5 = import7.appendText(parentRenderNode, '3');
    final _text_6 = import7.appendText(parentRenderNode, ' ');
    final _text_7 = import7.appendText(parentRenderNode, '');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import15.interpolateString0(_ctx.title));
    this._textBinding_3.updateText(import15.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DefaultChangeDetectionAndInputs, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.DefaultChangeDetectionAndInputs> _DefaultChangeDetectionAndInputsNgFactory = const ComponentFactory('default-change-detection-and-inputs', viewFactory_DefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.DefaultChangeDetectionAndInputs> get DefaultChangeDetectionAndInputsNgFactory {
  return _DefaultChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$DefaultChangeDetectionAndInputsHost = const [];

// Host for component DefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewDefaultChangeDetectionAndInputsHost0 extends import12.HostView<import1.DefaultChangeDetectionAndInputs> {
  _ViewDefaultChangeDetectionAndInputsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component DefaultChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.DefaultChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.DefaultChangeDetectionAndInputs> viewFactory_DefaultChangeDetectionAndInputsHost0(import13.Injector injector) {
  return _ViewDefaultChangeDetectionAndInputsHost0(injector);
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputs = const [];

// View for component UsesOnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewUsesOnPushChangeDetectionAndInputs0 extends import0.ComponentView<import1.UsesOnPushChangeDetectionAndInputs> {
  ViewOnPushChangeDetectionAndInputs0 _compView_0;
  import1.OnPushChangeDetectionAndInputs _OnPushChangeDetectionAndInputs_0_5;
  String _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesOnPushChangeDetectionAndInputs0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-on-push-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    // Child component OnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: OnPush)
    this._compView_0 = ViewOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._OnPushChangeDetectionAndInputs_0_5 = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.OnPushChangeDetectionAndInputs, () {
            return import1.OnPushChangeDetectionAndInputs(this._compView_0, this.parentView.injectorGet(import16.Stream, this.parentIndex));
          })
        : import1.OnPushChangeDetectionAndInputs(this._compView_0, this.parentView.injectorGet(import16.Stream, this.parentIndex)));
    this._compView_0.create(this._OnPushChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    bool firstCheck = this.firstCheck;
    changed = false;
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        this._OnPushChangeDetectionAndInputs_0_5.title = _ctx.title;
        changed = true;
      }
    }
    final currVal_1 = _ctx.name;
    if (import6.checkBinding(this._expr_1, currVal_1)) {
      this._OnPushChangeDetectionAndInputs_0_5.name = currVal_1;
      changed = true;
      this._expr_1 = currVal_1;
    }
    if (changed) {
      this._compView_0.markAsCheckOnce();
    }
    if (((!import6.debugThrowIfChanged) && firstCheck)) {
      this._OnPushChangeDetectionAndInputs_0_5.ngOnInit();
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._OnPushChangeDetectionAndInputs_0_5.ngOnDestroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesOnPushChangeDetectionAndInputs, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> _UsesOnPushChangeDetectionAndInputsNgFactory = const ComponentFactory('uses-on-push-change-detection-and-inputs', viewFactory_UsesOnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> get UsesOnPushChangeDetectionAndInputsNgFactory {
  return _UsesOnPushChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputsHost = const [];

// Host for component UsesOnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewUsesOnPushChangeDetectionAndInputsHost0 extends import12.HostView<import1.UsesOnPushChangeDetectionAndInputs> {
  _ViewUsesOnPushChangeDetectionAndInputsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesOnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewUsesOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesOnPushChangeDetectionAndInputs();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.UsesOnPushChangeDetectionAndInputs> viewFactory_UsesOnPushChangeDetectionAndInputsHost0(import13.Injector injector) {
  return _ViewUsesOnPushChangeDetectionAndInputsHost0(injector);
}

final List<dynamic> styles$OnPushChangeDetectionAndInputs = const [];

// View for component OnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: OnPush)
class ViewOnPushChangeDetectionAndInputs0 extends import0.ComponentView<import1.OnPushChangeDetectionAndInputs> {
  final import14.TextBinding _textBinding_1 = import14.TextBinding();
  final import14.TextBinding _textBinding_3 = import14.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewOnPushChangeDetectionAndInputs0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('on-push-change-detection-and-inputs');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(this._textBinding_1.element);
    final _text_2 = import7.appendText(parentRenderNode, ' ');
    parentRenderNode.append(this._textBinding_3.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_1.updateText(import15.interpolateString0(_ctx.title));
    this._textBinding_3.updateText(import15.interpolateString0(_ctx.name));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushChangeDetectionAndInputs, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushChangeDetectionAndInputs> _OnPushChangeDetectionAndInputsNgFactory = const ComponentFactory('on-push-change-detection-and-inputs', viewFactory_OnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.OnPushChangeDetectionAndInputs> get OnPushChangeDetectionAndInputsNgFactory {
  return _OnPushChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$OnPushChangeDetectionAndInputsHost = const [];

// Host for component OnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewOnPushChangeDetectionAndInputsHost0 extends import12.HostView<import1.OnPushChangeDetectionAndInputs> {
  _ViewOnPushChangeDetectionAndInputsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component OnPushChangeDetectionAndInputs in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: OnPush)
    this.componentView = ViewOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.OnPushChangeDetectionAndInputs, () {
            return import1.OnPushChangeDetectionAndInputs(this.componentView, this.injectorGet(import16.Stream, this.parentIndex));
          })
        : import1.OnPushChangeDetectionAndInputs(this.componentView, this.injectorGet(import16.Stream, this.parentIndex)));
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    bool firstCheck = this.firstCheck;
    if (changed) {
      this.componentView.markAsCheckOnce();
    }
    if (((!import6.debugThrowIfChanged) && firstCheck)) {
      this.component.ngOnInit();
    }
    this.componentView.detectChanges();
  }

  @override
  void destroyInternal() {
    this.componentView.destroyInternalState();
    this.component.ngOnDestroy();
  }
}

import12.HostView<import1.OnPushChangeDetectionAndInputs> viewFactory_OnPushChangeDetectionAndInputsHost0(import13.Injector injector) {
  return _ViewOnPushChangeDetectionAndInputsHost0(injector);
}

final List<dynamic> styles$InlinedNgIf = const [];

// View for component InlinedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewInlinedNgIf0 extends import0.ComponentView<import1.InlinedNgIf> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import2.ComponentStyles _componentStyles;
  ViewInlinedNgIf0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('inlined-ng-if');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import7.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_InlinedNgIf1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.showDiv;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InlinedNgIf, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InlinedNgIf> _InlinedNgIfNgFactory = const ComponentFactory('inlined-ng-if', viewFactory_InlinedNgIfHost0);
ComponentFactory<import1.InlinedNgIf> get InlinedNgIfNgFactory {
  return _InlinedNgIfNgFactory;
}

class _ViewInlinedNgIf1 extends import20.EmbeddedView<import1.InlinedNgIf> {
  _ViewInlinedNgIf1(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import5.document;
    final _el_0 = doc.createElement('div');
    final _text_1 = import7.appendText(_el_0, 'Hello World');
    this.initRootNode(_el_0);
  }
}

import20.EmbeddedView<void> viewFactory_InlinedNgIf1(import21.RenderView parentView, int parentIndex) {
  return _ViewInlinedNgIf1(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIfHost = const [];

// Host for component InlinedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewInlinedNgIfHost0 extends import12.HostView<import1.InlinedNgIf> {
  _ViewInlinedNgIfHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component InlinedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewInlinedNgIf0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.InlinedNgIf();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.InlinedNgIf> viewFactory_InlinedNgIfHost0(import13.Injector injector) {
  return _ViewInlinedNgIfHost0(injector);
}

final List<dynamic> styles$EmbeddedNgIf = const [];

// View for component EmbeddedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewEmbeddedNgIf0 extends import0.ComponentView<import1.EmbeddedNgIf> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import2.ComponentStyles _componentStyles;
  ViewEmbeddedNgIf0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('embedded-ng-if');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import7.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_EmbeddedNgIf1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.showNull;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmbeddedNgIf, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedNgIf> _EmbeddedNgIfNgFactory = const ComponentFactory('embedded-ng-if', viewFactory_EmbeddedNgIfHost0);
ComponentFactory<import1.EmbeddedNgIf> get EmbeddedNgIfNgFactory {
  return _EmbeddedNgIfNgFactory;
}

class _ViewEmbeddedNgIf1 extends import20.EmbeddedView<import1.EmbeddedNgIf> {
  ViewNullComponent0 _compView_0;
  import1.NullComponent _NullComponent_0_5;
  _ViewEmbeddedNgIf1(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    // Child component NullComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_0 = ViewNullComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._NullComponent_0_5 = import1.NullComponent();
    this._compView_0.create(this._NullComponent_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import20.EmbeddedView<void> viewFactory_EmbeddedNgIf1(import21.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedNgIf1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgIfHost = const [];

// Host for component EmbeddedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewEmbeddedNgIfHost0 extends import12.HostView<import1.EmbeddedNgIf> {
  _ViewEmbeddedNgIfHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component EmbeddedNgIf in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewEmbeddedNgIf0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.EmbeddedNgIf();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.EmbeddedNgIf> viewFactory_EmbeddedNgIfHost0(import13.Injector injector) {
  return _ViewEmbeddedNgIfHost0(injector);
}

final List<dynamic> styles$EmbeddedNgFor = const [];

// View for component EmbeddedNgFor in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewEmbeddedNgFor0 extends import0.ComponentView<import1.EmbeddedNgFor> {
  ViewContainer _appEl_1;
  import22.NgFor _NgFor_1_9;
  static import2.ComponentStyles _componentStyles;
  ViewEmbeddedNgFor0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('embedded-ng-for');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendElement(doc, parentRenderNode, 'ul');
    final _anchor_1 = import7.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_EmbeddedNgFor1);
    this._NgFor_1_9 = import22.NgFor(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.items, null)) {
        (this._NgFor_1_9.ngForOf = _ctx.items);
      }
    }
    if ((!import6.debugThrowIfChanged)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmbeddedNgFor, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedNgFor> _EmbeddedNgForNgFactory = const ComponentFactory('embedded-ng-for', viewFactory_EmbeddedNgForHost0);
ComponentFactory<import1.EmbeddedNgFor> get EmbeddedNgForNgFactory {
  return _EmbeddedNgForNgFactory;
}

class _ViewEmbeddedNgFor1 extends import20.EmbeddedView<import1.EmbeddedNgFor> {
  final import14.TextBinding _textBinding_1 = import14.TextBinding();
  _ViewEmbeddedNgFor1(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import5.document;
    final _el_0 = doc.createElement('li');
    _el_0.append(this._textBinding_1.element);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_item = import6.unsafeCast<String>(this.locals['\$implicit']);
    this._textBinding_1.updateText(import15.interpolateString0(local_item));
  }
}

import20.EmbeddedView<void> viewFactory_EmbeddedNgFor1(import21.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedNgFor1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgForHost = const [];

// Host for component EmbeddedNgFor in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewEmbeddedNgForHost0 extends import12.HostView<import1.EmbeddedNgFor> {
  _ViewEmbeddedNgForHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component EmbeddedNgFor in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewEmbeddedNgFor0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.EmbeddedNgFor();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.EmbeddedNgFor> viewFactory_EmbeddedNgForHost0(import13.Injector injector) {
  return _ViewEmbeddedNgForHost0(injector);
}

final List<dynamic> styles$NullComponent = const [];

// View for component NullComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewNullComponent0 extends import0.ComponentView<import1.NullComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewNullComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('null');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$NullComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.NullComponent> _NullComponentNgFactory = const ComponentFactory('null', viewFactory_NullComponentHost0);
ComponentFactory<import1.NullComponent> get NullComponentNgFactory {
  return _NullComponentNgFactory;
}

final List<dynamic> styles$NullComponentHost = const [];

// Host for component NullComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewNullComponentHost0 extends import12.HostView<import1.NullComponent> {
  _ViewNullComponentHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component NullComponent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewNullComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.NullComponent();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.NullComponent> viewFactory_NullComponentHost0(import13.Injector injector) {
  return _ViewNullComponentHost0(injector);
}

final List<dynamic> styles$InjectsFromArbitraryParent = const [];

// View for component InjectsFromArbitraryParent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewInjectsFromArbitraryParent0 extends import0.ComponentView<import1.InjectsFromArbitraryParent> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectsFromArbitraryParent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('injects-from-arbitrary-parent');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InjectsFromArbitraryParent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InjectsFromArbitraryParent> _InjectsFromArbitraryParentNgFactory = const ComponentFactory('injects-from-arbitrary-parent', viewFactory_InjectsFromArbitraryParentHost0);
ComponentFactory<import1.InjectsFromArbitraryParent> get InjectsFromArbitraryParentNgFactory {
  return _InjectsFromArbitraryParentNgFactory;
}

final List<dynamic> styles$InjectsFromArbitraryParentHost = const [];

// Host for component InjectsFromArbitraryParent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewInjectsFromArbitraryParentHost0 extends import12.HostView<import1.InjectsFromArbitraryParent> {
  _ViewInjectsFromArbitraryParentHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component InjectsFromArbitraryParent in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewInjectsFromArbitraryParent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(this.injectorGet(const import9.MultiToken<String>('usPresidents'), this.parentIndex), this.injectorGet(const import9.MultiToken<String>('whiteHouse'), this.parentIndex), this.injectorGet(import1.InjectableService, this.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(this.injectorGet(const import9.MultiToken<String>('usPresidents'), this.parentIndex), this.injectorGet(const import9.MultiToken<String>('whiteHouse'), this.parentIndex), this.injectorGet(import1.InjectableService, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.InjectsFromArbitraryParent> viewFactory_InjectsFromArbitraryParentHost0(import13.Injector injector) {
  return _ViewInjectsFromArbitraryParentHost0(injector);
}

final List<dynamic> styles$ComponentConditionalFeatures = const [];

// View for component ComponentConditionalFeatures in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewComponentConditionalFeatures0 extends import0.ComponentView<import1.ComponentConditionalFeatures> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  static import2.ComponentStyles _componentStyles;
  ViewComponentConditionalFeatures0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('component-conditional-features');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import7.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_ComponentConditionalFeatures1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import7.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_ComponentConditionalFeatures2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.useFeatureA;
    this._NgIf_1_9.ngIf = _ctx.useFeatureB;
    this._appEl_0.detectChangesInNestedViews();
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
    this._appEl_1.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ComponentConditionalFeatures, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ComponentConditionalFeatures> _ComponentConditionalFeaturesNgFactory = const ComponentFactory('component-conditional-features', viewFactory_ComponentConditionalFeaturesHost0);
ComponentFactory<import1.ComponentConditionalFeatures> get ComponentConditionalFeaturesNgFactory {
  return _ComponentConditionalFeaturesNgFactory;
}

class _ViewComponentConditionalFeatures1 extends import20.EmbeddedView<import1.ComponentConditionalFeatures> {
  ViewFeatureA0 _compView_0;
  import1.FeatureA _FeatureA_0_5;
  _ViewComponentConditionalFeatures1(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    // Child component FeatureA in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_0 = ViewFeatureA0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._FeatureA_0_5 = import1.FeatureA();
    this._compView_0.create(this._FeatureA_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import20.EmbeddedView<void> viewFactory_ComponentConditionalFeatures1(import21.RenderView parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures1(parentView, parentIndex);
}

class _ViewComponentConditionalFeatures2 extends import20.EmbeddedView<import1.ComponentConditionalFeatures> {
  ViewFeatureB0 _compView_0;
  import1.FeatureB _FeatureB_0_5;
  _ViewComponentConditionalFeatures2(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    // Child component FeatureB in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_0 = ViewFeatureB0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._FeatureB_0_5 = import1.FeatureB();
    this._compView_0.create(this._FeatureB_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import20.EmbeddedView<void> viewFactory_ComponentConditionalFeatures2(import21.RenderView parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures2(parentView, parentIndex);
}

final List<dynamic> styles$ComponentConditionalFeaturesHost = const [];

// Host for component ComponentConditionalFeatures in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewComponentConditionalFeaturesHost0 extends import12.HostView<import1.ComponentConditionalFeatures> {
  _ViewComponentConditionalFeaturesHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component ComponentConditionalFeatures in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewComponentConditionalFeatures0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ComponentConditionalFeatures();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.ComponentConditionalFeatures> viewFactory_ComponentConditionalFeaturesHost0(import13.Injector injector) {
  return _ViewComponentConditionalFeaturesHost0(injector);
}

final List<dynamic> styles$FeatureA = const [];

// View for component FeatureA in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewFeatureA0 extends import0.ComponentView<import1.FeatureA> {
  static import2.ComponentStyles _componentStyles;
  ViewFeatureA0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('feature-a');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'I am Feature A');
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FeatureA, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.FeatureA> _FeatureANgFactory = const ComponentFactory('feature-a', viewFactory_FeatureAHost0);
ComponentFactory<import1.FeatureA> get FeatureANgFactory {
  return _FeatureANgFactory;
}

final List<dynamic> styles$FeatureAHost = const [];

// Host for component FeatureA in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewFeatureAHost0 extends import12.HostView<import1.FeatureA> {
  _ViewFeatureAHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component FeatureA in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewFeatureA0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.FeatureA();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.FeatureA> viewFactory_FeatureAHost0(import13.Injector injector) {
  return _ViewFeatureAHost0(injector);
}

final List<dynamic> styles$FeatureB = const [];

// View for component FeatureB in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewFeatureB0 extends import0.ComponentView<import1.FeatureB> {
  static import2.ComponentStyles _componentStyles;
  ViewFeatureB0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('feature-b');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _text_0 = import7.appendText(parentRenderNode, 'I am Feature B');
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FeatureB, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.FeatureB> _FeatureBNgFactory = const ComponentFactory('feature-b', viewFactory_FeatureBHost0);
ComponentFactory<import1.FeatureB> get FeatureBNgFactory {
  return _FeatureBNgFactory;
}

final List<dynamic> styles$FeatureBHost = const [];

// Host for component FeatureB in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewFeatureBHost0 extends import12.HostView<import1.FeatureB> {
  _ViewFeatureBHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component FeatureB in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewFeatureB0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.FeatureB();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.FeatureB> viewFactory_FeatureBHost0(import13.Injector injector) {
  return _ViewFeatureBHost0(injector);
}

final List<dynamic> styles$UsesDomBindings = const [];

// View for component UsesDomBindings in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewUsesDomBindings0 extends import0.ComponentView<import1.UsesDomBindings> {
  var _expr_0;
  bool _expr_1;
  var _expr_2;
  bool _expr_3;
  import5.ButtonElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDomBindings0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-dom-bindings');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    this._el_0 = import7.appendElement(doc, parentRenderNode, 'button');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.title;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      import7.updateAttribute(this._el_0, 'title', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.isFancy;
    if (import6.checkBinding(this._expr_1, currVal_1)) {
      import7.updateClassBinding(this._el_0, 'fancy', currVal_1);
      this._expr_1 = currVal_1;
    }
  }

  void detectHostChanges(bool firstCheck) {
    final _ctx = this.ctx;
    final currVal_2 = _ctx.title;
    if (import6.checkBinding(this._expr_2, currVal_2)) {
      import7.updateAttribute(this.rootElement, 'title', currVal_2);
      this._expr_2 = currVal_2;
    }
    final currVal_3 = _ctx.isFancy;
    if (import6.checkBinding(this._expr_3, currVal_3)) {
      import7.updateClassBindingNonHtml(this.rootElement, 'fancy', currVal_3);
      this._expr_3 = currVal_3;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDomBindings, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDomBindings> _UsesDomBindingsNgFactory = const ComponentFactory('uses-dom-bindings', viewFactory_UsesDomBindingsHost0);
ComponentFactory<import1.UsesDomBindings> get UsesDomBindingsNgFactory {
  return _UsesDomBindingsNgFactory;
}

final List<dynamic> styles$UsesDomBindingsHost = const [];

// Host for component UsesDomBindings in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewUsesDomBindingsHost0 extends import12.HostView<import1.UsesDomBindings> {
  _ViewUsesDomBindingsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesDomBindings in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewUsesDomBindings0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesDomBindings();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    this.componentView.detectHostChanges(firstCheck);
    this.componentView.detectChanges();
  }
}

import12.HostView<import1.UsesDomBindings> viewFactory_UsesDomBindingsHost0(import13.Injector injector) {
  return _ViewUsesDomBindingsHost0(injector);
}

final List<dynamic> styles$UsesNgDirectives = const [];

// View for component UsesNgDirectives in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewUsesNgDirectives0 extends import0.ComponentView<import1.UsesNgDirectives> {
  import23.NgClass _NgClass_0_5;
  import23.NgClass _NgClass_2_5;
  import23.NgClass _NgClass_4_5;
  import24.NgStyle _NgStyle_6_5;
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  static import2.ComponentStyles _componentStyles;
  ViewUsesNgDirectives0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('uses-ng-directives');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    this._NgClass_0_5 = import23.NgClass(_el_0);
    final _text_1 = import7.appendText(_el_0, 'Classes From Map');
    final _el_2 = import7.appendDiv(doc, parentRenderNode);
    this._NgClass_2_5 = import23.NgClass(_el_2);
    final _text_3 = import7.appendText(_el_2, 'Classes from List');
    final _el_4 = import7.appendDiv(doc, parentRenderNode);
    this._NgClass_4_5 = import23.NgClass(_el_4);
    final _text_5 = import7.appendText(_el_4, 'Classes from String');
    final _el_6 = import7.appendDiv(doc, parentRenderNode);
    this._NgStyle_6_5 = import24.NgStyle(_el_6);
    final _text_7 = import7.appendText(_el_6, 'Styles');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.ngClassesMap;
    if (import6.checkBinding(this._expr_0, currVal_0)) {
      this._NgClass_0_5.rawClass = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import6.debugThrowIfChanged)) {
      this._NgClass_0_5.ngDoCheck();
    }
    final currVal_1 = _ctx.ngClassesList;
    if (import6.checkBinding(this._expr_1, currVal_1)) {
      this._NgClass_2_5.rawClass = currVal_1;
      this._expr_1 = currVal_1;
    }
    if ((!import6.debugThrowIfChanged)) {
      this._NgClass_2_5.ngDoCheck();
    }
    final currVal_2 = _ctx.ngClassesString;
    if (import6.checkBinding(this._expr_2, currVal_2)) {
      this._NgClass_4_5.rawClass = currVal_2;
      this._expr_2 = currVal_2;
    }
    if ((!import6.debugThrowIfChanged)) {
      this._NgClass_4_5.ngDoCheck();
    }
    final currVal_3 = _ctx.ngStyles;
    if (import6.checkBinding(this._expr_3, currVal_3)) {
      this._NgStyle_6_5.rawStyle = currVal_3;
      this._expr_3 = currVal_3;
    }
    if ((!import6.debugThrowIfChanged)) {
      this._NgStyle_6_5.ngDoCheck();
    }
  }

  @override
  void destroyInternal() {
    this._NgClass_0_5.ngOnDestroy();
    this._NgClass_2_5.ngOnDestroy();
    this._NgClass_4_5.ngOnDestroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesNgDirectives, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesNgDirectives> _UsesNgDirectivesNgFactory = const ComponentFactory('uses-ng-directives', viewFactory_UsesNgDirectivesHost0);
ComponentFactory<import1.UsesNgDirectives> get UsesNgDirectivesNgFactory {
  return _UsesNgDirectivesNgFactory;
}

final List<dynamic> styles$UsesNgDirectivesHost = const [];

// Host for component UsesNgDirectives in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewUsesNgDirectivesHost0 extends import12.HostView<import1.UsesNgDirectives> {
  _ViewUsesNgDirectivesHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component UsesNgDirectives in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewUsesNgDirectives0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesNgDirectives();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.UsesNgDirectives> viewFactory_UsesNgDirectivesHost0(import13.Injector injector) {
  return _ViewUsesNgDirectivesHost0(injector);
}

final List<dynamic> styles$HasNestedProviderLookups = const [];

// View for component HasNestedProviderLookups in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewHasNestedProviderLookups0 extends import0.ComponentView<import1.HasNestedProviderLookups> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import2.ComponentStyles _componentStyles;
  ViewHasNestedProviderLookups0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('has-nested-provider-lookups');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import7.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_HasNestedProviderLookups1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.maybe1;
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasNestedProviderLookups, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HasNestedProviderLookups> _HasNestedProviderLookupsNgFactory = const ComponentFactory('has-nested-provider-lookups', viewFactory_HasNestedProviderLookupsHost0);
ComponentFactory<import1.HasNestedProviderLookups> get HasNestedProviderLookupsNgFactory {
  return _HasNestedProviderLookupsNgFactory;
}

class _ViewHasNestedProviderLookups1 extends import20.EmbeddedView<import1.HasNestedProviderLookups> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  _ViewHasNestedProviderLookups1(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import5.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import7.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_HasNestedProviderLookups2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.maybe2;
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

import20.EmbeddedView<void> viewFactory_HasNestedProviderLookups1(import21.RenderView parentView, int parentIndex) {
  return _ViewHasNestedProviderLookups1(parentView, parentIndex);
}

class _ViewHasNestedProviderLookups2 extends import20.EmbeddedView<import1.HasNestedProviderLookups> {
  ViewInjectsManyThingsDynamically0 _compView_1;
  import1.InjectsManyThingsDynamically _InjectsManyThingsDynamically_1_5;
  _ViewHasNestedProviderLookups2(import21.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    final doc = import5.document;
    final _el_0 = doc.createElement('div');
    // Child component InjectsManyThingsDynamically in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this._compView_1 = ViewInjectsManyThingsDynamically0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    _el_0.append(_el_1);
    this._InjectsManyThingsDynamically_1_5 = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.InjectsManyThingsDynamically, () {
            return import1.InjectsManyThingsDynamically(this.parentView.parentView.injectorGet(import1.DepA, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepB, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepC, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepD, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepE, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepF, this.parentView.parentIndex));
          })
        : import1.InjectsManyThingsDynamically(this.parentView.parentView.injectorGet(import1.DepA, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepB, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import1.DepC, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepD, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepE, this.parentView.parentIndex), this.parentView.parentView.injectorGetOptional(import1.DepF, this.parentView.parentIndex)));
    this._compView_1.create(this._InjectsManyThingsDynamically_1_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    this._compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_1.destroyInternalState();
  }
}

import20.EmbeddedView<void> viewFactory_HasNestedProviderLookups2(import21.RenderView parentView, int parentIndex) {
  return _ViewHasNestedProviderLookups2(parentView, parentIndex);
}

final List<dynamic> styles$HasNestedProviderLookupsHost = const [];

// Host for component HasNestedProviderLookups in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewHasNestedProviderLookupsHost0 extends import12.HostView<import1.HasNestedProviderLookups> {
  _ViewHasNestedProviderLookupsHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component HasNestedProviderLookups in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewHasNestedProviderLookups0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasNestedProviderLookups();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.HasNestedProviderLookups> viewFactory_HasNestedProviderLookupsHost0(import13.Injector injector) {
  return _ViewHasNestedProviderLookupsHost0(injector);
}

final List<dynamic> styles$InjectsManyThingsDynamically = const [];

// View for component InjectsManyThingsDynamically in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewInjectsManyThingsDynamically0 extends import0.ComponentView<import1.InjectsManyThingsDynamically> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectsManyThingsDynamically0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('injects-many-things-dynamically');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InjectsManyThingsDynamically, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.InjectsManyThingsDynamically> _InjectsManyThingsDynamicallyNgFactory = const ComponentFactory('injects-many-things-dynamically', viewFactory_InjectsManyThingsDynamicallyHost0);
ComponentFactory<import1.InjectsManyThingsDynamically> get InjectsManyThingsDynamicallyNgFactory {
  return _InjectsManyThingsDynamicallyNgFactory;
}

final List<dynamic> styles$InjectsManyThingsDynamicallyHost = const [];

// Host for component InjectsManyThingsDynamically in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewInjectsManyThingsDynamicallyHost0 extends import12.HostView<import1.InjectsManyThingsDynamically> {
  _ViewInjectsManyThingsDynamicallyHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component InjectsManyThingsDynamically in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewInjectsManyThingsDynamically0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import6.isDevMode
        ? import8.debugInjectorWrap(import1.InjectsManyThingsDynamically, () {
            return import1.InjectsManyThingsDynamically(this.injectorGet(import1.DepA, this.parentIndex), this.injectorGet(import1.DepB, this.parentIndex), this.injectorGet(import1.DepC, this.parentIndex), this.injectorGetOptional(import1.DepD, this.parentIndex), this.injectorGetOptional(import1.DepE, this.parentIndex), this.injectorGetOptional(import1.DepF, this.parentIndex));
          })
        : import1.InjectsManyThingsDynamically(this.injectorGet(import1.DepA, this.parentIndex), this.injectorGet(import1.DepB, this.parentIndex), this.injectorGet(import1.DepC, this.parentIndex), this.injectorGetOptional(import1.DepD, this.parentIndex), this.injectorGetOptional(import1.DepE, this.parentIndex), this.injectorGetOptional(import1.DepF, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.InjectsManyThingsDynamically> viewFactory_InjectsManyThingsDynamicallyHost0(import13.Injector injector) {
  return _ViewInjectsManyThingsDynamicallyHost0(injector);
}

final List<dynamic> styles$HasHostListeners = const [];

// View for component HasHostListeners in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class ViewHasHostListeners0 extends import0.ComponentView<import1.HasHostListeners> {
  static import2.ComponentStyles _componentStyles;
  ViewHasHostListeners0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('has-host-listeners');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  void build() {
    final _ctx = this.ctx;
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    parentRenderNode.addEventListener('click', this.eventHandler0(_ctx.onClick));
    parentRenderNode.addEventListener('focus', this.eventHandler0(_ctx.onFocus));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$HasHostListeners, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.HasHostListeners> _HasHostListenersNgFactory = const ComponentFactory('has-host-listeners', viewFactory_HasHostListenersHost0);
ComponentFactory<import1.HasHostListeners> get HasHostListenersNgFactory {
  return _HasHostListenersNgFactory;
}

final List<dynamic> styles$HasHostListenersHost = const [];

// Host for component HasHostListeners in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
class _ViewHasHostListenersHost0 extends import12.HostView<import1.HasHostListeners> {
  _ViewHasHostListenersHost0(import13.Injector injector) : super(injector);
  @override
  void build() {
    // Child component HasHostListeners in asset:_goldens/test/_files/dart2js/dart2js_golden.dart (changeDetection: Default)
    this.componentView = ViewHasHostListeners0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.HasHostListeners();
    this.initRootNode(_el_0);
  }
}

import12.HostView<import1.HasHostListeners> viewFactory_HasHostListenersHost0(import13.Injector injector) {
  return _ViewHasHostListenersHost0(injector);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(RootComponent, RootComponentNgFactory);
  _ngRef.registerComponent(UsesDefaultChangeDetectionAndInputs, UsesDefaultChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(DefaultChangeDetectionAndInputs, DefaultChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(UsesOnPushChangeDetectionAndInputs, UsesOnPushChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(OnPushChangeDetectionAndInputs, OnPushChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(InlinedNgIf, InlinedNgIfNgFactory);
  _ngRef.registerComponent(EmbeddedNgIf, EmbeddedNgIfNgFactory);
  _ngRef.registerComponent(EmbeddedNgFor, EmbeddedNgForNgFactory);
  _ngRef.registerComponent(NullComponent, NullComponentNgFactory);
  _ngRef.registerComponent(InjectsFromArbitraryParent, InjectsFromArbitraryParentNgFactory);
  _ngRef.registerComponent(ComponentConditionalFeatures, ComponentConditionalFeaturesNgFactory);
  _ngRef.registerComponent(FeatureA, FeatureANgFactory);
  _ngRef.registerComponent(FeatureB, FeatureBNgFactory);
  _ngRef.registerComponent(UsesDomBindings, UsesDomBindingsNgFactory);
  _ngRef.registerComponent(UsesNgDirectives, UsesNgDirectivesNgFactory);
  _ngRef.registerComponent(HasNestedProviderLookups, HasNestedProviderLookupsNgFactory);
  _ngRef.registerComponent(InjectsManyThingsDynamically, InjectsManyThingsDynamicallyNgFactory);
  _ngRef.registerComponent(HasHostListeners, HasHostListenersNgFactory);
  _ref0.initReflector();
  _ref1.initReflector();
}
