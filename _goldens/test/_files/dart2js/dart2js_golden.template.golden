// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'dart2js_golden.dart';
export 'dart2js_golden.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'dart2js_golden.template.dart' as _ref0;
import 'package:angular/angular.template.dart' as _ref1;
import 'package:angular/src/core/linker/app_view.dart';
import 'dart2js_golden.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/di/errors.dart' as import9;
import 'package:angular/src/core/di/opaque_token.dart' as import10;
import 'dart:core';
import 'package:angular/src/core/linker/app_view_utils.dart' as import12;
import 'package:angular/src/runtime/text_binding.dart' as import13;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import17;

final List<dynamic> styles$RootComponent = const [];

class ViewRootComponent0 extends AppView<import1.RootComponent> {
  import1.HasProviders _HasProviders_0_5;
  import1.A __A_0_6;
  import1.B __B_0_7;
  import1.C __C_0_8;
  import1.HasProvider _HasProvider_1_5;
  import1.C2 __C_1_6;
  import1.HasProvider _HasProvider_2_5;
  import1.C2 __C_2_6;
  ViewUsesDefaultChangeDetectionAndInputs0 _compView_3;
  import1.UsesDefaultChangeDetectionAndInputs _UsesDefaultChangeDetectionAndInputs_3_5;
  ViewUsesOnPushChangeDetectionAndInputs0 _compView_4;
  import1.UsesOnPushChangeDetectionAndInputs _UsesOnPushChangeDetectionAndInputs_4_5;
  ViewInlinedNgIf0 _compView_5;
  import1.InlinedNgIf _InlinedNgIf_5_5;
  ViewEmbeddedNgIf0 _compView_6;
  import1.EmbeddedNgIf _EmbeddedNgIf_6_5;
  ViewEmbeddedNgFor0 _compView_7;
  import1.EmbeddedNgFor _EmbeddedNgFor_7_5;
  ViewInjectsFromArbitraryParent0 _compView_8;
  import1.InjectsFromArbitraryParent _InjectsFromArbitraryParent_8_5;
  ViewComponentConditionalFeatures0 _compView_9;
  import1.ComponentConditionalFeatures _ComponentConditionalFeatures_9_5;
  ViewUsesDomBindings0 _compView_10;
  import1.UsesDomBindings _UsesDomBindings_10_5;
  static import2.ComponentStyles _componentStyles;
  ViewRootComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('root-component');
    initComponentStyles();
  }
  import1.A get _A_0_6 {
    if ((__A_0_6 == null)) {
      (__A_0_6 = import1.A());
    }
    return __A_0_6;
  }

  import1.B get _B_0_7 {
    if ((__B_0_7 == null)) {
      (__B_0_7 = import1.B());
    }
    return __B_0_7;
  }

  import1.C get _C_0_8 {
    if ((__C_0_8 == null)) {
      (__C_0_8 = import1.C());
    }
    return __C_0_8;
  }

  import1.C2 get _C_1_6 {
    if ((__C_1_6 == null)) {
      (__C_1_6 = import1.C2());
    }
    return __C_1_6;
  }

  import1.C2 get _C_2_6 {
    if ((__C_2_6 == null)) {
      (__C_2_6 = import1.C2());
    }
    return __C_2_6;
  }

  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.RootComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendDiv(doc, parentRenderNode);
    import8.setAttribute(_el_0, 'hasProviders', '');
    _HasProviders_0_5 = import1.HasProviders();
    final _el_1 = import8.appendDiv(doc, _el_0);
    import8.setAttribute(_el_1, 'hasProvider', '');
    _HasProvider_1_5 = import1.HasProvider();
    final _el_2 = import8.appendDiv(doc, parentRenderNode);
    import8.setAttribute(_el_2, 'hasProvider', '');
    _HasProvider_2_5 = import1.HasProvider();
    _compView_3 = ViewUsesDefaultChangeDetectionAndInputs0(this, 3);
    final _el_3 = _compView_3.rootEl;
    parentRenderNode.append(_el_3);
    _UsesDefaultChangeDetectionAndInputs_3_5 = import1.UsesDefaultChangeDetectionAndInputs();
    _compView_3.create(_UsesDefaultChangeDetectionAndInputs_3_5, []);
    _compView_4 = ViewUsesOnPushChangeDetectionAndInputs0(this, 4);
    final _el_4 = _compView_4.rootEl;
    parentRenderNode.append(_el_4);
    _UsesOnPushChangeDetectionAndInputs_4_5 = import1.UsesOnPushChangeDetectionAndInputs();
    _compView_4.create(_UsesOnPushChangeDetectionAndInputs_4_5, []);
    _compView_5 = ViewInlinedNgIf0(this, 5);
    final _el_5 = _compView_5.rootEl;
    parentRenderNode.append(_el_5);
    _InlinedNgIf_5_5 = import1.InlinedNgIf();
    _compView_5.create(_InlinedNgIf_5_5, []);
    _compView_6 = ViewEmbeddedNgIf0(this, 6);
    final _el_6 = _compView_6.rootEl;
    parentRenderNode.append(_el_6);
    _EmbeddedNgIf_6_5 = import1.EmbeddedNgIf();
    _compView_6.create(_EmbeddedNgIf_6_5, []);
    _compView_7 = ViewEmbeddedNgFor0(this, 7);
    final _el_7 = _compView_7.rootEl;
    parentRenderNode.append(_el_7);
    _EmbeddedNgFor_7_5 = import1.EmbeddedNgFor();
    _compView_7.create(_EmbeddedNgFor_7_5, []);
    _compView_8 = ViewInjectsFromArbitraryParent0(this, 8);
    final _el_8 = _compView_8.rootEl;
    parentRenderNode.append(_el_8);
    _InjectsFromArbitraryParent_8_5 = (import6.isDevMode
        ? import9.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(parentView.injectorGet(const import10.MultiToken<String>('usPresidents'), viewData.parentIndex), parentView.injectorGet(const import10.MultiToken<String>('whiteHouse'), viewData.parentIndex), parentView.injectorGet(import1.InjectableService, viewData.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(parentView.injectorGet(const import10.MultiToken<String>('usPresidents'), viewData.parentIndex), parentView.injectorGet(const import10.MultiToken<String>('whiteHouse'), viewData.parentIndex), parentView.injectorGet(import1.InjectableService, viewData.parentIndex)));
    _compView_8.create(_InjectsFromArbitraryParent_8_5, []);
    _compView_9 = ViewComponentConditionalFeatures0(this, 9);
    final _el_9 = _compView_9.rootEl;
    parentRenderNode.append(_el_9);
    _ComponentConditionalFeatures_9_5 = import1.ComponentConditionalFeatures();
    _compView_9.create(_ComponentConditionalFeatures_9_5, []);
    _compView_10 = ViewUsesDomBindings0(this, 10);
    final _el_10 = _compView_10.rootEl;
    parentRenderNode.append(_el_10);
    _UsesDomBindings_10_5 = import1.UsesDomBindings();
    _compView_10.create(_UsesDomBindings_10_5, []);
    init(const [], null);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.C) && (1 == nodeIndex))) {
      return _C_1_6;
    }
    if ((identical(token, import1.A) && (nodeIndex <= 1))) {
      return _A_0_6;
    }
    if ((identical(token, import1.B) && (nodeIndex <= 1))) {
      return _B_0_7;
    }
    if ((identical(token, import1.C) && (nodeIndex <= 1))) {
      return _C_0_8;
    }
    if ((identical(token, import1.C) && (2 == nodeIndex))) {
      return _C_2_6;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      _ComponentConditionalFeatures_9_5.useFeatureA = true;
      _ComponentConditionalFeatures_9_5.useFeatureB = false;
    }
    _compView_10.detectHostChanges(firstCheck);
    _compView_3.detectChanges();
    _compView_4.detectChanges();
    _compView_5.detectChanges();
    _compView_6.detectChanges();
    _compView_7.detectChanges();
    _compView_8.detectChanges();
    _compView_9.detectChanges();
    _compView_10.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_3.destroy();
    _compView_4.destroy();
    _compView_5.destroy();
    _compView_6.destroy();
    _compView_7.destroy();
    _compView_8.destroy();
    _compView_9.destroy();
    _compView_10.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$RootComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.RootComponent> _RootComponentNgFactory = const ComponentFactory('root-component', viewFactory_RootComponentHost0);
ComponentFactory<import1.RootComponent> get RootComponentNgFactory {
  return _RootComponentNgFactory;
}

final List<dynamic> styles$RootComponentHost = const [];

class _ViewRootComponentHost0 extends AppView<import1.RootComponent> {
  ViewRootComponent0 _compView_0;
  import1.RootComponent _RootComponent_0_5;
  _ViewRootComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.RootComponent> build() {
    _compView_0 = ViewRootComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _RootComponent_0_5 = import1.RootComponent();
    _compView_0.create(_RootComponent_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _RootComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.RootComponent> viewFactory_RootComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewRootComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputs = const [];

class ViewUsesDefaultChangeDetectionAndInputs0 extends AppView<import1.UsesDefaultChangeDetectionAndInputs> {
  ViewDefaultChangeDetectionAndInputs0 _compView_0;
  import1.DefaultChangeDetectionAndInputs _DefaultChangeDetectionAndInputs_0_5;
  String _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDefaultChangeDetectionAndInputs0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-default-change-detection-and-inputs');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.UsesDefaultChangeDetectionAndInputs> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewDefaultChangeDetectionAndInputs0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _DefaultChangeDetectionAndInputs_0_5 = import1.DefaultChangeDetectionAndInputs();
    _compView_0.create(_DefaultChangeDetectionAndInputs_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        (_DefaultChangeDetectionAndInputs_0_5.title = _ctx.title);
      }
    }
    final currVal_1 = _ctx.name;
    if (import12.checkBinding(_expr_1, currVal_1)) {
      _DefaultChangeDetectionAndInputs_0_5.name = currVal_1;
      _expr_1 = currVal_1;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDefaultChangeDetectionAndInputs, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> _UsesDefaultChangeDetectionAndInputsNgFactory = const ComponentFactory('uses-default-change-detection-and-inputs', viewFactory_UsesDefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesDefaultChangeDetectionAndInputs> get UsesDefaultChangeDetectionAndInputsNgFactory {
  return _UsesDefaultChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$UsesDefaultChangeDetectionAndInputsHost = const [];

class _ViewUsesDefaultChangeDetectionAndInputsHost0 extends AppView<import1.UsesDefaultChangeDetectionAndInputs> {
  ViewUsesDefaultChangeDetectionAndInputs0 _compView_0;
  import1.UsesDefaultChangeDetectionAndInputs _UsesDefaultChangeDetectionAndInputs_0_5;
  _ViewUsesDefaultChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesDefaultChangeDetectionAndInputs> build() {
    _compView_0 = ViewUsesDefaultChangeDetectionAndInputs0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesDefaultChangeDetectionAndInputs_0_5 = import1.UsesDefaultChangeDetectionAndInputs();
    _compView_0.create(_UsesDefaultChangeDetectionAndInputs_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesDefaultChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesDefaultChangeDetectionAndInputs> viewFactory_UsesDefaultChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesDefaultChangeDetectionAndInputsHost0(parentView, parentIndex);
}

final List<dynamic> styles$DefaultChangeDetectionAndInputs = const [];

class ViewDefaultChangeDetectionAndInputs0 extends AppView<import1.DefaultChangeDetectionAndInputs> {
  final import13.TextBinding _textBinding_1 = import13.TextBinding();
  final import13.TextBinding _textBinding_3 = import13.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewDefaultChangeDetectionAndInputs0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('default-change-detection-and-inputs');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.DefaultChangeDetectionAndInputs> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(_textBinding_1.element);
    final _text_2 = import8.appendText(parentRenderNode, ' ');
    parentRenderNode.append(_textBinding_3.element);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _textBinding_1.updateText((_ctx.title ?? ''));
    _textBinding_3.updateText((_ctx.name ?? ''));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$DefaultChangeDetectionAndInputs, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.DefaultChangeDetectionAndInputs> _DefaultChangeDetectionAndInputsNgFactory = const ComponentFactory('default-change-detection-and-inputs', viewFactory_DefaultChangeDetectionAndInputsHost0);
ComponentFactory<import1.DefaultChangeDetectionAndInputs> get DefaultChangeDetectionAndInputsNgFactory {
  return _DefaultChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$DefaultChangeDetectionAndInputsHost = const [];

class _ViewDefaultChangeDetectionAndInputsHost0 extends AppView<import1.DefaultChangeDetectionAndInputs> {
  ViewDefaultChangeDetectionAndInputs0 _compView_0;
  import1.DefaultChangeDetectionAndInputs _DefaultChangeDetectionAndInputs_0_5;
  _ViewDefaultChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.DefaultChangeDetectionAndInputs> build() {
    _compView_0 = ViewDefaultChangeDetectionAndInputs0(this, 0);
    rootEl = _compView_0.rootEl;
    _DefaultChangeDetectionAndInputs_0_5 = import1.DefaultChangeDetectionAndInputs();
    _compView_0.create(_DefaultChangeDetectionAndInputs_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DefaultChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.DefaultChangeDetectionAndInputs> viewFactory_DefaultChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDefaultChangeDetectionAndInputsHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputs = const [];

class ViewUsesOnPushChangeDetectionAndInputs0 extends AppView<import1.UsesOnPushChangeDetectionAndInputs> {
  ViewOnPushChangeDetectionAndInputs0 _compView_0;
  import1.OnPushChangeDetectionAndInputs _OnPushChangeDetectionAndInputs_0_5;
  String _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesOnPushChangeDetectionAndInputs0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-on-push-change-detection-and-inputs');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.UsesOnPushChangeDetectionAndInputs> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewOnPushChangeDetectionAndInputs0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _OnPushChangeDetectionAndInputs_0_5 = import1.OnPushChangeDetectionAndInputs();
    _compView_0.create(_OnPushChangeDetectionAndInputs_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    bool firstCheck = (this.cdState == 0);
    changed = false;
    if (firstCheck) {
      if (!identical(_ctx.title, null)) {
        _OnPushChangeDetectionAndInputs_0_5.title = _ctx.title;
        changed = true;
      }
    }
    final currVal_1 = _ctx.name;
    if (import12.checkBinding(_expr_1, currVal_1)) {
      _OnPushChangeDetectionAndInputs_0_5.name = currVal_1;
      changed = true;
      _expr_1 = currVal_1;
    }
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesOnPushChangeDetectionAndInputs, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> _UsesOnPushChangeDetectionAndInputsNgFactory = const ComponentFactory('uses-on-push-change-detection-and-inputs', viewFactory_UsesOnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.UsesOnPushChangeDetectionAndInputs> get UsesOnPushChangeDetectionAndInputsNgFactory {
  return _UsesOnPushChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$UsesOnPushChangeDetectionAndInputsHost = const [];

class _ViewUsesOnPushChangeDetectionAndInputsHost0 extends AppView<import1.UsesOnPushChangeDetectionAndInputs> {
  ViewUsesOnPushChangeDetectionAndInputs0 _compView_0;
  import1.UsesOnPushChangeDetectionAndInputs _UsesOnPushChangeDetectionAndInputs_0_5;
  _ViewUsesOnPushChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesOnPushChangeDetectionAndInputs> build() {
    _compView_0 = ViewUsesOnPushChangeDetectionAndInputs0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesOnPushChangeDetectionAndInputs_0_5 = import1.UsesOnPushChangeDetectionAndInputs();
    _compView_0.create(_UsesOnPushChangeDetectionAndInputs_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesOnPushChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesOnPushChangeDetectionAndInputs> viewFactory_UsesOnPushChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesOnPushChangeDetectionAndInputsHost0(parentView, parentIndex);
}

final List<dynamic> styles$OnPushChangeDetectionAndInputs = const [];

class ViewOnPushChangeDetectionAndInputs0 extends AppView<import1.OnPushChangeDetectionAndInputs> {
  final import13.TextBinding _textBinding_1 = import13.TextBinding();
  final import13.TextBinding _textBinding_3 = import13.TextBinding();
  static import2.ComponentStyles _componentStyles;
  ViewOnPushChangeDetectionAndInputs0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce) {
    rootEl = import5.document.createElement('on-push-change-detection-and-inputs');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.OnPushChangeDetectionAndInputs> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, 'Hello ');
    parentRenderNode.append(_textBinding_1.element);
    final _text_2 = import8.appendText(parentRenderNode, ' ');
    parentRenderNode.append(_textBinding_3.element);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _textBinding_1.updateText((_ctx.title ?? ''));
    _textBinding_3.updateText((_ctx.name ?? ''));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$OnPushChangeDetectionAndInputs, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.OnPushChangeDetectionAndInputs> _OnPushChangeDetectionAndInputsNgFactory = const ComponentFactory('on-push-change-detection-and-inputs', viewFactory_OnPushChangeDetectionAndInputsHost0);
ComponentFactory<import1.OnPushChangeDetectionAndInputs> get OnPushChangeDetectionAndInputsNgFactory {
  return _OnPushChangeDetectionAndInputsNgFactory;
}

final List<dynamic> styles$OnPushChangeDetectionAndInputsHost = const [];

class _ViewOnPushChangeDetectionAndInputsHost0 extends AppView<import1.OnPushChangeDetectionAndInputs> {
  ViewOnPushChangeDetectionAndInputs0 _compView_0;
  import1.OnPushChangeDetectionAndInputs _OnPushChangeDetectionAndInputs_0_5;
  _ViewOnPushChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.OnPushChangeDetectionAndInputs> build() {
    _compView_0 = ViewOnPushChangeDetectionAndInputs0(this, 0);
    rootEl = _compView_0.rootEl;
    _OnPushChangeDetectionAndInputs_0_5 = import1.OnPushChangeDetectionAndInputs();
    _compView_0.create(_OnPushChangeDetectionAndInputs_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _OnPushChangeDetectionAndInputs_0_5);
  }

  @override
  void detectChangesInternal() {
    bool changed = false;
    if (changed) {
      _compView_0.markAsCheckOnce();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.OnPushChangeDetectionAndInputs> viewFactory_OnPushChangeDetectionAndInputsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewOnPushChangeDetectionAndInputsHost0(parentView, parentIndex);
}

final List<dynamic> styles$InlinedNgIf = const [];

class ViewInlinedNgIf0 extends AppView<import1.InlinedNgIf> {
  bool _expr_0 = false;
  import5.Comment _anchor_0;
  import5.DivElement _el_0_0;
  static import2.ComponentStyles _componentStyles;
  ViewInlinedNgIf0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('inlined-ng-if');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.InlinedNgIf> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import8.appendAnchor(parentRenderNode);
    init([], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = (_ctx.showDiv == true);
    if (import12.checkBinding(_expr_0, currVal_0)) {
      if (currVal_0) {
        final doc = import5.document;
        _el_0_0 = doc.createElement('div');
        final _text_0_1 = import8.appendText(_el_0_0, 'Hello World');
        addInlinedNodes(_anchor_0, [_el_0_0], true);
      } else {
        removeInlinedNodes([_el_0_0], true);
      }
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InlinedNgIf, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.InlinedNgIf> _InlinedNgIfNgFactory = const ComponentFactory('inlined-ng-if', viewFactory_InlinedNgIfHost0);
ComponentFactory<import1.InlinedNgIf> get InlinedNgIfNgFactory {
  return _InlinedNgIfNgFactory;
}

final List<dynamic> styles$InlinedNgIfHost = const [];

class _ViewInlinedNgIfHost0 extends AppView<import1.InlinedNgIf> {
  ViewInlinedNgIf0 _compView_0;
  import1.InlinedNgIf _InlinedNgIf_0_5;
  _ViewInlinedNgIfHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InlinedNgIf> build() {
    _compView_0 = ViewInlinedNgIf0(this, 0);
    rootEl = _compView_0.rootEl;
    _InlinedNgIf_0_5 = import1.InlinedNgIf();
    _compView_0.create(_InlinedNgIf_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InlinedNgIf_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InlinedNgIf> viewFactory_InlinedNgIfHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInlinedNgIfHost0(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgIf = const [];

class ViewEmbeddedNgIf0 extends AppView<import1.EmbeddedNgIf> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import2.ComponentStyles _componentStyles;
  ViewEmbeddedNgIf0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('embedded-ng-if');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedNgIf> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import8.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_EmbeddedNgIf1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.showNull;
    _appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmbeddedNgIf, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedNgIf> _EmbeddedNgIfNgFactory = const ComponentFactory('embedded-ng-if', viewFactory_EmbeddedNgIfHost0);
ComponentFactory<import1.EmbeddedNgIf> get EmbeddedNgIfNgFactory {
  return _EmbeddedNgIfNgFactory;
}

class _ViewEmbeddedNgIf1 extends AppView<import1.EmbeddedNgIf> {
  ViewNullComponent0 _compView_0;
  import1.NullComponent _NullComponent_0_5;
  _ViewEmbeddedNgIf1(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedNgIf> build() {
    _compView_0 = ViewNullComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _NullComponent_0_5 = import1.NullComponent();
    _compView_0.create(_NullComponent_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<void> viewFactory_EmbeddedNgIf1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedNgIf1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgIfHost = const [];

class _ViewEmbeddedNgIfHost0 extends AppView<import1.EmbeddedNgIf> {
  ViewEmbeddedNgIf0 _compView_0;
  import1.EmbeddedNgIf _EmbeddedNgIf_0_5;
  _ViewEmbeddedNgIfHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedNgIf> build() {
    _compView_0 = ViewEmbeddedNgIf0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmbeddedNgIf_0_5 = import1.EmbeddedNgIf();
    _compView_0.create(_EmbeddedNgIf_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmbeddedNgIf_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.EmbeddedNgIf> viewFactory_EmbeddedNgIfHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedNgIfHost0(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgFor = const [];

class ViewEmbeddedNgFor0 extends AppView<import1.EmbeddedNgFor> {
  ViewContainer _appEl_1;
  import17.NgFor _NgFor_1_9;
  static import2.ComponentStyles _componentStyles;
  ViewEmbeddedNgFor0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('embedded-ng-for');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedNgFor> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendElement(doc, parentRenderNode, 'ul');
    final _anchor_1 = import8.appendAnchor(_el_0);
    _appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_EmbeddedNgFor1);
    _NgFor_1_9 = import17.NgFor(_appEl_1, _TemplateRef_1_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.items, null)) {
        (_NgFor_1_9.ngForOf = _ctx.items);
      }
    }
    if (!import12.AppViewUtils.throwOnChanges) {
      _NgFor_1_9.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmbeddedNgFor, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedNgFor> _EmbeddedNgForNgFactory = const ComponentFactory('embedded-ng-for', viewFactory_EmbeddedNgForHost0);
ComponentFactory<import1.EmbeddedNgFor> get EmbeddedNgForNgFactory {
  return _EmbeddedNgForNgFactory;
}

class _ViewEmbeddedNgFor1 extends AppView<import1.EmbeddedNgFor> {
  final import13.TextBinding _textBinding_1 = import13.TextBinding();
  _ViewEmbeddedNgFor1(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedNgFor> build() {
    final doc = import5.document;
    final _el_0 = doc.createElement('li');
    _el_0.append(_textBinding_1.element);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_item = import6.unsafeCast<String>(locals['\$implicit']);
    _textBinding_1.updateText(import12.interpolateString0(local_item));
  }
}

AppView<void> viewFactory_EmbeddedNgFor1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedNgFor1(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedNgForHost = const [];

class _ViewEmbeddedNgForHost0 extends AppView<import1.EmbeddedNgFor> {
  ViewEmbeddedNgFor0 _compView_0;
  import1.EmbeddedNgFor _EmbeddedNgFor_0_5;
  _ViewEmbeddedNgForHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedNgFor> build() {
    _compView_0 = ViewEmbeddedNgFor0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmbeddedNgFor_0_5 = import1.EmbeddedNgFor();
    _compView_0.create(_EmbeddedNgFor_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmbeddedNgFor_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.EmbeddedNgFor> viewFactory_EmbeddedNgForHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedNgForHost0(parentView, parentIndex);
}

final List<dynamic> styles$NullComponent = const [];

class ViewNullComponent0 extends AppView<import1.NullComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewNullComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('null');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.NullComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$NullComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.NullComponent> _NullComponentNgFactory = const ComponentFactory('null', viewFactory_NullComponentHost0);
ComponentFactory<import1.NullComponent> get NullComponentNgFactory {
  return _NullComponentNgFactory;
}

final List<dynamic> styles$NullComponentHost = const [];

class _ViewNullComponentHost0 extends AppView<import1.NullComponent> {
  ViewNullComponent0 _compView_0;
  import1.NullComponent _NullComponent_0_5;
  _ViewNullComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NullComponent> build() {
    _compView_0 = ViewNullComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _NullComponent_0_5 = import1.NullComponent();
    _compView_0.create(_NullComponent_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _NullComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.NullComponent> viewFactory_NullComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNullComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$InjectsFromArbitraryParent = const [];

class ViewInjectsFromArbitraryParent0 extends AppView<import1.InjectsFromArbitraryParent> {
  static import2.ComponentStyles _componentStyles;
  ViewInjectsFromArbitraryParent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('injects-from-arbitrary-parent');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.InjectsFromArbitraryParent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$InjectsFromArbitraryParent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.InjectsFromArbitraryParent> _InjectsFromArbitraryParentNgFactory = const ComponentFactory('injects-from-arbitrary-parent', viewFactory_InjectsFromArbitraryParentHost0);
ComponentFactory<import1.InjectsFromArbitraryParent> get InjectsFromArbitraryParentNgFactory {
  return _InjectsFromArbitraryParentNgFactory;
}

final List<dynamic> styles$InjectsFromArbitraryParentHost = const [];

class _ViewInjectsFromArbitraryParentHost0 extends AppView<import1.InjectsFromArbitraryParent> {
  ViewInjectsFromArbitraryParent0 _compView_0;
  import1.InjectsFromArbitraryParent _InjectsFromArbitraryParent_0_5;
  _ViewInjectsFromArbitraryParentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.InjectsFromArbitraryParent> build() {
    _compView_0 = ViewInjectsFromArbitraryParent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InjectsFromArbitraryParent_0_5 = (import6.isDevMode
        ? import9.debugInjectorWrap(import1.InjectsFromArbitraryParent, () {
            return import1.InjectsFromArbitraryParent(this.injectorGet(const import10.MultiToken<String>('usPresidents'), viewData.parentIndex), this.injectorGet(const import10.MultiToken<String>('whiteHouse'), viewData.parentIndex), this.injectorGet(import1.InjectableService, viewData.parentIndex));
          })
        : import1.InjectsFromArbitraryParent(this.injectorGet(const import10.MultiToken<String>('usPresidents'), viewData.parentIndex), this.injectorGet(const import10.MultiToken<String>('whiteHouse'), viewData.parentIndex), this.injectorGet(import1.InjectableService, viewData.parentIndex)));
    _compView_0.create(_InjectsFromArbitraryParent_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _InjectsFromArbitraryParent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.InjectsFromArbitraryParent> viewFactory_InjectsFromArbitraryParentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewInjectsFromArbitraryParentHost0(parentView, parentIndex);
}

final List<dynamic> styles$ComponentConditionalFeatures = const [];

class ViewComponentConditionalFeatures0 extends AppView<import1.ComponentConditionalFeatures> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  static import2.ComponentStyles _componentStyles;
  ViewComponentConditionalFeatures0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('component-conditional-features');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.ComponentConditionalFeatures> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import8.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_ComponentConditionalFeatures1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    final _anchor_1 = import8.appendAnchor(parentRenderNode);
    _appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_ComponentConditionalFeatures2);
    _NgIf_1_9 = NgIf(_appEl_1, _TemplateRef_1_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.useFeatureA;
    _NgIf_1_9.ngIf = _ctx.useFeatureB;
    _appEl_0.detectChangesInNestedViews();
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
    _appEl_1.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ComponentConditionalFeatures, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.ComponentConditionalFeatures> _ComponentConditionalFeaturesNgFactory = const ComponentFactory('component-conditional-features', viewFactory_ComponentConditionalFeaturesHost0);
ComponentFactory<import1.ComponentConditionalFeatures> get ComponentConditionalFeaturesNgFactory {
  return _ComponentConditionalFeaturesNgFactory;
}

class _ViewComponentConditionalFeatures1 extends AppView<import1.ComponentConditionalFeatures> {
  ViewFeatureA0 _compView_0;
  import1.FeatureA _FeatureA_0_5;
  _ViewComponentConditionalFeatures1(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.ComponentConditionalFeatures> build() {
    _compView_0 = ViewFeatureA0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _FeatureA_0_5 = import1.FeatureA();
    _compView_0.create(_FeatureA_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<void> viewFactory_ComponentConditionalFeatures1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures1(parentView, parentIndex);
}

class _ViewComponentConditionalFeatures2 extends AppView<import1.ComponentConditionalFeatures> {
  ViewFeatureB0 _compView_0;
  import1.FeatureB _FeatureB_0_5;
  _ViewComponentConditionalFeatures2(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.ComponentConditionalFeatures> build() {
    _compView_0 = ViewFeatureB0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _FeatureB_0_5 = import1.FeatureB();
    _compView_0.create(_FeatureB_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<void> viewFactory_ComponentConditionalFeatures2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewComponentConditionalFeatures2(parentView, parentIndex);
}

final List<dynamic> styles$ComponentConditionalFeaturesHost = const [];

class _ViewComponentConditionalFeaturesHost0 extends AppView<import1.ComponentConditionalFeatures> {
  ViewComponentConditionalFeatures0 _compView_0;
  import1.ComponentConditionalFeatures _ComponentConditionalFeatures_0_5;
  _ViewComponentConditionalFeaturesHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.ComponentConditionalFeatures> build() {
    _compView_0 = ViewComponentConditionalFeatures0(this, 0);
    rootEl = _compView_0.rootEl;
    _ComponentConditionalFeatures_0_5 = import1.ComponentConditionalFeatures();
    _compView_0.create(_ComponentConditionalFeatures_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _ComponentConditionalFeatures_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.ComponentConditionalFeatures> viewFactory_ComponentConditionalFeaturesHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewComponentConditionalFeaturesHost0(parentView, parentIndex);
}

final List<dynamic> styles$FeatureA = const [];

class ViewFeatureA0 extends AppView<import1.FeatureA> {
  static import2.ComponentStyles _componentStyles;
  ViewFeatureA0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('feature-a');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.FeatureA> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, 'I am Feature A');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FeatureA, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.FeatureA> _FeatureANgFactory = const ComponentFactory('feature-a', viewFactory_FeatureAHost0);
ComponentFactory<import1.FeatureA> get FeatureANgFactory {
  return _FeatureANgFactory;
}

final List<dynamic> styles$FeatureAHost = const [];

class _ViewFeatureAHost0 extends AppView<import1.FeatureA> {
  ViewFeatureA0 _compView_0;
  import1.FeatureA _FeatureA_0_5;
  _ViewFeatureAHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.FeatureA> build() {
    _compView_0 = ViewFeatureA0(this, 0);
    rootEl = _compView_0.rootEl;
    _FeatureA_0_5 = import1.FeatureA();
    _compView_0.create(_FeatureA_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _FeatureA_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.FeatureA> viewFactory_FeatureAHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewFeatureAHost0(parentView, parentIndex);
}

final List<dynamic> styles$FeatureB = const [];

class ViewFeatureB0 extends AppView<import1.FeatureB> {
  static import2.ComponentStyles _componentStyles;
  ViewFeatureB0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('feature-b');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.FeatureB> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _text_0 = import8.appendText(parentRenderNode, 'I am Feature B');
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FeatureB, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.FeatureB> _FeatureBNgFactory = const ComponentFactory('feature-b', viewFactory_FeatureBHost0);
ComponentFactory<import1.FeatureB> get FeatureBNgFactory {
  return _FeatureBNgFactory;
}

final List<dynamic> styles$FeatureBHost = const [];

class _ViewFeatureBHost0 extends AppView<import1.FeatureB> {
  ViewFeatureB0 _compView_0;
  import1.FeatureB _FeatureB_0_5;
  _ViewFeatureBHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.FeatureB> build() {
    _compView_0 = ViewFeatureB0(this, 0);
    rootEl = _compView_0.rootEl;
    _FeatureB_0_5 = import1.FeatureB();
    _compView_0.create(_FeatureB_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _FeatureB_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.FeatureB> viewFactory_FeatureBHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewFeatureBHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesDomBindings = const [];

class ViewUsesDomBindings0 extends AppView<import1.UsesDomBindings> {
  var _expr_0;
  bool _expr_1;
  var _expr_2;
  bool _expr_3;
  import5.ButtonElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesDomBindings0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-dom-bindings');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/dart2js/dart2js_golden.dart' : null);
  }

  @override
  ComponentRef<import1.UsesDomBindings> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    _el_0 = import8.appendElement(doc, parentRenderNode, 'button');
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.title;
    if (import12.checkBinding(_expr_0, currVal_0)) {
      import8.updateAttribute(_el_0, 'title', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.isFancy;
    if (import12.checkBinding(_expr_1, currVal_1)) {
      import8.updateClassBinding(_el_0, 'fancy', currVal_1);
      _expr_1 = currVal_1;
    }
  }

  void detectHostChanges(bool firstCheck) {
    final currVal_2 = ctx.title;
    if (import12.checkBinding(_expr_2, currVal_2)) {
      import8.updateAttribute(rootEl, 'title', currVal_2);
      _expr_2 = currVal_2;
    }
    final currVal_3 = ctx.isFancy;
    if (import12.checkBinding(_expr_3, currVal_3)) {
      import8.updateClassBindingNonHtml(rootEl, 'fancy', currVal_3);
      _expr_3 = currVal_3;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesDomBindings, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesDomBindings> _UsesDomBindingsNgFactory = const ComponentFactory('uses-dom-bindings', viewFactory_UsesDomBindingsHost0);
ComponentFactory<import1.UsesDomBindings> get UsesDomBindingsNgFactory {
  return _UsesDomBindingsNgFactory;
}

final List<dynamic> styles$UsesDomBindingsHost = const [];

class _ViewUsesDomBindingsHost0 extends AppView<import1.UsesDomBindings> {
  ViewUsesDomBindings0 _compView_0;
  import1.UsesDomBindings _UsesDomBindings_0_5;
  _ViewUsesDomBindingsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesDomBindings> build() {
    _compView_0 = ViewUsesDomBindings0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesDomBindings_0_5 = import1.UsesDomBindings();
    _compView_0.create(_UsesDomBindings_0_5, projectedNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesDomBindings_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesDomBindings> viewFactory_UsesDomBindingsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesDomBindingsHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(RootComponent, RootComponentNgFactory);
  _ngRef.registerComponent(UsesDefaultChangeDetectionAndInputs, UsesDefaultChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(DefaultChangeDetectionAndInputs, DefaultChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(UsesOnPushChangeDetectionAndInputs, UsesOnPushChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(OnPushChangeDetectionAndInputs, OnPushChangeDetectionAndInputsNgFactory);
  _ngRef.registerComponent(InlinedNgIf, InlinedNgIfNgFactory);
  _ngRef.registerComponent(EmbeddedNgIf, EmbeddedNgIfNgFactory);
  _ngRef.registerComponent(EmbeddedNgFor, EmbeddedNgForNgFactory);
  _ngRef.registerComponent(NullComponent, NullComponentNgFactory);
  _ngRef.registerComponent(InjectsFromArbitraryParent, InjectsFromArbitraryParentNgFactory);
  _ngRef.registerComponent(ComponentConditionalFeatures, ComponentConditionalFeaturesNgFactory);
  _ngRef.registerComponent(FeatureA, FeatureANgFactory);
  _ngRef.registerComponent(FeatureB, FeatureBNgFactory);
  _ngRef.registerComponent(UsesDomBindings, UsesDomBindingsNgFactory);
  _ref0.initReflector();
  _ref1.initReflector();
}
