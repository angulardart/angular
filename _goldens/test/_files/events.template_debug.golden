// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'events.dart';
export 'events.dart';
import 'dart:async';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'events.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$UsesNativeEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesNativeEvents0 = [null];

class ViewUsesNativeEvents0 extends DebugAppView<import2.UsesNativeEvents> {
  import3.ButtonElement _el_0;
  static RenderComponentType _renderType;
  ViewUsesNativeEvents0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_UsesNativeEvents0) {
    rootEl = import3.document.createElement('uses-native-events');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/events.dart class UsesNativeEvents - inline template', ViewEncapsulation.None, styles$UsesNativeEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.UsesNativeEvents> build() {
    final import2.UsesNativeEvents _ctx = ctx;
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'button', parentRenderNode, 0, 0, 4);
    _el_0.addEventListener('click', eventHandler0(ctx.onClick));
    init(const [], null, [_el_0]);
    _rootEl.addEventListener('focus', eventHandler0(_ctx.onFocus));
    return null;
  }
}

AppView<import2.UsesNativeEvents> viewFactory_UsesNativeEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewUsesNativeEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesNativeEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesNativeEventsHost0 = [
  new StaticNodeDebugInfo([import2.UsesNativeEvents], import2.UsesNativeEvents, <String, dynamic>{})
];

class _ViewUsesNativeEventsHost0 extends DebugAppView<dynamic> {
  ViewUsesNativeEvents0 _compView_0;
  import2.UsesNativeEvents _UsesNativeEvents_0_5;
  _ViewUsesNativeEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_UsesNativeEventsHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesNativeEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _UsesNativeEvents_0_5 = new import2.UsesNativeEvents();
    _compView_0.create(_UsesNativeEvents_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.UsesNativeEvents>(0, this, rootEl, _UsesNativeEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_UsesNativeEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewUsesNativeEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import2.UsesNativeEvents> UsesNativeEventsNgFactory = const ComponentFactory<import2.UsesNativeEvents>('uses-native-events', viewFactory_UsesNativeEventsHost0, _UsesNativeEventsMetadata);
const List<dynamic> styles$UsesAngularEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesAngularEvents0 = [
  new StaticNodeDebugInfo([import2.HasAngularEvents], import2.HasAngularEvents, <String, dynamic>{})
];

class ViewUsesAngularEvents0 extends DebugAppView<import2.UsesAngularEvents> {
  import3.Element _el_0;
  ViewHasAngularEvents0 _compView_0;
  import2.HasAngularEvents _HasAngularEvents_0_5;
  static RenderComponentType _renderType;
  ViewUsesAngularEvents0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_UsesAngularEvents0) {
    rootEl = import3.document.createElement('uses-angular-events');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/events.dart class UsesAngularEvents - inline template', ViewEncapsulation.None, styles$UsesAngularEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.UsesAngularEvents> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = new ViewHasAngularEvents0(this, 0);
    _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    dbgElm(this, _el_0, 0, 0, 4);
    _HasAngularEvents_0_5 = new import2.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_5, []);
    final subscription_0 = _HasAngularEvents_0_5.foo.listen(eventHandler0(ctx.onFoo));
    init(const [], [subscription_0], [_el_0]);
    return null;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import2.UsesAngularEvents> viewFactory_UsesAngularEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewUsesAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$UsesAngularEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_UsesAngularEventsHost0 = [
  new StaticNodeDebugInfo([import2.UsesAngularEvents], import2.UsesAngularEvents, <String, dynamic>{})
];

class _ViewUsesAngularEventsHost0 extends DebugAppView<dynamic> {
  ViewUsesAngularEvents0 _compView_0;
  import2.UsesAngularEvents _UsesAngularEvents_0_5;
  _ViewUsesAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_UsesAngularEventsHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewUsesAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _UsesAngularEvents_0_5 = new import2.UsesAngularEvents();
    _compView_0.create(_UsesAngularEvents_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.UsesAngularEvents>(0, this, rootEl, _UsesAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_UsesAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewUsesAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import2.UsesAngularEvents> UsesAngularEventsNgFactory = const ComponentFactory<import2.UsesAngularEvents>('uses-angular-events', viewFactory_UsesAngularEventsHost0, _UsesAngularEventsMetadata);
const List<dynamic> styles$HasAngularEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasAngularEvents0 = [];

class ViewHasAngularEvents0 extends DebugAppView<import2.HasAngularEvents> {
  static RenderComponentType _renderType;
  ViewHasAngularEvents0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_HasAngularEvents0) {
    rootEl = import3.document.createElement('has-angular-events');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/events.dart class HasAngularEvents - inline template', ViewEncapsulation.None, styles$HasAngularEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.HasAngularEvents> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null, []);
    return null;
  }
}

AppView<import2.HasAngularEvents> viewFactory_HasAngularEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHasAngularEvents0(parentView, parentIndex);
}

const List<dynamic> styles$HasAngularEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasAngularEventsHost0 = [
  new StaticNodeDebugInfo([import2.HasAngularEvents], import2.HasAngularEvents, <String, dynamic>{})
];

class _ViewHasAngularEventsHost0 extends DebugAppView<dynamic> {
  ViewHasAngularEvents0 _compView_0;
  import2.HasAngularEvents _HasAngularEvents_0_5;
  _ViewHasAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_HasAngularEventsHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasAngularEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _HasAngularEvents_0_5 = new import2.HasAngularEvents();
    _compView_0.create(_HasAngularEvents_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.HasAngularEvents>(0, this, rootEl, _HasAngularEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HasAngularEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHasAngularEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import2.HasAngularEvents> HasAngularEventsNgFactory = const ComponentFactory<import2.HasAngularEvents>('has-angular-events', viewFactory_HasAngularEventsHost0, _HasAngularEventsMetadata);
const List<dynamic> styles$HasManyNativeHostEvents = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasManyNativeHostEvents0 = [];

class ViewHasManyNativeHostEvents0 extends DebugAppView<import2.HasManyNativeHostEvents> {
  static RenderComponentType _renderType;
  ViewHasManyNativeHostEvents0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_HasManyNativeHostEvents0) {
    rootEl = import3.document.createElement('material-button-like');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/events.dart class HasManyNativeHostEvents - inline template', ViewEncapsulation.None, styles$HasManyNativeHostEvents);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.HasManyNativeHostEvents> build() {
    final import2.HasManyNativeHostEvents _ctx = ctx;
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null, []);
    _rootEl.addEventListener('mousedown', eventHandler0(_ctx.onMouseDown));
    _rootEl.addEventListener('mouseup', eventHandler0(_ctx.onMouseUp));
    _rootEl.addEventListener('click', eventHandler0(_ctx.onClick));
    _rootEl.addEventListener('keypress', eventHandler0(_ctx.onKeyPress));
    _rootEl.addEventListener('focus', eventHandler0(_ctx.onFocus));
    _rootEl.addEventListener('blur', eventHandler0(_ctx.onBlur));
    return null;
  }
}

AppView<import2.HasManyNativeHostEvents> viewFactory_HasManyNativeHostEvents0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewHasManyNativeHostEvents0(parentView, parentIndex);
}

const List<dynamic> styles$HasManyNativeHostEventsHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HasManyNativeHostEventsHost0 = [
  new StaticNodeDebugInfo([import2.HasManyNativeHostEvents], import2.HasManyNativeHostEvents, <String, dynamic>{})
];

class _ViewHasManyNativeHostEventsHost0 extends DebugAppView<dynamic> {
  ViewHasManyNativeHostEvents0 _compView_0;
  import2.HasManyNativeHostEvents _HasManyNativeHostEvents_0_5;
  _ViewHasManyNativeHostEventsHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_HasManyNativeHostEventsHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewHasManyNativeHostEvents0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _HasManyNativeHostEvents_0_5 = new import2.HasManyNativeHostEvents();
    _compView_0.create(_HasManyNativeHostEvents_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.HasManyNativeHostEvents>(0, this, rootEl, _HasManyNativeHostEvents_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_HasManyNativeHostEventsHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewHasManyNativeHostEventsHost0(parentView, parentIndex);
}

const ComponentFactory<import2.HasManyNativeHostEvents> HasManyNativeHostEventsNgFactory = const ComponentFactory<import2.HasManyNativeHostEvents>('material-button-like', viewFactory_HasManyNativeHostEventsHost0, _HasManyNativeHostEventsMetadata);
const _UsesNativeEventsMetadata = const [];
const _UsesAngularEventsMetadata = const [];
const _HasAngularEventsMetadata = const [];
const _HasManyNativeHostEventsMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesNativeEvents, UsesNativeEventsNgFactory);
  _ngRef.registerComponent(UsesAngularEvents, UsesAngularEventsNgFactory);
  _ngRef.registerComponent(HasAngularEvents, HasAngularEventsNgFactory);
  _ngRef.registerComponent(HasManyNativeHostEvents, HasManyNativeHostEventsNgFactory);
  _ref0.initReflector();
}
