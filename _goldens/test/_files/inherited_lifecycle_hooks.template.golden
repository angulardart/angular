// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'inherited_lifecycle_hooks.dart';
export 'inherited_lifecycle_hooks.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'inherited_lifecycle_hooks.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;

final List<dynamic> styles$LifecycleHooksComponent = const [];

class ViewLifecycleHooksComponent0 extends AppView<import1.LifecycleHooksComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('lifecycle-hooks');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/inherited_lifecycle_hooks.dart' : null);
  }

  @override
  ComponentRef<import1.LifecycleHooksComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$LifecycleHooksComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewLifecycleHooksComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.LifecycleHooksComponent> _LifecycleHooksComponentNgFactory = const ComponentFactory('lifecycle-hooks', viewFactory_LifecycleHooksComponentHost0);
ComponentFactory<import1.LifecycleHooksComponent> get LifecycleHooksComponentNgFactory {
  return _LifecycleHooksComponentNgFactory;
}

final List<dynamic> styles$LifecycleHooksComponentHost = const [];

class _ViewLifecycleHooksComponentHost0 extends AppView<import1.LifecycleHooksComponent> {
  ViewLifecycleHooksComponent0 _compView_0;
  import1.LifecycleHooksComponent _LifecycleHooksComponent_0_5;
  _ViewLifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.LifecycleHooksComponent> build() {
    _compView_0 = ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _LifecycleHooksComponent_0_5 = import1.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _LifecycleHooksComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if ((!import8.AppViewUtils.throwOnChanges && firstCheck)) {
      _LifecycleHooksComponent_0_5.ngOnInit();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      _LifecycleHooksComponent_0_5.ngDoCheck();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      if (firstCheck) {
        _LifecycleHooksComponent_0_5.ngAfterContentInit();
      }
      _LifecycleHooksComponent_0_5.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if (!import8.AppViewUtils.throwOnChanges) {
      if (firstCheck) {
        _LifecycleHooksComponent_0_5.ngAfterViewInit();
      }
      _LifecycleHooksComponent_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
    _LifecycleHooksComponent_0_5.ngOnDestroy();
  }
}

AppView<import1.LifecycleHooksComponent> viewFactory_LifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(LifecycleHooksComponent, LifecycleHooksComponentNgFactory);
  _ref0.initReflector();
}
