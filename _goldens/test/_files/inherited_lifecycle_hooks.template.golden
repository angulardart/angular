// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'inherited_lifecycle_hooks.dart';
export 'inherited_lifecycle_hooks.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'inherited_lifecycle_hooks.dart' as import0;
import 'package:angular/src/core/linker/view_type.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/app_view_utils.dart' as import3;
import 'package:angular/src/runtime.dart' as import4;

final List<dynamic> styles$LifecycleHooksComponent = const [];

class ViewLifecycleHooksComponent0 extends AppView<import0.LifecycleHooksComponent> {
  static RenderComponentType _renderType;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) : super(import1.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('lifecycle-hooks');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/inherited_lifecycle_hooks.dart' : null), ViewEncapsulation.None, styles$LifecycleHooksComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.LifecycleHooksComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

AppView<import0.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewLifecycleHooksComponent0(parentView, parentIndex);
}

final List<dynamic> styles$LifecycleHooksComponentHost = const [];

class _ViewLifecycleHooksComponentHost0 extends AppView<import0.LifecycleHooksComponent> {
  ViewLifecycleHooksComponent0 _compView_0;
  import0.LifecycleHooksComponent _LifecycleHooksComponent_0_5;
  _ViewLifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import1.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.LifecycleHooksComponent> build() {
    _compView_0 = ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _LifecycleHooksComponent_0_5 = import0.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _LifecycleHooksComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if ((!import3.AppViewUtils.throwOnChanges && firstCheck)) {
      _LifecycleHooksComponent_0_5.ngOnInit();
    }
    if (!import3.AppViewUtils.throwOnChanges) {
      _LifecycleHooksComponent_0_5.ngDoCheck();
    }
    if (!import3.AppViewUtils.throwOnChanges) {
      if (firstCheck) {
        _LifecycleHooksComponent_0_5.ngAfterContentInit();
      }
      _LifecycleHooksComponent_0_5.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if (!import3.AppViewUtils.throwOnChanges) {
      if (firstCheck) {
        _LifecycleHooksComponent_0_5.ngAfterViewInit();
      }
      _LifecycleHooksComponent_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
    _LifecycleHooksComponent_0_5.ngOnDestroy();
  }
}

AppView<import0.LifecycleHooksComponent> viewFactory_LifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.LifecycleHooksComponent> _LifecycleHooksComponentNgFactory = const ComponentFactory('lifecycle-hooks', viewFactory_LifecycleHooksComponentHost0);
ComponentFactory<import0.LifecycleHooksComponent> get LifecycleHooksComponentNgFactory {
  return _LifecycleHooksComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(LifecycleHooksComponent, LifecycleHooksComponentNgFactory);
  _ref0.initReflector();
}
