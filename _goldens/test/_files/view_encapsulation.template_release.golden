// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'view_encapsulation.dart';
export 'view_encapsulation.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'view_encapsulation.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/angular.dart';

const List<dynamic> styles$EmulatedComponent = const [];

class ViewEmulatedComponent0 extends AppView<import1.EmulatedComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewEmulatedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('Emulated');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$EmulatedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.EmulatedComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import2.Text _text_1 = new import2.Text('Emulated');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.EmulatedComponent> viewFactory_EmulatedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewEmulatedComponent0(parentView, parentIndex);
}

const List<dynamic> styles$EmulatedComponentHost = const [];

class _ViewEmulatedComponentHost0 extends AppView<dynamic> {
  ViewEmulatedComponent0 _compView_0;
  import1.EmulatedComponent _EmulatedComponent_0_5;
  _ViewEmulatedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewEmulatedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmulatedComponent_0_5 = new import1.EmulatedComponent();
    _compView_0.create(_EmulatedComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.EmulatedComponent>(0, this, rootEl, _EmulatedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_EmulatedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewEmulatedComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.EmulatedComponent> EmulatedComponentNgFactory = const ComponentFactory<import1.EmulatedComponent>('Emulated', viewFactory_EmulatedComponentHost0, _EmulatedComponentMetadata);
const List<dynamic> styles$NoneComponent = const [];

class ViewNoneComponent0 extends AppView<import1.NoneComponent> {
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewNoneComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('None');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$NoneComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.NoneComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import2.Text _text_1 = new import2.Text('None');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.NoneComponent> viewFactory_NoneComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewNoneComponent0(parentView, parentIndex);
}

const List<dynamic> styles$NoneComponentHost = const [];

class _ViewNoneComponentHost0 extends AppView<dynamic> {
  ViewNoneComponent0 _compView_0;
  import1.NoneComponent _NoneComponent_0_5;
  _ViewNoneComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewNoneComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _NoneComponent_0_5 = new import1.NoneComponent();
    _compView_0.create(_NoneComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.NoneComponent>(0, this, rootEl, _NoneComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_NoneComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewNoneComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.NoneComponent> NoneComponentNgFactory = const ComponentFactory<import1.NoneComponent>('None', viewFactory_NoneComponentHost0, _NoneComponentMetadata);
const _EmulatedComponentMetadata = const [];
const _NoneComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(EmulatedComponent, EmulatedComponentNgFactory);
  _ngRef.registerComponent(NoneComponent, NoneComponentNgFactory);
  _ref0.initReflector();
}
