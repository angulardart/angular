// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'pipes.dart';
export 'pipes.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'pipes.dart' as import1;
import 'dart:core';
import 'dart:html' as import3;
import 'package:angular/src/runtime/dom_helpers.dart' as import4;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import5;
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import10;

final List<dynamic> styles$Comp = const [];

class ViewComp0 extends AppView<import1.Comp> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  var _expr_3;
  import1.PurePipe _pipe_pure_0;
  dynamic Function(dynamic) _pipe_pure_0_0;
  import1.DirtyPipe _pipe_dirty_1;
  import1.LifecyclePipe _pipe_lifecycle_2;
  dynamic Function(dynamic) _pipe_lifecycle_2_0;
  import1.TypesPipe _pipe_types_3;
  String Function(String, int, dynamic, import1.C, void Function(String)) _pipe_types_3_0;
  final import3.Text _text_0 = import4.createText('');
  final import3.Text _text_2 = import4.createText('');
  final import3.Text _text_4 = import4.createText('');
  final import3.Text _text_6 = import4.createText('');
  static import5.ComponentStyles _componentStyles;
  ViewComp0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import3.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/pipes.dart' : null);
  }

  @override
  ComponentRef<import1.Comp> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    parentRenderNode.append(_text_0);
    final _text_1 = import4.appendText(parentRenderNode, ' ');
    parentRenderNode.append(_text_2);
    final _text_3 = import4.appendText(parentRenderNode, ' ');
    parentRenderNode.append(_text_4);
    final _text_5 = import4.appendText(parentRenderNode, ' ');
    parentRenderNode.append(_text_6);
    _pipe_pure_0 = import1.PurePipe();
    _pipe_pure_0_0 = import10.pureProxy1(_pipe_pure_0.transform);
    _pipe_dirty_1 = import1.DirtyPipe();
    _pipe_lifecycle_2 = import1.LifecyclePipe();
    _pipe_lifecycle_2_0 = import10.pureProxy1(_pipe_lifecycle_2.transform);
    _pipe_types_3 = import1.TypesPipe();
    _pipe_types_3_0 = import10.pureProxy5(_pipe_types_3.transform);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = import10.interpolate0(_pipe_pure_0_0('foo'));
    if (import10.checkBinding(_expr_0, currVal_0)) {
      _text_0.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = import10.interpolate0(_pipe_dirty_1.transform('bar'));
    if (import10.checkBinding(_expr_1, currVal_1)) {
      _text_2.text = currVal_1;
      _expr_1 = currVal_1;
    }
    final currVal_2 = import10.interpolate0(_pipe_lifecycle_2_0('lifecycle'));
    if (import10.checkBinding(_expr_2, currVal_2)) {
      _text_4.text = currVal_2;
      _expr_2 = currVal_2;
    }
    final currVal_3 = import10.interpolate0(_pipe_types_3_0('types', 1, 2, _ctx.c, _ctx.d));
    if (import10.checkBinding(_expr_3, currVal_3)) {
      _text_6.text = currVal_3;
      _expr_3 = currVal_3;
    }
  }

  @override
  void destroyInternal() {
    _pipe_lifecycle_2.ngOnDestroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import5.ComponentStyles.unscoped(styles$Comp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.Comp> viewFactory_Comp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewComp0(parentView, parentIndex);
}

const ComponentFactory<import1.Comp> _CompNgFactory = const ComponentFactory('comp', viewFactory_CompHost0);
ComponentFactory<import1.Comp> get CompNgFactory {
  return _CompNgFactory;
}

final List<dynamic> styles$CompHost = const [];

class _ViewCompHost0 extends AppView<import1.Comp> {
  ViewComp0 _compView_0;
  import1.Comp _Comp_0_5;
  _ViewCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.Comp> build() {
    _compView_0 = ViewComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _Comp_0_5 = import1.Comp();
    _compView_0.create(_Comp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _Comp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.Comp> viewFactory_CompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewCompHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(Comp, CompNgFactory);
  _ref0.initReflector();
}
