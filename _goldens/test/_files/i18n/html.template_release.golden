// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'html.dart';
export 'html.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'html.dart' as import1;
import 'dart:html' as import2;
import 'package:intl/intl.dart' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import7;
import 'package:angular/angular.dart';

const List<dynamic> styles$I18nHtmlComponent = const [];

class ViewI18nHtmlComponent0 extends AppView<import1.I18nHtmlComponent> {
  import2.Element _el_0;
  static final String _message_0 = import3.Intl.message('This is an ${startTag0}important${endTag0} message!', desc: 'description');
  static RenderComponentType _renderType;
  ViewI18nHtmlComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('message');
    _renderType ??= import7.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$I18nHtmlComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.I18nHtmlComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'p', parentRenderNode);
    import2.Text _text_1 = new import2.Text(_message_0);
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import1.I18nHtmlComponent> viewFactory_I18nHtmlComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewI18nHtmlComponent0(parentView, parentIndex);
}

const List<dynamic> styles$I18nHtmlComponentHost = const [];

class _ViewI18nHtmlComponentHost0 extends AppView<dynamic> {
  ViewI18nHtmlComponent0 _compView_0;
  import1.I18nHtmlComponent _I18nHtmlComponent_0_5;
  _ViewI18nHtmlComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewI18nHtmlComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _I18nHtmlComponent_0_5 = new import1.I18nHtmlComponent();
    _compView_0.create(_I18nHtmlComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.I18nHtmlComponent>(0, this, rootEl, _I18nHtmlComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_I18nHtmlComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewI18nHtmlComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.I18nHtmlComponent> I18nHtmlComponentNgFactory = const ComponentFactory<import1.I18nHtmlComponent>('message', viewFactory_I18nHtmlComponentHost0, _I18nHtmlComponentMetadata);
const _I18nHtmlComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(I18nHtmlComponent, I18nHtmlComponentNgFactory);
  _ref0.initReflector();
}
