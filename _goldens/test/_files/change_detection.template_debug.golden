// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'change_detection.dart';
export 'change_detection.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'change_detection.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$CheckOnceComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckOnceComponent0 = [null, null];

class ViewCheckOnceComponent0 extends DebugAppView<import2.CheckOnceComponent> {
  import3.DivElement _el_0;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewCheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_CheckOnceComponent0) {
    rootEl = import3.document.createElement('CheckOnce');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class CheckOnceComponent - inline template', ViewEncapsulation.None, styles$CheckOnceComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.CheckOnceComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('CheckOnce');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }

  void detectHostChanges(bool firstCheck) {
    final currVal_0 = ctx.id;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      setProp(rootEl, 'id', currVal_0);
      _expr_0 = currVal_0;
    }
  }
}

AppView<import2.CheckOnceComponent> viewFactory_CheckOnceComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewCheckOnceComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckOnceComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckOnceComponentHost0 = [
  new StaticNodeDebugInfo([import2.CheckOnceComponent], import2.CheckOnceComponent, <String, dynamic>{})
];

class _ViewCheckOnceComponentHost0 extends DebugAppView<dynamic> {
  ViewCheckOnceComponent0 _compView_0;
  import2.CheckOnceComponent _CheckOnceComponent_0_5;
  _ViewCheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_CheckOnceComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckOnceComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _CheckOnceComponent_0_5 = new import2.CheckOnceComponent();
    _compView_0.create(_CheckOnceComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.CheckOnceComponent>(0, this, rootEl, _CheckOnceComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    _compView_0.detectHostChanges(firstCheck);
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckOnceComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewCheckOnceComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.CheckOnceComponent> CheckOnceComponentNgFactory = const ComponentFactory<import2.CheckOnceComponent>('CheckOnce', viewFactory_CheckOnceComponentHost0, _CheckOnceComponentMetadata);
const List<dynamic> styles$CheckedComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckedComponent0 = [null, null];

class ViewCheckedComponent0 extends DebugAppView<import2.CheckedComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_CheckedComponent0) {
    rootEl = import3.document.createElement('Checked');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class CheckedComponent - inline template', ViewEncapsulation.None, styles$CheckedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.CheckedComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Checked');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.CheckedComponent> viewFactory_CheckedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewCheckedComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckedComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckedComponentHost0 = [
  new StaticNodeDebugInfo([import2.CheckedComponent], import2.CheckedComponent, <String, dynamic>{})
];

class _ViewCheckedComponentHost0 extends DebugAppView<dynamic> {
  ViewCheckedComponent0 _compView_0;
  import2.CheckedComponent _CheckedComponent_0_5;
  _ViewCheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_CheckedComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _CheckedComponent_0_5 = new import2.CheckedComponent();
    _compView_0.create(_CheckedComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.CheckedComponent>(0, this, rootEl, _CheckedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewCheckedComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.CheckedComponent> CheckedComponentNgFactory = const ComponentFactory<import2.CheckedComponent>('Checked', viewFactory_CheckedComponentHost0, _CheckedComponentMetadata);
const List<dynamic> styles$CheckAlwaysComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckAlwaysComponent0 = [null, null];

class ViewCheckAlwaysComponent0 extends DebugAppView<import2.CheckAlwaysComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewCheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_CheckAlwaysComponent0) {
    rootEl = import3.document.createElement('CheckAlways');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class CheckAlwaysComponent - inline template', ViewEncapsulation.None, styles$CheckAlwaysComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.CheckAlwaysComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('CheckAlways');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.CheckAlwaysComponent> viewFactory_CheckAlwaysComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewCheckAlwaysComponent0(parentView, parentIndex);
}

const List<dynamic> styles$CheckAlwaysComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CheckAlwaysComponentHost0 = [
  new StaticNodeDebugInfo([import2.CheckAlwaysComponent], import2.CheckAlwaysComponent, <String, dynamic>{})
];

class _ViewCheckAlwaysComponentHost0 extends DebugAppView<dynamic> {
  ViewCheckAlwaysComponent0 _compView_0;
  import2.CheckAlwaysComponent _CheckAlwaysComponent_0_5;
  _ViewCheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_CheckAlwaysComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewCheckAlwaysComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _CheckAlwaysComponent_0_5 = new import2.CheckAlwaysComponent();
    _compView_0.create(_CheckAlwaysComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.CheckAlwaysComponent>(0, this, rootEl, _CheckAlwaysComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CheckAlwaysComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewCheckAlwaysComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.CheckAlwaysComponent> CheckAlwaysComponentNgFactory = const ComponentFactory<import2.CheckAlwaysComponent>('CheckAlways', viewFactory_CheckAlwaysComponentHost0, _CheckAlwaysComponentMetadata);
const List<dynamic> styles$DetachedComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DetachedComponent0 = [null, null];

class ViewDetachedComponent0 extends DebugAppView<import2.DetachedComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDetachedComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_DetachedComponent0) {
    rootEl = import3.document.createElement('Detached');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class DetachedComponent - inline template', ViewEncapsulation.None, styles$DetachedComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.DetachedComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Detached');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.DetachedComponent> viewFactory_DetachedComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewDetachedComponent0(parentView, parentIndex);
}

const List<dynamic> styles$DetachedComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DetachedComponentHost0 = [
  new StaticNodeDebugInfo([import2.DetachedComponent], import2.DetachedComponent, <String, dynamic>{})
];

class _ViewDetachedComponentHost0 extends DebugAppView<dynamic> {
  ViewDetachedComponent0 _compView_0;
  import2.DetachedComponent _DetachedComponent_0_5;
  _ViewDetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_DetachedComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewDetachedComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _DetachedComponent_0_5 = new import2.DetachedComponent();
    _compView_0.create(_DetachedComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.DetachedComponent>(0, this, rootEl, _DetachedComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_DetachedComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewDetachedComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.DetachedComponent> DetachedComponentNgFactory = const ComponentFactory<import2.DetachedComponent>('Detached', viewFactory_DetachedComponentHost0, _DetachedComponentMetadata);
const List<dynamic> styles$OnPushComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_OnPushComponent0 = [null, null];

class ViewOnPushComponent0 extends DebugAppView<import2.OnPushComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewOnPushComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_OnPushComponent0) {
    rootEl = import3.document.createElement('OnPush');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class OnPushComponent - inline template', ViewEncapsulation.None, styles$OnPushComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.OnPushComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('OnPush');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.OnPushComponent> viewFactory_OnPushComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewOnPushComponent0(parentView, parentIndex);
}

const List<dynamic> styles$OnPushComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_OnPushComponentHost0 = [
  new StaticNodeDebugInfo([import2.OnPushComponent], import2.OnPushComponent, <String, dynamic>{})
];

class _ViewOnPushComponentHost0 extends DebugAppView<dynamic> {
  ViewOnPushComponent0 _compView_0;
  import2.OnPushComponent _OnPushComponent_0_5;
  _ViewOnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_OnPushComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewOnPushComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _OnPushComponent_0_5 = new import2.OnPushComponent();
    _compView_0.create(_OnPushComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.OnPushComponent>(0, this, rootEl, _OnPushComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_OnPushComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewOnPushComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.OnPushComponent> OnPushComponentNgFactory = const ComponentFactory<import2.OnPushComponent>('OnPush', viewFactory_OnPushComponentHost0, _OnPushComponentMetadata);
const List<dynamic> styles$StatefulComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_StatefulComponent0 = [null, null];

class ViewStatefulComponent0 extends DebugAppView<import2.StatefulComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewStatefulComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckOnce, nodeDebugInfos_StatefulComponent0) {
    rootEl = import3.document.createElement('Stateful');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class StatefulComponent - inline template', ViewEncapsulation.None, styles$StatefulComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.StatefulComponent> build() {
    final import2.StatefulComponent _ctx = ctx;
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Stateful');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    _ctx.stateChangeCallback = markStateChanged;
    return null;
  }
}

AppView<import2.StatefulComponent> viewFactory_StatefulComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewStatefulComponent0(parentView, parentIndex);
}

const List<dynamic> styles$StatefulComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_StatefulComponentHost0 = [
  new StaticNodeDebugInfo([import2.StatefulComponent], import2.StatefulComponent, <String, dynamic>{})
];

class _ViewStatefulComponentHost0 extends DebugAppView<dynamic> {
  ViewStatefulComponent0 _compView_0;
  import2.StatefulComponent _StatefulComponent_0_5;
  _ViewStatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_StatefulComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewStatefulComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _StatefulComponent_0_5 = new import2.StatefulComponent();
    _compView_0.create(_StatefulComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.StatefulComponent>(0, this, rootEl, _StatefulComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_StatefulComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewStatefulComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.StatefulComponent> StatefulComponentNgFactory = const ComponentFactory<import2.StatefulComponent>('Stateful', viewFactory_StatefulComponentHost0, _StatefulComponentMetadata);
const List<dynamic> styles$DefaultComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DefaultComponent0 = [null, null];

class ViewDefaultComponent0 extends DebugAppView<import2.DefaultComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewDefaultComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_DefaultComponent0) {
    rootEl = import3.document.createElement('Default');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/change_detection.dart class DefaultComponent - inline template', ViewEncapsulation.None, styles$DefaultComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.DefaultComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Default');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.DefaultComponent> viewFactory_DefaultComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewDefaultComponent0(parentView, parentIndex);
}

const List<dynamic> styles$DefaultComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DefaultComponentHost0 = [
  new StaticNodeDebugInfo([import2.DefaultComponent], import2.DefaultComponent, <String, dynamic>{})
];

class _ViewDefaultComponentHost0 extends DebugAppView<dynamic> {
  ViewDefaultComponent0 _compView_0;
  import2.DefaultComponent _DefaultComponent_0_5;
  _ViewDefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_DefaultComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewDefaultComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _DefaultComponent_0_5 = new import2.DefaultComponent();
    _compView_0.create(_DefaultComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.DefaultComponent>(0, this, rootEl, _DefaultComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_DefaultComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewDefaultComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.DefaultComponent> DefaultComponentNgFactory = const ComponentFactory<import2.DefaultComponent>('Default', viewFactory_DefaultComponentHost0, _DefaultComponentMetadata);
const _CheckOnceComponentMetadata = const [];
const _CheckedComponentMetadata = const [];
const _CheckAlwaysComponentMetadata = const [];
const _DetachedComponentMetadata = const [];
const _OnPushComponentMetadata = const [];
const _StatefulComponentMetadata = const [];
const _DefaultComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(CheckOnceComponent, CheckOnceComponentNgFactory);
  _ngRef.registerComponent(CheckedComponent, CheckedComponentNgFactory);
  _ngRef.registerComponent(CheckAlwaysComponent, CheckAlwaysComponentNgFactory);
  _ngRef.registerComponent(DetachedComponent, DetachedComponentNgFactory);
  _ngRef.registerComponent(OnPushComponent, OnPushComponentNgFactory);
  _ngRef.registerComponent(StatefulComponent, StatefulComponentNgFactory);
  _ngRef.registerComponent(DefaultComponent, DefaultComponentNgFactory);
  _ref0.initReflector();
}
