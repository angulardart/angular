// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'queries.dart';
export 'queries.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'queries.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/render_view.dart' as import5;
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import8;
import 'package:angular/src/runtime.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import14;
import 'package:angular/src/runtime/queries.dart' as import15;
import 'package:angular/src/common/directives/ng_for.dart' as import16;

final List<dynamic> styles$QueriesComponent = const [];

// View for component QueriesComponent in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class ViewQueriesComponent0 extends AppView<import1.QueriesComponent> {
  bool _query_AnotherDirective_1_5_isDirty = true;
  bool _query_q3_1_6_isDirty = true;
  import1.AnotherDirective _AnotherDirective_0_5;
  import1.AnotherDirective _AnotherDirective_1_5;
  ViewContainer _appEl_2;
  NgIf _NgIf_2_9;
  static import4.ComponentStyles _componentStyles;
  ViewQueriesComponent0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import8.document.createElement('queries');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.QueriesComponent> build() {
    final _ctx = this.ctx;
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
    final doc = import8.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    final _el_1 = import11.appendElement(doc, parentRenderNode, 'another');
    this._AnotherDirective_1_5 = import1.AnotherDirective();
    final _anchor_2 = import11.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(this._appEl_2, viewFactory_QueriesComponent1);
    this._NgIf_2_9 = NgIf(this._appEl_2, _TemplateRef_2_8);
    _ctx.viewChildrenFromField = [ElementRef(_el_1)];
    _ctx.viewChildFromField = ElementRef(_el_1);
    _ctx.readDIFromElementRef = ElementRef(_el_1);
    _ctx.readDIFromElement = _el_1;
    _ctx.readDIFromHtmlElement = _el_1;
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_2_9.ngIf = _ctx.someValue;
    this._appEl_2.detectChangesInNestedViews();
    if ((!import14.AppViewUtils.throwOnChanges)) {
      if (this._query_AnotherDirective_1_5_isDirty) {
        _ctx.usingTypeFromField = import15.flattenNodes([
          [this._AnotherDirective_0_5],
          [this._AnotherDirective_1_5],
          this._appEl_2.mapNestedViews((_ViewQueriesComponent1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        this._query_AnotherDirective_1_5_isDirty = false;
      }
      if (this._query_q3_1_6_isDirty) {
        _ctx.nestedViewChild = import15.firstOrNull(this._appEl_2.mapNestedViews((_ViewQueriesComponent1 nestedView) {
          return [ElementRef(nestedView._el_0)];
        }));
        this._query_q3_1_6_isDirty = false;
      }
    }
  }

  @override
  void destroyInternal() {
    this._appEl_2.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$QueriesComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.QueriesComponent> _QueriesComponentNgFactory = const ComponentFactory('queries', viewFactory_QueriesComponentHost0);
ComponentFactory<import1.QueriesComponent> get QueriesComponentNgFactory {
  return _QueriesComponentNgFactory;
}

class _ViewQueriesComponent1 extends AppView<import1.QueriesComponent> {
  import1.AnotherDirective _AnotherDirective_0_5;
  import8.Element _el_0;
  _ViewQueriesComponent1(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.QueriesComponent> build() {
    final doc = import8.document;
    this._el_0 = doc.createElement('another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    this.init1(this._el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewQueriesComponent0>(this.parentView)._query_AnotherDirective_1_5_isDirty = true;
    import9.unsafeCast<ViewQueriesComponent0>(this.parentView)._query_q3_1_6_isDirty = true;
  }
}

AppView<void> viewFactory_QueriesComponent1(import5.RenderView parentView, int parentIndex) {
  return _ViewQueriesComponent1(parentView, parentIndex);
}

final List<dynamic> styles$QueriesComponentHost = const [];

// Host for component QueriesComponent in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class _ViewQueriesComponentHost0 extends AppView<import1.QueriesComponent> {
  ViewQueriesComponent0 _compView_0;
  import1.QueriesComponent _QueriesComponent_0_5;
  _ViewQueriesComponentHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.QueriesComponent> build() {
    // Child component QueriesComponent in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
    this._compView_0 = ViewQueriesComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._QueriesComponent_0_5 = import1.QueriesComponent();
    this._QueriesComponent_0_5.contentChildrenFromField = [];
    this._compView_0.create(this._QueriesComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._QueriesComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponentHost0() {
  return _ViewQueriesComponentHost0(null, null);
}

final List<dynamic> styles$EmbeddedQueries = const [];

// View for component EmbeddedQueries in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class ViewEmbeddedQueries0 extends AppView<import1.EmbeddedQueries> {
  bool _query_AnotherDirective_1_0_isDirty = true;
  import1.AnotherDirective _AnotherDirective_0_5;
  ViewContainer _appEl_1;
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedQueries0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import8.document.createElement('test');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import8.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    final _anchor_1 = import11.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_7 = TemplateRef(this._appEl_1, viewFactory_EmbeddedQueries1);
    final _anchor_2 = import11.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(this._appEl_2, viewFactory_EmbeddedQueries2);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    if ((!import14.AppViewUtils.throwOnChanges)) {
      if (this._query_AnotherDirective_1_0_isDirty) {
        _ctx.viewChildren = import15.flattenNodes([
          [this._AnotherDirective_0_5],
          this._appEl_1.mapNestedViews((_ViewEmbeddedQueries1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          }),
          this._appEl_2.mapNestedViews((_ViewEmbeddedQueries2 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        this._query_AnotherDirective_1_0_isDirty = false;
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$EmbeddedQueries, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedQueries> _EmbeddedQueriesNgFactory = const ComponentFactory('test', viewFactory_EmbeddedQueriesHost0);
ComponentFactory<import1.EmbeddedQueries> get EmbeddedQueriesNgFactory {
  return _EmbeddedQueriesNgFactory;
}

class _ViewEmbeddedQueries1 extends AppView<import1.EmbeddedQueries> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueries1(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    this.init1(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewEmbeddedQueries0>(this.parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<void> viewFactory_EmbeddedQueries1(import5.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedQueries1(parentView, parentIndex);
}

class _ViewEmbeddedQueries2 extends AppView<import1.EmbeddedQueries> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueries2(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    this.init1(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewEmbeddedQueries0>(this.parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<void> viewFactory_EmbeddedQueries2(import5.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedQueries2(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueriesHost = const [];

// Host for component EmbeddedQueries in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class _ViewEmbeddedQueriesHost0 extends AppView<import1.EmbeddedQueries> {
  ViewEmbeddedQueries0 _compView_0;
  import1.EmbeddedQueries _EmbeddedQueries_0_5;
  _ViewEmbeddedQueriesHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    // Child component EmbeddedQueries in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
    this._compView_0 = ViewEmbeddedQueries0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._EmbeddedQueries_0_5 = import1.EmbeddedQueries();
    this._compView_0.create(this._EmbeddedQueries_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._EmbeddedQueries_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.EmbeddedQueries> viewFactory_EmbeddedQueriesHost0() {
  return _ViewEmbeddedQueriesHost0(null, null);
}

final List<dynamic> styles$EmbeddedQueriesList = const [];

// View for component EmbeddedQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class ViewEmbeddedQueriesList0 extends AppView<import1.EmbeddedQueriesList> {
  bool _query_AnotherDirective_1_0_isDirty = true;
  import1.AnotherDirective _AnotherDirective_0_5;
  ViewContainer _appEl_1;
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedQueriesList0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import8.document.createElement('test');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import8.document;
    final _el_0 = import11.appendElement(doc, parentRenderNode, 'another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    final _anchor_1 = import11.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_7 = TemplateRef(this._appEl_1, viewFactory_EmbeddedQueriesList1);
    final _anchor_2 = import11.appendAnchor(parentRenderNode);
    this._appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(this._appEl_2, viewFactory_EmbeddedQueriesList2);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    if ((!import14.AppViewUtils.throwOnChanges)) {
      if (this._query_AnotherDirective_1_0_isDirty) {
        _ctx.viewChildren = import15.flattenNodes([
          [this._AnotherDirective_0_5],
          this._appEl_1.mapNestedViews((_ViewEmbeddedQueriesList1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          }),
          this._appEl_2.mapNestedViews((_ViewEmbeddedQueriesList2 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        this._query_AnotherDirective_1_0_isDirty = false;
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$EmbeddedQueriesList, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.EmbeddedQueriesList> _EmbeddedQueriesListNgFactory = const ComponentFactory('test', viewFactory_EmbeddedQueriesListHost0);
ComponentFactory<import1.EmbeddedQueriesList> get EmbeddedQueriesListNgFactory {
  return _EmbeddedQueriesListNgFactory;
}

class _ViewEmbeddedQueriesList1 extends AppView<import1.EmbeddedQueriesList> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueriesList1(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    this.init1(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewEmbeddedQueriesList0>(this.parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<void> viewFactory_EmbeddedQueriesList1(import5.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedQueriesList1(parentView, parentIndex);
}

class _ViewEmbeddedQueriesList2 extends AppView<import1.EmbeddedQueriesList> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueriesList2(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('another');
    this._AnotherDirective_0_5 = import1.AnotherDirective();
    this.init1(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewEmbeddedQueriesList0>(this.parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<void> viewFactory_EmbeddedQueriesList2(import5.RenderView parentView, int parentIndex) {
  return _ViewEmbeddedQueriesList2(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueriesListHost = const [];

// Host for component EmbeddedQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class _ViewEmbeddedQueriesListHost0 extends AppView<import1.EmbeddedQueriesList> {
  ViewEmbeddedQueriesList0 _compView_0;
  import1.EmbeddedQueriesList _EmbeddedQueriesList_0_5;
  _ViewEmbeddedQueriesListHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    // Child component EmbeddedQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
    this._compView_0 = ViewEmbeddedQueriesList0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._EmbeddedQueriesList_0_5 = import1.EmbeddedQueriesList();
    this._compView_0.create(this._EmbeddedQueriesList_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._EmbeddedQueriesList_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.EmbeddedQueriesList> viewFactory_EmbeddedQueriesListHost0() {
  return _ViewEmbeddedQueriesListHost0(null, null);
}

final List<dynamic> styles$NestedNgForQueriesList = const [];

// View for component NestedNgForQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class ViewNestedNgForQueriesList0 extends AppView<import1.NestedNgForQueriesList> {
  bool _query_taggedItem_1_0_isDirty = true;
  ViewContainer _appEl_0;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewNestedNgForQueriesList0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import8.document.createElement('test');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import11.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_NestedNgForQueriesList1);
    this._NgIf_0_9 = NgIf(this._appEl_0, _TemplateRef_0_8);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_0_9.ngIf = _ctx.conditionA;
    this._appEl_0.detectChangesInNestedViews();
    if ((!import14.AppViewUtils.throwOnChanges)) {
      if (this._query_taggedItem_1_0_isDirty) {
        _ctx.taggedItems = this._appEl_0.mapNestedViews((_ViewNestedNgForQueriesList1 nestedView) {
          return nestedView._appEl_1.mapNestedViews((_ViewNestedNgForQueriesList2 nestedView) {
            return nestedView._appEl_1.mapNestedViews((_ViewNestedNgForQueriesList3 nestedView) {
              return [ElementRef(nestedView._el_0)];
            });
          });
        });
        this._query_taggedItem_1_0_isDirty = false;
      }
    }
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$NestedNgForQueriesList, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.NestedNgForQueriesList> _NestedNgForQueriesListNgFactory = const ComponentFactory('test', viewFactory_NestedNgForQueriesListHost0);
ComponentFactory<import1.NestedNgForQueriesList> get NestedNgForQueriesListNgFactory {
  return _NestedNgForQueriesListNgFactory;
}

class _ViewNestedNgForQueriesList1 extends AppView<import1.NestedNgForQueriesList> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  _ViewNestedNgForQueriesList1(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import11.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_NestedNgForQueriesList2);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._NgIf_1_9.ngIf = _ctx.conditionB;
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

AppView<void> viewFactory_NestedNgForQueriesList1(import5.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList1(parentView, parentIndex);
}

class _ViewNestedNgForQueriesList2 extends AppView<import1.NestedNgForQueriesList> {
  ViewContainer _appEl_1;
  import16.NgFor _NgFor_1_9;
  _ViewNestedNgForQueriesList2(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import11.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_NestedNgForQueriesList3);
    this._NgFor_1_9 = import16.NgFor(this._appEl_1, _TemplateRef_1_8);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.items, null)) {
        (this._NgFor_1_9.ngForOf = _ctx.items);
      }
    }
    if ((!import14.AppViewUtils.throwOnChanges)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

AppView<void> viewFactory_NestedNgForQueriesList2(import5.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList2(parentView, parentIndex);
}

class _ViewNestedNgForQueriesList3 extends AppView<import1.NestedNgForQueriesList> {
  import1.AnotherDirective _AnotherDirective_1_5;
  import8.DivElement _el_0;
  _ViewNestedNgForQueriesList3(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import8.document;
    this._el_0 = doc.createElement('div');
    final _el_1 = import11.appendElement(doc, this._el_0, 'another');
    this._AnotherDirective_1_5 = import1.AnotherDirective();
    this.init1(this._el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import9.unsafeCast<ViewNestedNgForQueriesList0>(this.parentView.parentView.parentView)._query_taggedItem_1_0_isDirty = true;
  }
}

AppView<void> viewFactory_NestedNgForQueriesList3(import5.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList3(parentView, parentIndex);
}

final List<dynamic> styles$NestedNgForQueriesListHost = const [];

// Host for component NestedNgForQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
class _ViewNestedNgForQueriesListHost0 extends AppView<import1.NestedNgForQueriesList> {
  ViewNestedNgForQueriesList0 _compView_0;
  import1.NestedNgForQueriesList _NestedNgForQueriesList_0_5;
  _ViewNestedNgForQueriesListHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    // Child component NestedNgForQueriesList in asset:_goldens/test/_files/queries.dart (changeDetection: Default)
    this._compView_0 = ViewNestedNgForQueriesList0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._NestedNgForQueriesList_0_5 = import1.NestedNgForQueriesList();
    this._compView_0.create(this._NestedNgForQueriesList_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._NestedNgForQueriesList_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesListHost0() {
  return _ViewNestedNgForQueriesListHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(QueriesComponent, QueriesComponentNgFactory);
  _ngRef.registerComponent(EmbeddedQueries, EmbeddedQueriesNgFactory);
  _ngRef.registerComponent(EmbeddedQueriesList, EmbeddedQueriesListNgFactory);
  _ngRef.registerComponent(NestedNgForQueriesList, NestedNgForQueriesListNgFactory);
  _ref0.initReflector();
}
