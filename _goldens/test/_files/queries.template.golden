// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'queries.dart';
export 'queries.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'queries.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import10;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import13;
import 'package:angular/src/common/directives/ng_for.dart' as import14;

final List<dynamic> styles$QueriesComponent = const [];

class ViewQueriesComponent0 extends AppView<import1.QueriesComponent> {
  import1.AnotherDirective _AnotherDirective_0_5;
  import1.AnotherDirective _AnotherDirective_1_5;
  ViewContainer _appEl_2;
  bool _query_AnotherDirective_1_5_isDirty = true;
  bool _query_q3_1_6_isDirty = true;
  NgIf _NgIf_2_9;
  static import4.ComponentStyles _componentStyles;
  ViewQueriesComponent0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('queries');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.QueriesComponent> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    project(parentRenderNode, 0);
    final doc = import7.document;
    final _el_0 = import10.appendElement(doc, parentRenderNode, 'another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    final _el_1 = import10.appendElement(doc, parentRenderNode, 'another');
    _AnotherDirective_1_5 = import1.AnotherDirective();
    final _anchor_2 = import10.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(_appEl_2, viewFactory_QueriesComponent1);
    _NgIf_2_9 = NgIf(_appEl_2, _TemplateRef_2_8);
    ctx.viewChildrenFromField = [ElementRef(_el_1)];
    ctx.viewChildFromField = ElementRef(_el_1);
    ctx.readDIFromElementRef = ElementRef(_el_1);
    ctx.readDIFromElement = _el_1;
    ctx.readDIFromHtmlElement = _el_1;
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_2_9.ngIf = _ctx.someValue;
    _appEl_2.detectChangesInNestedViews();
    if (!import13.AppViewUtils.throwOnChanges) {
      if (_query_AnotherDirective_1_5_isDirty) {
        ctx.usingTypeFromField = import13.flattenNodes([
          [_AnotherDirective_0_5],
          [_AnotherDirective_1_5],
          _appEl_2.mapNestedViews((_ViewQueriesComponent1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        _query_AnotherDirective_1_5_isDirty = false;
      }
      if (_query_q3_1_6_isDirty) {
        ctx.nestedViewChild = import13.firstOrNull(_appEl_2.mapNestedViews((_ViewQueriesComponent1 nestedView) {
          return [ElementRef(nestedView._el_0)];
        }));
        _query_q3_1_6_isDirty = false;
      }
    }
  }

  @override
  void destroyInternal() {
    _appEl_2.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$QueriesComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewQueriesComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.QueriesComponent> _QueriesComponentNgFactory = const ComponentFactory('queries', viewFactory_QueriesComponentHost0);
ComponentFactory<import1.QueriesComponent> get QueriesComponentNgFactory {
  return _QueriesComponentNgFactory;
}

class _ViewQueriesComponent1 extends AppView<import1.QueriesComponent> {
  import1.AnotherDirective _AnotherDirective_0_5;
  import7.Element _el_0;
  _ViewQueriesComponent1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.QueriesComponent> build() {
    final doc = import7.document;
    _el_0 = doc.createElement('another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewQueriesComponent0>(parentView)._query_AnotherDirective_1_5_isDirty = true;
    import8.unsafeCast<ViewQueriesComponent0>(parentView)._query_q3_1_6_isDirty = true;
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponent1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewQueriesComponent1(parentView, parentIndex);
}

final List<dynamic> styles$QueriesComponentHost = const [];

class _ViewQueriesComponentHost0 extends AppView<import1.QueriesComponent> {
  ViewQueriesComponent0 _compView_0;
  import1.QueriesComponent _QueriesComponent_0_5;
  _ViewQueriesComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.QueriesComponent> build() {
    _compView_0 = ViewQueriesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _QueriesComponent_0_5 = import1.QueriesComponent();
    _QueriesComponent_0_5.contentChildrenFromField = [];
    _compView_0.create(_QueriesComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _QueriesComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewQueriesComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueries = const [];

class ViewEmbeddedQueries0 extends AppView<import1.EmbeddedQueries> {
  import1.AnotherDirective _AnotherDirective_0_5;
  ViewContainer _appEl_1;
  bool _query_AnotherDirective_1_0_isDirty = true;
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedQueries0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('test');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import7.document;
    final _el_0 = import10.appendElement(doc, parentRenderNode, 'another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    final _anchor_1 = import10.appendAnchor(parentRenderNode);
    _appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_7 = TemplateRef(_appEl_1, viewFactory_EmbeddedQueries1);
    final _anchor_2 = import10.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(_appEl_2, viewFactory_EmbeddedQueries2);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    if (!import13.AppViewUtils.throwOnChanges) {
      if (_query_AnotherDirective_1_0_isDirty) {
        ctx.viewChildren = import13.flattenNodes([
          [_AnotherDirective_0_5],
          _appEl_1.mapNestedViews((_ViewEmbeddedQueries1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          }),
          _appEl_2.mapNestedViews((_ViewEmbeddedQueries2 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        _query_AnotherDirective_1_0_isDirty = false;
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$EmbeddedQueries, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.EmbeddedQueries> viewFactory_EmbeddedQueries0(AppView<dynamic> parentView, int parentIndex) {
  return ViewEmbeddedQueries0(parentView, parentIndex);
}

const ComponentFactory<import1.EmbeddedQueries> _EmbeddedQueriesNgFactory = const ComponentFactory('test', viewFactory_EmbeddedQueriesHost0);
ComponentFactory<import1.EmbeddedQueries> get EmbeddedQueriesNgFactory {
  return _EmbeddedQueriesNgFactory;
}

class _ViewEmbeddedQueries1 extends AppView<import1.EmbeddedQueries> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueries1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewEmbeddedQueries0>(parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<import1.EmbeddedQueries> viewFactory_EmbeddedQueries1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueries1(parentView, parentIndex);
}

class _ViewEmbeddedQueries2 extends AppView<import1.EmbeddedQueries> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueries2(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewEmbeddedQueries0>(parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<import1.EmbeddedQueries> viewFactory_EmbeddedQueries2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueries2(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueriesHost = const [];

class _ViewEmbeddedQueriesHost0 extends AppView<import1.EmbeddedQueries> {
  ViewEmbeddedQueries0 _compView_0;
  import1.EmbeddedQueries _EmbeddedQueries_0_5;
  _ViewEmbeddedQueriesHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueries> build() {
    _compView_0 = ViewEmbeddedQueries0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmbeddedQueries_0_5 = import1.EmbeddedQueries();
    _compView_0.create(_EmbeddedQueries_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmbeddedQueries_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.EmbeddedQueries> viewFactory_EmbeddedQueriesHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueriesHost0(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueriesList = const [];

class ViewEmbeddedQueriesList0 extends AppView<import1.EmbeddedQueriesList> {
  import1.AnotherDirective _AnotherDirective_0_5;
  ViewContainer _appEl_1;
  bool _query_AnotherDirective_1_0_isDirty = true;
  ViewContainer _appEl_2;
  static import4.ComponentStyles _componentStyles;
  ViewEmbeddedQueriesList0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('test');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import7.document;
    final _el_0 = import10.appendElement(doc, parentRenderNode, 'another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    final _anchor_1 = import10.appendAnchor(parentRenderNode);
    _appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_7 = TemplateRef(_appEl_1, viewFactory_EmbeddedQueriesList1);
    final _anchor_2 = import10.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_7 = TemplateRef(_appEl_2, viewFactory_EmbeddedQueriesList2);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    if (!import13.AppViewUtils.throwOnChanges) {
      if (_query_AnotherDirective_1_0_isDirty) {
        ctx.viewChildren = import13.flattenNodes([
          [_AnotherDirective_0_5],
          _appEl_1.mapNestedViews((_ViewEmbeddedQueriesList1 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          }),
          _appEl_2.mapNestedViews((_ViewEmbeddedQueriesList2 nestedView) {
            return [nestedView._AnotherDirective_0_5];
          })
        ]);
        _query_AnotherDirective_1_0_isDirty = false;
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$EmbeddedQueriesList, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.EmbeddedQueriesList> viewFactory_EmbeddedQueriesList0(AppView<dynamic> parentView, int parentIndex) {
  return ViewEmbeddedQueriesList0(parentView, parentIndex);
}

const ComponentFactory<import1.EmbeddedQueriesList> _EmbeddedQueriesListNgFactory = const ComponentFactory('test', viewFactory_EmbeddedQueriesListHost0);
ComponentFactory<import1.EmbeddedQueriesList> get EmbeddedQueriesListNgFactory {
  return _EmbeddedQueriesListNgFactory;
}

class _ViewEmbeddedQueriesList1 extends AppView<import1.EmbeddedQueriesList> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueriesList1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewEmbeddedQueriesList0>(parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<import1.EmbeddedQueriesList> viewFactory_EmbeddedQueriesList1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueriesList1(parentView, parentIndex);
}

class _ViewEmbeddedQueriesList2 extends AppView<import1.EmbeddedQueriesList> {
  import1.AnotherDirective _AnotherDirective_0_5;
  _ViewEmbeddedQueriesList2(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('another');
    _AnotherDirective_0_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewEmbeddedQueriesList0>(parentView)._query_AnotherDirective_1_0_isDirty = true;
  }
}

AppView<import1.EmbeddedQueriesList> viewFactory_EmbeddedQueriesList2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueriesList2(parentView, parentIndex);
}

final List<dynamic> styles$EmbeddedQueriesListHost = const [];

class _ViewEmbeddedQueriesListHost0 extends AppView<import1.EmbeddedQueriesList> {
  ViewEmbeddedQueriesList0 _compView_0;
  import1.EmbeddedQueriesList _EmbeddedQueriesList_0_5;
  _ViewEmbeddedQueriesListHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.EmbeddedQueriesList> build() {
    _compView_0 = ViewEmbeddedQueriesList0(this, 0);
    rootEl = _compView_0.rootEl;
    _EmbeddedQueriesList_0_5 = import1.EmbeddedQueriesList();
    _compView_0.create(_EmbeddedQueriesList_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _EmbeddedQueriesList_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.EmbeddedQueriesList> viewFactory_EmbeddedQueriesListHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewEmbeddedQueriesListHost0(parentView, parentIndex);
}

final List<dynamic> styles$NestedNgForQueriesList = const [];

class ViewNestedNgForQueriesList0 extends AppView<import1.NestedNgForQueriesList> {
  ViewContainer _appEl_0;
  bool _query_taggedItem_1_0_isDirty = true;
  NgIf _NgIf_0_9;
  static import4.ComponentStyles _componentStyles;
  ViewNestedNgForQueriesList0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import7.document.createElement('test');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/queries.dart' : null);
  }

  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final _rootEl = rootEl;
    final import7.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final _anchor_0 = import10.appendAnchor(parentRenderNode);
    _appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(_appEl_0, viewFactory_NestedNgForQueriesList1);
    _NgIf_0_9 = NgIf(_appEl_0, _TemplateRef_0_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_0_9.ngIf = _ctx.conditionA;
    _appEl_0.detectChangesInNestedViews();
    if (!import13.AppViewUtils.throwOnChanges) {
      if (_query_taggedItem_1_0_isDirty) {
        ctx.taggedItems = _appEl_0.mapNestedViews((_ViewNestedNgForQueriesList1 nestedView) {
          return nestedView._appEl_1.mapNestedViews((_ViewNestedNgForQueriesList2 nestedView) {
            return nestedView._appEl_1.mapNestedViews((_ViewNestedNgForQueriesList3 nestedView) {
              return [ElementRef(nestedView._el_0)];
            });
          });
        });
        _query_taggedItem_1_0_isDirty = false;
      }
    }
  }

  @override
  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$NestedNgForQueriesList, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesList0(AppView<dynamic> parentView, int parentIndex) {
  return ViewNestedNgForQueriesList0(parentView, parentIndex);
}

const ComponentFactory<import1.NestedNgForQueriesList> _NestedNgForQueriesListNgFactory = const ComponentFactory('test', viewFactory_NestedNgForQueriesListHost0);
ComponentFactory<import1.NestedNgForQueriesList> get NestedNgForQueriesListNgFactory {
  return _NestedNgForQueriesListNgFactory;
}

class _ViewNestedNgForQueriesList1 extends AppView<import1.NestedNgForQueriesList> {
  ViewContainer _appEl_1;
  NgIf _NgIf_1_9;
  _ViewNestedNgForQueriesList1(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import10.appendAnchor(_el_0);
    _appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_NestedNgForQueriesList2);
    _NgIf_1_9 = NgIf(_appEl_1, _TemplateRef_1_8);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    _NgIf_1_9.ngIf = _ctx.conditionB;
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1.destroyNestedViews();
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesList1(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList1(parentView, parentIndex);
}

class _ViewNestedNgForQueriesList2 extends AppView<import1.NestedNgForQueriesList> {
  ViewContainer _appEl_1;
  import14.NgFor _NgFor_1_9;
  _ViewNestedNgForQueriesList2(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import7.document;
    final _el_0 = doc.createElement('div');
    final _anchor_1 = import10.appendAnchor(_el_0);
    _appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_NestedNgForQueriesList3);
    _NgFor_1_9 = import14.NgFor(_appEl_1, _TemplateRef_1_8);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.items, null)) {
        (_NgFor_1_9.ngForOf = _ctx.items);
      }
    }
    if (!import13.AppViewUtils.throwOnChanges) {
      _NgFor_1_9.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1.destroyNestedViews();
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesList2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList2(parentView, parentIndex);
}

class _ViewNestedNgForQueriesList3 extends AppView<import1.NestedNgForQueriesList> {
  import1.AnotherDirective _AnotherDirective_1_5;
  import7.DivElement _el_0;
  _ViewNestedNgForQueriesList3(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.embedded, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    final doc = import7.document;
    _el_0 = doc.createElement('div');
    final _el_1 = import10.appendElement(doc, _el_0, 'another');
    _AnotherDirective_1_5 = import1.AnotherDirective();
    init0(_el_0);
  }

  @override
  void dirtyParentQueriesInternal() {
    import8.unsafeCast<ViewNestedNgForQueriesList0>(parentView.parentView.parentView)._query_taggedItem_1_0_isDirty = true;
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesList3(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedNgForQueriesList3(parentView, parentIndex);
}

final List<dynamic> styles$NestedNgForQueriesListHost = const [];

class _ViewNestedNgForQueriesListHost0 extends AppView<import1.NestedNgForQueriesList> {
  ViewNestedNgForQueriesList0 _compView_0;
  import1.NestedNgForQueriesList _NestedNgForQueriesList_0_5;
  _ViewNestedNgForQueriesListHost0(AppView<dynamic> parentView, int parentIndex) : super(import5.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForQueriesList> build() {
    _compView_0 = ViewNestedNgForQueriesList0(this, 0);
    rootEl = _compView_0.rootEl;
    _NestedNgForQueriesList_0_5 = import1.NestedNgForQueriesList();
    _compView_0.create(_NestedNgForQueriesList_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _NestedNgForQueriesList_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.NestedNgForQueriesList> viewFactory_NestedNgForQueriesListHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedNgForQueriesListHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(QueriesComponent, QueriesComponentNgFactory);
  _ngRef.registerComponent(EmbeddedQueries, EmbeddedQueriesNgFactory);
  _ngRef.registerComponent(EmbeddedQueriesList, EmbeddedQueriesListNgFactory);
  _ngRef.registerComponent(NestedNgForQueriesList, NestedNgForQueriesListNgFactory);
  _ref0.initReflector();
}
