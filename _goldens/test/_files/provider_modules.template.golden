// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'provider_modules.dart';
export 'provider_modules.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'provider_modules.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'dart:core';
import 'package:angular/src/core/di/opaque_token.dart' as import9;

final List<dynamic> styles$ProviderModulesComponent = const [];

class ViewProviderModulesComponent0 extends AppView<import1.ProviderModulesComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewProviderModulesComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('provider-modules');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/provider_modules.dart' : null);
  }

  @override
  ComponentRef<import1.ProviderModulesComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$ProviderModulesComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.ProviderModulesComponent> viewFactory_ProviderModulesComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewProviderModulesComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.ProviderModulesComponent> _ProviderModulesComponentNgFactory = const ComponentFactory('provider-modules', viewFactory_ProviderModulesComponentHost0);
ComponentFactory<import1.ProviderModulesComponent> get ProviderModulesComponentNgFactory {
  return _ProviderModulesComponentNgFactory;
}

final List<dynamic> styles$ProviderModulesComponentHost = const [];

class _ViewProviderModulesComponentHost0 extends AppView<import1.ProviderModulesComponent> {
  ViewProviderModulesComponent0 _compView_0;
  import1.ProviderModulesComponent _ProviderModulesComponent_0_5;
  import1.FooService __FooService_0_6;
  Duration __fooToken_0_7;
  List<dynamic> __barToken_0_8;
  dynamic __bazToken_0_9;
  _ViewProviderModulesComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  import1.FooService get _FooService_0_6 {
    if ((__FooService_0_6 == null)) {
      (__FooService_0_6 = import1.FooService());
    }
    return __FooService_0_6;
  }

  Duration get _fooToken_0_7 {
    if ((__fooToken_0_7 == null)) {
      (__fooToken_0_7 = const Duration(seconds: 500));
    }
    return __fooToken_0_7;
  }

  List<dynamic> get _barToken_0_8 {
    if ((__barToken_0_8 == null)) {
      (__barToken_0_8 = const ['a', 'b', 'c']);
    }
    return __barToken_0_8;
  }

  dynamic get _bazToken_0_9 {
    if ((__bazToken_0_9 == null)) {
      (__bazToken_0_9 = import1.getSomeValues());
    }
    return __bazToken_0_9;
  }

  @override
  ComponentRef<import1.ProviderModulesComponent> build() {
    _compView_0 = ViewProviderModulesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _ProviderModulesComponent_0_5 = import1.ProviderModulesComponent();
    _compView_0.create(_ProviderModulesComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _ProviderModulesComponent_0_5);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.FooService) && (0 == nodeIndex))) {
      return _FooService_0_6;
    }
    if ((identical(token, const import9.OpaqueToken<dynamic>('fooToken')) && (0 == nodeIndex))) {
      return _fooToken_0_7;
    }
    if ((identical(token, const import9.OpaqueToken<dynamic>('barToken')) && (0 == nodeIndex))) {
      return _barToken_0_8;
    }
    if ((identical(token, const import9.OpaqueToken<dynamic>('bazToken')) && (0 == nodeIndex))) {
      return _bazToken_0_9;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.ProviderModulesComponent> viewFactory_ProviderModulesComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewProviderModulesComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerFactory(FooService, () => new FooService());
  _ngRef.registerComponent(ProviderModulesComponent, ProviderModulesComponentNgFactory);
  _ref0.initReflector();
}
