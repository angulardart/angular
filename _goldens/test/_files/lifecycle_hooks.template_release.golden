// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'lifecycle_hooks.dart';
export 'lifecycle_hooks.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'lifecycle_hooks.dart' as import1;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/angular.dart';

const List<dynamic> styles$LifecycleHooksComponent = const [];

class ViewLifecycleHooksComponent0 extends AppView<import1.LifecycleHooksComponent> {
  static RenderComponentType _renderType;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('lifecycle-hooks');
    _renderType ??= import6.appViewUtils.createRenderType('', ViewEncapsulation.None, styles$LifecycleHooksComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.LifecycleHooksComponent> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
    return null;
  }
}

AppView<import1.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewLifecycleHooksComponent0(parentView, parentIndex);
}

const List<dynamic> styles$LifecycleHooksComponentHost = const [];

class _ViewLifecycleHooksComponentHost0 extends AppView<dynamic> {
  ViewLifecycleHooksComponent0 _compView_0;
  import1.LifecycleHooksComponent _LifecycleHooksComponent_0_5;
  _ViewLifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef build() {
    _compView_0 = new ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _LifecycleHooksComponent_0_5 = new import1.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.LifecycleHooksComponent>(0, this, rootEl, _LifecycleHooksComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      _LifecycleHooksComponent_0_5.ngOnInit();
    }
    _LifecycleHooksComponent_0_5.ngDoCheck();
    if (firstCheck) {
      _LifecycleHooksComponent_0_5.ngAfterContentInit();
    }
    _LifecycleHooksComponent_0_5.ngAfterContentChecked();
    _compView_0.detectChanges();
    if (firstCheck) {
      _LifecycleHooksComponent_0_5.ngAfterViewInit();
    }
    _LifecycleHooksComponent_0_5.ngAfterViewChecked();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
    _LifecycleHooksComponent_0_5.ngOnDestroy();
  }
}

AppView viewFactory_LifecycleHooksComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.LifecycleHooksComponent> LifecycleHooksComponentNgFactory = const ComponentFactory<import1.LifecycleHooksComponent>('lifecycle-hooks', viewFactory_LifecycleHooksComponentHost0, _LifecycleHooksComponentMetadata);
const _LifecycleHooksComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(LifecycleHooksComponent, LifecycleHooksComponentNgFactory);
  _ref0.initReflector();
}
