// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'nested_ng_for.dart';
export 'nested_ng_for.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'nested_ng_for.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import3;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/render_view.dart' as import5;
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import8;
import 'package:angular/src/runtime.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import11;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import13;
import 'dart:core';
import 'package:angular/src/runtime/text_binding.dart' as import15;
import 'package:angular/src/runtime/interpolate.dart' as import16;

final List<dynamic> styles$NestedNgForComponent = const [];

// View for component NestedNgForComponent in asset:_goldens/test/_files/directives/nested_ng_for.dart (changeDetection: Default)
class ViewNestedNgForComponent0 extends AppView<import1.NestedNgForComponent> {
  ViewContainer _appEl_0;
  import3.NgFor _NgFor_0_9;
  var _expr_0;
  static import4.ComponentStyles _componentStyles;
  ViewNestedNgForComponent0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import8.document.createElement('nested-ng-for');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/directives/nested_ng_for.dart' : null);
  }

  @override
  ComponentRef<import1.NestedNgForComponent> build() {
    final import8.HtmlElement parentRenderNode = this.initViewRoot();
    final _anchor_0 = import11.appendAnchor(parentRenderNode);
    this._appEl_0 = ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_8 = TemplateRef(this._appEl_0, viewFactory_NestedNgForComponent1);
    this._NgFor_0_9 = import3.NgFor(this._appEl_0, _TemplateRef_0_8);
    this.init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.matrix;
    if (import13.checkBinding(this._expr_0, currVal_0)) {
      this._NgFor_0_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import13.AppViewUtils.throwOnChanges)) {
      this._NgFor_0_9.ngDoCheck();
    }
    this._appEl_0.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_0.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$NestedNgForComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.NestedNgForComponent> _NestedNgForComponentNgFactory = const ComponentFactory('nested-ng-for', viewFactory_NestedNgForComponentHost0);
ComponentFactory<import1.NestedNgForComponent> get NestedNgForComponentNgFactory {
  return _NestedNgForComponentNgFactory;
}

class _ViewNestedNgForComponent1 extends AppView<import1.NestedNgForComponent> {
  ViewContainer _appEl_1;
  import3.NgFor _NgFor_1_9;
  var _expr_0;
  _ViewNestedNgForComponent1(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForComponent> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('span');
    final _anchor_1 = import11.appendAnchor(_el_0);
    this._appEl_1 = ViewContainer(1, 0, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_NestedNgForComponent2);
    this._NgFor_1_9 = import3.NgFor(this._appEl_1, _TemplateRef_1_8);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_row = import9.unsafeCast<List<int>>(this.locals['\$implicit']);
    final currVal_0 = local_row;
    if (import13.checkBinding(this._expr_0, currVal_0)) {
      this._NgFor_1_9.ngForOf = currVal_0;
      this._expr_0 = currVal_0;
    }
    if ((!import13.AppViewUtils.throwOnChanges)) {
      this._NgFor_1_9.ngDoCheck();
    }
    this._appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
  }
}

AppView<void> viewFactory_NestedNgForComponent1(import5.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForComponent1(parentView, parentIndex);
}

class _ViewNestedNgForComponent2 extends AppView<import1.NestedNgForComponent> {
  final import15.TextBinding _textBinding_1 = import15.TextBinding();
  _ViewNestedNgForComponent2(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.embedded, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedNgForComponent> build() {
    final doc = import8.document;
    final _el_0 = doc.createElement('div');
    _el_0.append(this._textBinding_1.element);
    this.init1(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_value = import9.unsafeCast<int>(this.locals['\$implicit']);
    this._textBinding_1.updateText(import16.interpolate0(local_value));
  }
}

AppView<void> viewFactory_NestedNgForComponent2(import5.RenderView parentView, int parentIndex) {
  return _ViewNestedNgForComponent2(parentView, parentIndex);
}

final List<dynamic> styles$NestedNgForComponentHost = const [];

// Host for component NestedNgForComponent in asset:_goldens/test/_files/directives/nested_ng_for.dart (changeDetection: Default)
class _ViewNestedNgForComponentHost0 extends AppView<import1.NestedNgForComponent> {
  ViewNestedNgForComponent0 _compView_0;
  import1.NestedNgForComponent _NestedNgForComponent_0_5;
  _ViewNestedNgForComponentHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.NestedNgForComponent> build() {
    // Child component NestedNgForComponent in asset:_goldens/test/_files/directives/nested_ng_for.dart (changeDetection: Default)
    this._compView_0 = ViewNestedNgForComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._NestedNgForComponent_0_5 = import1.NestedNgForComponent();
    this._compView_0.create(this._NestedNgForComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._NestedNgForComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.NestedNgForComponent> viewFactory_NestedNgForComponentHost0() {
  return _ViewNestedNgForComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(NestedNgForComponent, NestedNgForComponentNgFactory);
  _ref0.initReflector();
}
