// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'intl_component.dart';
export 'intl_component.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart' as import0;
import 'intl_component.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart' as import5;
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart' as import8;

final List<dynamic> styles$CompWithoutFinal = const [];

class ViewCompWithoutFinal0 extends import0.AppView<import1.CompWithoutFinal> {
  import2.ButtonElement _el_0;
  import2.Text _text_1;
  import2.ButtonElement _el_3;
  import2.Text _text_4;
  var _expr_0;
  var _expr_1;
  static import3.RenderComponentType _renderType;
  ViewCompWithoutFinal0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('comp-without-final');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/intl_component.dart' : null), import8.ViewEncapsulation.None, styles$CompWithoutFinal);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.CompWithoutFinal> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_1 = import2.Text('');
    _el_0.append(_text_1);
    import2.Text _text_2 = import2.Text(' ');
    parentRenderNode.append(_text_2);
    _el_3 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_4 = import2.Text('');
    _el_3.append(_text_4);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.CompWithoutFinal _ctx = ctx;
    final currVal_0 = (_ctx.okMessage ?? '');
    if (import6.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = (_ctx.cancelMessage ?? '');
    if (import6.checkBinding(_expr_1, currVal_1)) {
      _text_4.text = currVal_1;
      _expr_1 = currVal_1;
    }
  }
}

import0.AppView<import1.CompWithoutFinal> viewFactory_CompWithoutFinal0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewCompWithoutFinal0(parentView, parentIndex);
}

final List<dynamic> styles$CompWithoutFinalHost = const [];

class _ViewCompWithoutFinalHost0 extends import0.AppView<import1.CompWithoutFinal> {
  ViewCompWithoutFinal0 _compView_0;
  import1.CompWithoutFinal _CompWithoutFinal_0_5;
  _ViewCompWithoutFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.CompWithoutFinal> build() {
    _compView_0 = ViewCompWithoutFinal0(this, 0);
    rootEl = _compView_0.rootEl;
    _CompWithoutFinal_0_5 = import1.CompWithoutFinal();
    _compView_0.create(_CompWithoutFinal_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _CompWithoutFinal_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.CompWithoutFinal> viewFactory_CompWithoutFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewCompWithoutFinalHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.CompWithoutFinal> _CompWithoutFinalNgFactory = const import8.ComponentFactory('comp-without-final', viewFactory_CompWithoutFinalHost0);
import8.ComponentFactory<import1.CompWithoutFinal> get CompWithoutFinalNgFactory {
  return _CompWithoutFinalNgFactory;
}

final List<dynamic> styles$CompWithFinal = const [];

class ViewCompWithFinal0 extends import0.AppView<import1.CompWithFinal> {
  import2.ButtonElement _el_0;
  import2.Text _text_1;
  import2.ButtonElement _el_3;
  import2.Text _text_4;
  static import3.RenderComponentType _renderType;
  ViewCompWithFinal0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('comp-with-final');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/intl_component.dart' : null), import8.ViewEncapsulation.None, styles$CompWithFinal);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.CompWithFinal> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_1 = import2.Text((ctx.okMessage ?? ''));
    _el_0.append(_text_1);
    import2.Text _text_2 = import2.Text(' ');
    parentRenderNode.append(_text_2);
    _el_3 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_4 = import2.Text((ctx.cancelMessage ?? ''));
    _el_3.append(_text_4);
    init(const [], null);
    return null;
  }
}

import0.AppView<import1.CompWithFinal> viewFactory_CompWithFinal0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewCompWithFinal0(parentView, parentIndex);
}

final List<dynamic> styles$CompWithFinalHost = const [];

class _ViewCompWithFinalHost0 extends import0.AppView<import1.CompWithFinal> {
  ViewCompWithFinal0 _compView_0;
  import1.CompWithFinal _CompWithFinal_0_5;
  _ViewCompWithFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.CompWithFinal> build() {
    _compView_0 = ViewCompWithFinal0(this, 0);
    rootEl = _compView_0.rootEl;
    _CompWithFinal_0_5 = import1.CompWithFinal();
    _compView_0.create(_CompWithFinal_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _CompWithFinal_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.CompWithFinal> viewFactory_CompWithFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewCompWithFinalHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.CompWithFinal> _CompWithFinalNgFactory = const import8.ComponentFactory('comp-with-final', viewFactory_CompWithFinalHost0);
import8.ComponentFactory<import1.CompWithFinal> get CompWithFinalNgFactory {
  return _CompWithFinalNgFactory;
}

final List<dynamic> styles$CompWithFinalStatic = const [];

class ViewCompWithFinalStatic0 extends import0.AppView<import1.CompWithFinalStatic> {
  import2.ButtonElement _el_0;
  import2.Text _text_1;
  import2.ButtonElement _el_3;
  import2.Text _text_4;
  static import3.RenderComponentType _renderType;
  ViewCompWithFinalStatic0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('comp-with-final-static');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/intl_component.dart' : null), import8.ViewEncapsulation.None, styles$CompWithFinalStatic);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.CompWithFinalStatic> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_1 = import2.Text((import1.CompWithFinalStatic.okMessage ?? ''));
    _el_0.append(_text_1);
    import2.Text _text_2 = import2.Text(' ');
    parentRenderNode.append(_text_2);
    _el_3 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_4 = import2.Text((import1.CompWithFinalStatic.cancelMessage ?? ''));
    _el_3.append(_text_4);
    init(const [], null);
    return null;
  }
}

import0.AppView<import1.CompWithFinalStatic> viewFactory_CompWithFinalStatic0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewCompWithFinalStatic0(parentView, parentIndex);
}

final List<dynamic> styles$CompWithFinalStaticHost = const [];

class _ViewCompWithFinalStaticHost0 extends import0.AppView<import1.CompWithFinalStatic> {
  ViewCompWithFinalStatic0 _compView_0;
  import1.CompWithFinalStatic _CompWithFinalStatic_0_5;
  _ViewCompWithFinalStaticHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.CompWithFinalStatic> build() {
    _compView_0 = ViewCompWithFinalStatic0(this, 0);
    rootEl = _compView_0.rootEl;
    _CompWithFinalStatic_0_5 = import1.CompWithFinalStatic();
    _compView_0.create(_CompWithFinalStatic_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _CompWithFinalStatic_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.CompWithFinalStatic> viewFactory_CompWithFinalStaticHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewCompWithFinalStaticHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.CompWithFinalStatic> _CompWithFinalStaticNgFactory = const import8.ComponentFactory('comp-with-final-static', viewFactory_CompWithFinalStaticHost0);
import8.ComponentFactory<import1.CompWithFinalStatic> get CompWithFinalStaticNgFactory {
  return _CompWithFinalStaticNgFactory;
}

final List<dynamic> styles$CompWithExternalFinal = const [];

class ViewCompWithExternalFinal0 extends import0.AppView<import1.CompWithExternalFinal> {
  import2.ButtonElement _el_0;
  import2.Text _text_1;
  import2.ButtonElement _el_3;
  import2.Text _text_4;
  static import3.RenderComponentType _renderType;
  ViewCompWithExternalFinal0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('comp-with-external-final');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/intl_component.dart' : null), import8.ViewEncapsulation.None, styles$CompWithExternalFinal);
    setupComponentType(_renderType);
  }
  @override
  import8.ComponentRef<import1.CompWithExternalFinal> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_1 = import2.Text((import1.Messages.okMessage ?? ''));
    _el_0.append(_text_1);
    import2.Text _text_2 = import2.Text(' ');
    parentRenderNode.append(_text_2);
    _el_3 = import0.createAndAppend(doc, 'button', parentRenderNode);
    _text_4 = import2.Text((import1.Messages.cancelMessage ?? ''));
    _el_3.append(_text_4);
    init(const [], null);
    return null;
  }
}

import0.AppView<import1.CompWithExternalFinal> viewFactory_CompWithExternalFinal0(import0.AppView<dynamic> parentView, int parentIndex) {
  return ViewCompWithExternalFinal0(parentView, parentIndex);
}

final List<dynamic> styles$CompWithExternalFinalHost = const [];

class _ViewCompWithExternalFinalHost0 extends import0.AppView<import1.CompWithExternalFinal> {
  ViewCompWithExternalFinal0 _compView_0;
  import1.CompWithExternalFinal _CompWithExternalFinal_0_5;
  _ViewCompWithExternalFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, import5.ChangeDetectionStrategy.CheckAlways);
  @override
  import8.ComponentRef<import1.CompWithExternalFinal> build() {
    _compView_0 = ViewCompWithExternalFinal0(this, 0);
    rootEl = _compView_0.rootEl;
    _CompWithExternalFinal_0_5 = import1.CompWithExternalFinal();
    _compView_0.create(_CompWithExternalFinal_0_5, projectableNodes);
    init0(rootEl);
    return import8.ComponentRef(0, this, rootEl, _CompWithExternalFinal_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

import0.AppView<import1.CompWithExternalFinal> viewFactory_CompWithExternalFinalHost0(import0.AppView<dynamic> parentView, int parentIndex) {
  return _ViewCompWithExternalFinalHost0(parentView, parentIndex);
}

const import8.ComponentFactory<import1.CompWithExternalFinal> _CompWithExternalFinalNgFactory = const import8.ComponentFactory('comp-with-external-final', viewFactory_CompWithExternalFinalHost0);
import8.ComponentFactory<import1.CompWithExternalFinal> get CompWithExternalFinalNgFactory {
  return _CompWithExternalFinalNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(CompWithoutFinal, CompWithoutFinalNgFactory);
  _ngRef.registerComponent(CompWithFinal, CompWithFinalNgFactory);
  _ngRef.registerComponent(CompWithFinalStatic, CompWithFinalStaticNgFactory);
  _ngRef.registerComponent(CompWithExternalFinal, CompWithExternalFinalNgFactory);
  _ref0.initReflector();
}
