// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'directive_wrapper.dart';
export 'directive_wrapper.dart';
import 'dart:async';
import 'dart:html';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'directive_wrapper.dart' as import1;
import 'package:angular/src/debug/debug_app_view.dart';
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as import11;

const List<dynamic> styles$TestFooComponent = const ['div._ngcontent-%COMP% { font-size:10px; }'];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [
  new StaticNodeDebugInfo([import1.ChildDirective, import1.DirectiveWithOutput], null, <String, dynamic>{}),
  null
];

class ViewTestFooComponent0 extends DebugAppView<import1.TestFooComponent> {
  import3.DivElement _el_0;
  ChildDirectiveNgCd _ChildDirective_0_5;
  import1.DirectiveWithOutput _DirectiveWithOutput_0_6;
  String _expr_0;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestFooComponent0) {
    rootEl = import3.document.createElement('test-foo');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/directives/directive_wrapper.dart class TestFooComponent - inline template', ViewEncapsulation.Emulated, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 4);
    createAttr(_el_0, 'directive-with-output', '');
    createAttr(_el_0, 'role', 'button');
    createAttr(_el_0, 'some-child-directive', '');
    addShimC(_el_0);
    _ChildDirective_0_5 = new ChildDirectiveNgCd(new import1.ChildDirective(_el_0, new ElementRef(_el_0)));
    _DirectiveWithOutput_0_6 = new import1.DirectiveWithOutput();
    import3.Text _text_1 = new import3.Text('Foo');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 91);
    _el_0.addEventListener('click', eventHandler1(_ChildDirective_0_5.instance.handleClick));
    _el_0.addEventListener('keypress', eventHandler1(_ChildDirective_0_5.instance.handleKeyPress));
    final subscription_0 = _ChildDirective_0_5.instance.trigger.listen(eventHandler1(_handle_trigger_0_0));
    final subscription_1 = _DirectiveWithOutput_0_6.eventXyz.listen(eventHandler1(_ChildDirective_0_5.instance.handleXyzEventFromOtherDirective));
    init(const [], [subscription_0, subscription_1], [_el_0, _text_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.TestFooComponent _ctx = ctx;
    dbg(0, 0, 52);
    final currVal_0 = _ctx.rowIndex;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _ChildDirective_0_5.instance.gridRow = currVal_0;
      _expr_0 = currVal_0;
    }
    _ChildDirective_0_5.detectHostChanges(this, _el_0);
  }

  void _handle_trigger_0_0($event) {
    dbg(0, 0, 69);
    ctx.onTrigger;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo([import1.TestFooComponent], import1.TestFooComponent, <String, dynamic>{})
];

class _ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_TestFooComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_5 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import1.TestFooComponent>(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.TestFooComponent> TestFooComponentNgFactory = const ComponentFactory<import1.TestFooComponent>('test-foo', viewFactory_TestFooComponentHost0, _TestFooComponentMetadata);
const List<dynamic> styles$DirectiveContainerTest = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DirectiveContainerTest0 = [
  new StaticNodeDebugInfo([import1.FastDirective], null, <String, dynamic>{}),
  new StaticNodeDebugInfo([import1.FastDirective], null, <String, dynamic>{})
];

class ViewDirectiveContainerTest0 extends DebugAppView<import1.DirectiveContainerTest> {
  import3.DivElement _el_0;
  FastDirectiveNgCd _FastDirective_0_5;
  import3.DivElement _el_1;
  FastDirectiveNgCd _FastDirective_1_5;
  static RenderComponentType _renderType;
  ViewDirectiveContainerTest0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_DirectiveContainerTest0) {
    rootEl = import3.document.createElement('directive-container');
    _renderType ??= import8.appViewUtils.createRenderType('asset:_goldens/test/_files/directives/directive_wrapper.dart class DirectiveContainerTest - inline template', ViewEncapsulation.None, styles$DirectiveContainerTest);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.DirectiveContainerTest> build() {
    final _rootEl = rootEl;
    final import3.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 4);
    _el_0.className = 'target1';
    createAttr(_el_0, 'fastDirective', '');
    _FastDirective_0_5 = new FastDirectiveNgCd(new import1.FastDirective(_el_0), this, _el_0);
    _el_1 = createDivAndAppendDbg(this, doc, parentRenderNode, 1, 1, 4);
    _el_1.className = 'target2';
    createAttr(_el_1, 'fastDirective', '');
    _FastDirective_1_5 = new FastDirectiveNgCd(new import1.FastDirective(_el_1), this, _el_1);
    init(const [], null, [_el_0, _el_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.DirectiveContainerTest _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      (_FastDirective_0_5.instance.name = _ctx.finalName);
    }
    dbg(1, 1, 39);
    _FastDirective_1_5.instance.name = _ctx.nonFinal;
  }
}

AppView<import1.DirectiveContainerTest> viewFactory_DirectiveContainerTest0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewDirectiveContainerTest0(parentView, parentIndex);
}

const List<dynamic> styles$DirectiveContainerTestHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_DirectiveContainerTestHost0 = [
  new StaticNodeDebugInfo([import1.DirectiveContainerTest], import1.DirectiveContainerTest, <String, dynamic>{})
];

class _ViewDirectiveContainerTestHost0 extends DebugAppView<dynamic> {
  ViewDirectiveContainerTest0 _compView_0;
  import1.DirectiveContainerTest _DirectiveContainerTest_0_5;
  _ViewDirectiveContainerTestHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.HOST, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_DirectiveContainerTestHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewDirectiveContainerTest0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _DirectiveContainerTest_0_5 = new import1.DirectiveContainerTest();
    _compView_0.create(_DirectiveContainerTest_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import1.DirectiveContainerTest>(0, this, rootEl, _DirectiveContainerTest_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_DirectiveContainerTestHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewDirectiveContainerTestHost0(parentView, parentIndex);
}

const ComponentFactory<import1.DirectiveContainerTest> DirectiveContainerTestNgFactory = const ComponentFactory<import1.DirectiveContainerTest>('directive-container', viewFactory_DirectiveContainerTestHost0, _DirectiveContainerTestMetadata);

class ChildDirectiveNgCd extends import11.DirectiveChangeDetector {
  final import1.ChildDirective instance;
  var _expr_0;
  var _expr_1;
  bool _expr_2;
  ChildDirectiveNgCd(this.instance);
  void detectHostChanges(AppView<dynamic> view, import3.Element el) {
    final currVal_0 = instance.tabIndex;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      setProp(el, 'tabIndex', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = instance.disabledStr;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      setAttr(el, 'aria-disabled', currVal_1?.toString());
      _expr_1 = currVal_1;
    }
    final currVal_2 = instance.disabled;
    if (import8.checkBinding(_expr_2, currVal_2)) {
      updateElemClass(el, 'is-disabled', currVal_2);
      _expr_2 = currVal_2;
    }
  }
}

class FastDirectiveNgCd extends import11.DirectiveChangeDetector {
  final import1.FastDirective instance;
  var _expr_0;
  FastDirectiveNgCd(this.instance, AppView v, import3.Element e) {
    directive = this.instance;
    view = v;
    el = e;
    initCd();
  }
  void detectHostChanges(AppView<dynamic> view, import3.Element el) {
    final currVal_0 = instance.msg;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      setAttr(el, 'data-msg', currVal_0?.toString());
      _expr_0 = currVal_0;
    }
  }
}

const _TestFooComponentMetadata = const [];
const _DirectiveContainerTestMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ngRef.registerFactory(MyInjectableClass, () => new MyInjectableClass());
  _ngRef.registerComponent(DirectiveContainerTest, DirectiveContainerTestNgFactory);
  _ref0.initReflector();
}
