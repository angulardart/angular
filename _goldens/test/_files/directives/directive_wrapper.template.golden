// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'directive_wrapper.dart';
export 'directive_wrapper.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'directive_wrapper.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/render_view.dart' as import4;
import 'package:angular/src/core/linker/view_type.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import11;
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as import12;

final List<dynamic> styles$TestFooComponent = ['div._ngcontent-%ID%{font-size:10px}'];

// View for component TestFooComponent in asset:_goldens/test/_files/directives/directive_wrapper.dart (changeDetection: Default)
class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  ChildDirectiveNgCd _ChildDirective_0_5;
  import1.DirectiveWithOutput _DirectiveWithOutput_0_6;
  String _expr_0;
  import2.DivElement _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import4.RenderView parentView, int parentIndex) : super(import5.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootEl = import2.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/directives/directive_wrapper.dart' : null);
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _ctx = this.ctx;
    final import2.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import2.document;
    this._el_0 = import9.appendDiv(doc, parentRenderNode);
    import9.setAttribute(this._el_0, 'directive-with-output', '');
    import9.updateAttribute(this._el_0, 'role', import1.ChildDirective.hostRole);
    import9.setAttribute(this._el_0, 'some-child-directive', '');
    this.addShimC(this._el_0);
    this._ChildDirective_0_5 = ChildDirectiveNgCd(import1.ChildDirective(this._el_0, ElementRef(this._el_0)));
    this._DirectiveWithOutput_0_6 = import1.DirectiveWithOutput();
    final _text_1 = import9.appendText(this._el_0, 'Foo');
    this._el_0.addEventListener('click', this.eventHandler1(this._ChildDirective_0_5.instance.handleClick));
    this._el_0.addEventListener('keypress', this.eventHandler1(this._ChildDirective_0_5.instance.handleKeyPress));
    final subscription_0 = this._ChildDirective_0_5.instance.trigger.listen(this.eventHandler1(_ctx.onTrigger));
    final subscription_1 = this._DirectiveWithOutput_0_6.eventXyz.listen(this.eventHandler1(this._ChildDirective_0_5.instance.handleXyzEventFromOtherDirective));
    this.init(const [], [subscription_0, subscription_1]);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool changed = false;
    bool firstCheck = (this.cdState == 0);
    changed = false;
    final currVal_0 = _ctx.rowIndex;
    if (import11.checkBinding(this._expr_0, currVal_0)) {
      this._ChildDirective_0_5.instance.gridRow = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) {
      this._ChildDirective_0_5.instance.ngAfterChanges();
    }
    if (((!import11.AppViewUtils.throwOnChanges) && firstCheck)) {
      this._ChildDirective_0_5.instance.ngOnInit();
    }
    this._ChildDirective_0_5.detectHostChanges(this, this._el_0);
  }

  @override
  void destroyInternal() {
    this._ChildDirective_0_5.instance.ngOnDestroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.scoped(styles$TestFooComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

// Host for component TestFooComponent in asset:_goldens/test/_files/directives/directive_wrapper.dart (changeDetection: Default)
class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(import4.RenderView parentView, int parentIndex) : super(import5.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return this._compView_0;
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    // Child component TestFooComponent in asset:_goldens/test/_files/directives/directive_wrapper.dart (changeDetection: Default)
    this._compView_0 = ViewTestFooComponent0(this, 0);
    final _el_0 = this._compView_0.rootEl;
    this._TestFooComponent_0_5 = import1.TestFooComponent();
    this._compView_0.create(this._TestFooComponent_0_5, this.projectedNodes);
    this.init1(_el_0);
    return ComponentRef(this, _el_0, this._TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0(null, null);
}

class ChildDirectiveNgCd extends import12.DirectiveChangeDetector {
  final import1.ChildDirective instance;
  var _expr_0;
  var _expr_1;
  bool _expr_2;
  ChildDirectiveNgCd(this.instance);
  void detectHostChanges(import4.RenderView view, import2.Element el) {
    bool firstCheck = view.firstCheck;
    if (firstCheck) {
      if (!identical(this.instance.label, null)) {
        import9.updateAttribute(el, 'aria-label', this.instance.label);
      }
    }
    final currVal_0 = this.instance.tabIndex;
    if (import11.checkBinding(this._expr_0, currVal_0)) {
      import9.setProperty(el, 'tabIndex', currVal_0);
      this._expr_0 = currVal_0;
    }
    final currVal_1 = this.instance.disabledStr;
    if (import11.checkBinding(this._expr_1, currVal_1)) {
      import9.updateAttribute(el, 'aria-disabled', currVal_1);
      this._expr_1 = currVal_1;
    }
    final currVal_2 = this.instance.disabled;
    if (import11.checkBinding(this._expr_2, currVal_2)) {
      import9.updateClassBindingNonHtml(el, 'is-disabled', currVal_2);
      this._expr_2 = currVal_2;
    }
  }
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ngRef.registerFactory(MyInjectableClass, () => MyInjectableClass());
  _ref0.initReflector();
}
