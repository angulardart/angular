// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'directive_wrapper.dart';
export 'directive_wrapper.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'directive_wrapper.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as import10;

final List<dynamic> styles$TestFooComponent = ['div._ngcontent-%ID%{font-size:10px}'];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  ChildDirectiveNgCd _ChildDirective_0_5;
  import1.DirectiveWithOutput _DirectiveWithOutput_0_6;
  String _expr_0;
  import2.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('test-foo');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/directive_wrapper.dart' : null), ViewEncapsulation.Emulated, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    createAttr(_el_0, 'directive-with-output', '');
    createAttr(_el_0, 'role', import1.ChildDirective.hostRole);
    createAttr(_el_0, 'some-child-directive', '');
    addShimC(_el_0);
    _ChildDirective_0_5 = ChildDirectiveNgCd(import1.ChildDirective(_el_0, ElementRef(_el_0)));
    _DirectiveWithOutput_0_6 = import1.DirectiveWithOutput();
    final _text_1 = createText('Foo');
    _el_0.append(_text_1);
    _el_0.addEventListener('click', eventHandler1(_ChildDirective_0_5.instance.handleClick));
    _el_0.addEventListener('keypress', eventHandler1(_ChildDirective_0_5.instance.handleKeyPress));
    final subscription_0 = _ChildDirective_0_5.instance.trigger.listen(eventHandler1(ctx.onTrigger));
    final subscription_1 = _DirectiveWithOutput_0_6.eventXyz.listen(eventHandler1(_ChildDirective_0_5.instance.handleXyzEventFromOtherDirective));
    init(const [], [subscription_0, subscription_1]);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.rowIndex;
    if (import6.checkBinding(_expr_0, currVal_0)) {
      _ChildDirective_0_5.instance.gridRow = currVal_0;
      _expr_0 = currVal_0;
    }
    _ChildDirective_0_5.detectHostChanges(this, _el_0);
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewTestFooComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.TestFooComponent> build() {
    _compView_0 = ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_5 = import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestFooComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$DirectiveContainerTest = const [];

class ViewDirectiveContainerTest0 extends AppView<import1.DirectiveContainerTest> {
  FastDirectiveNgCd _FastDirective_0_5;
  FastDirectiveNgCd _FastDirective_1_5;
  static RenderComponentType _renderType;
  ViewDirectiveContainerTest0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('directive-container');
    _renderType ??= import6.appViewUtils.createRenderType((import7.isDevMode ? 'asset:_goldens/test/_files/directives/directive_wrapper.dart' : null), ViewEncapsulation.None, styles$DirectiveContainerTest);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.DirectiveContainerTest> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import2.document;
    final _el_0 = createDivAndAppend(doc, parentRenderNode);
    _el_0.className = 'target1';
    createAttr(_el_0, 'fastDirective', '');
    _FastDirective_0_5 = FastDirectiveNgCd(import1.FastDirective(_el_0), this, _el_0);
    final _el_1 = createDivAndAppend(doc, parentRenderNode);
    _el_1.className = 'target2';
    createAttr(_el_1, 'fastDirective', '');
    _FastDirective_1_5 = FastDirectiveNgCd(import1.FastDirective(_el_1), this, _el_1);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      (_FastDirective_0_5.instance.name = _ctx.finalName);
    }
    _FastDirective_1_5.instance.name = _ctx.nonFinal;
  }
}

AppView<import1.DirectiveContainerTest> viewFactory_DirectiveContainerTest0(AppView<dynamic> parentView, int parentIndex) {
  return ViewDirectiveContainerTest0(parentView, parentIndex);
}

const ComponentFactory<import1.DirectiveContainerTest> _DirectiveContainerTestNgFactory = const ComponentFactory('directive-container', viewFactory_DirectiveContainerTestHost0);
ComponentFactory<import1.DirectiveContainerTest> get DirectiveContainerTestNgFactory {
  return _DirectiveContainerTestNgFactory;
}

final List<dynamic> styles$DirectiveContainerTestHost = const [];

class _ViewDirectiveContainerTestHost0 extends AppView<import1.DirectiveContainerTest> {
  ViewDirectiveContainerTest0 _compView_0;
  import1.DirectiveContainerTest _DirectiveContainerTest_0_5;
  _ViewDirectiveContainerTestHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.DirectiveContainerTest> build() {
    _compView_0 = ViewDirectiveContainerTest0(this, 0);
    rootEl = _compView_0.rootEl;
    _DirectiveContainerTest_0_5 = import1.DirectiveContainerTest();
    _compView_0.create(_DirectiveContainerTest_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _DirectiveContainerTest_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.DirectiveContainerTest> viewFactory_DirectiveContainerTestHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewDirectiveContainerTestHost0(parentView, parentIndex);
}

class ChildDirectiveNgCd extends import10.DirectiveChangeDetector {
  final import1.ChildDirective instance;
  var _expr_0;
  var _expr_1;
  bool _expr_2;
  ChildDirectiveNgCd(this.instance);
  void detectHostChanges(AppView<dynamic> view, import2.Element el) {
    final currVal_0 = instance.tabIndex;
    if (import6.checkBinding(_expr_0, currVal_0)) {
      setProp(el, 'tabIndex', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = instance.disabledStr;
    if (import6.checkBinding(_expr_1, currVal_1)) {
      setAttr(el, 'aria-disabled', currVal_1);
      _expr_1 = currVal_1;
    }
    final currVal_2 = instance.disabled;
    if (import6.checkBinding(_expr_2, currVal_2)) {
      updateElemClass(el, 'is-disabled', currVal_2);
      _expr_2 = currVal_2;
    }
  }
}

class FastDirectiveNgCd extends import10.DirectiveChangeDetector {
  final import1.FastDirective instance;
  var _expr_0;
  FastDirectiveNgCd(this.instance, AppView v, import2.Element e) {
    directive = instance;
    view = v;
    el = e;
    initCd();
  }
  void detectHostChanges(AppView<dynamic> view, import2.Element el) {
    final currVal_0 = instance.msg;
    if (import6.checkBinding(_expr_0, currVal_0)) {
      setAttr(el, 'data-msg', currVal_0);
      _expr_0 = currVal_0;
    }
  }
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ngRef.registerFactory(MyInjectableClass, () => new MyInjectableClass());
  _ngRef.registerComponent(DirectiveContainerTest, DirectiveContainerTestNgFactory);
  _ref0.initReflector();
}
