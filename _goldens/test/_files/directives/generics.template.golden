// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'generics.dart';
export 'generics.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'generics.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;
import 'dart:core';
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import11;
import 'package:angular/src/runtime/dom_helpers.dart' as import12;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/change_detection/directive_change_detector.dart' as import14;

final List<dynamic> styles$UntypedComp = const [];

class ViewUntypedComp0 extends AppView<import1.UntypedComp> {
  static import2.ComponentStyles _componentStyles;
  ViewUntypedComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UntypedComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UntypedComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UntypedComp> viewFactory_UntypedComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUntypedComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UntypedComp> _UntypedCompNgFactory = const ComponentFactory('comp', viewFactory_UntypedCompHost0);
ComponentFactory<import1.UntypedComp> get UntypedCompNgFactory {
  return _UntypedCompNgFactory;
}

final List<dynamic> styles$UntypedCompHost = const [];

class _ViewUntypedCompHost0 extends AppView<import1.UntypedComp> {
  ViewUntypedComp0 _compView_0;
  import1.UntypedComp _UntypedComp_0_5;
  _ViewUntypedCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UntypedComp> build() {
    _compView_0 = ViewUntypedComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UntypedComp_0_5 = import1.UntypedComp();
    _compView_0.create(_UntypedComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UntypedComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UntypedComp> viewFactory_UntypedCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUntypedCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesUntypedComp = const [];

class ViewUsesUntypedComp0 extends AppView<import1.UsesUntypedComp> {
  ViewUntypedComp0 _compView_0;
  import1.UntypedComp _UntypedComp_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesUntypedComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesUntypedComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewUntypedComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _UntypedComp_0_5 = import1.UntypedComp();
    _compView_0.create(_UntypedComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _UntypedComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesUntypedComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesUntypedComp> viewFactory_UsesUntypedComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesUntypedComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesUntypedComp> _UsesUntypedCompNgFactory = const ComponentFactory('comp', viewFactory_UsesUntypedCompHost0);
ComponentFactory<import1.UsesUntypedComp> get UsesUntypedCompNgFactory {
  return _UsesUntypedCompNgFactory;
}

final List<dynamic> styles$UsesUntypedCompHost = const [];

class _ViewUsesUntypedCompHost0 extends AppView<import1.UsesUntypedComp> {
  ViewUsesUntypedComp0 _compView_0;
  import1.UsesUntypedComp _UsesUntypedComp_0_5;
  _ViewUsesUntypedCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesUntypedComp> build() {
    _compView_0 = ViewUsesUntypedComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesUntypedComp_0_5 = import1.UsesUntypedComp();
    _compView_0.create(_UsesUntypedComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesUntypedComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesUntypedComp> viewFactory_UsesUntypedCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesUntypedCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$GenericComp = const [];

class ViewGenericComp0<T> extends AppView<import1.GenericComp<T>> {
  static import2.ComponentStyles _componentStyles;
  ViewGenericComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.GenericComp<T>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$GenericComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.GenericComp<T>> viewFactory_GenericComp0<T>(AppView<dynamic> parentView, int parentIndex) {
  return ViewGenericComp0(parentView, parentIndex);
}

const ComponentFactory<import1.GenericComp> _GenericCompNgFactory = const ComponentFactory('comp', viewFactory_GenericCompHost0);
ComponentFactory<import1.GenericComp> get GenericCompNgFactory {
  return _GenericCompNgFactory;
}

final List<dynamic> styles$GenericCompHost = const [];

class _ViewGenericCompHost0<T> extends AppView<import1.GenericComp<T>> {
  ViewGenericComp0<T> _compView_0;
  import1.GenericComp<T> _GenericComp_0_5;
  _ViewGenericCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.GenericComp<T>> build() {
    _compView_0 = ViewGenericComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _GenericComp_0_5 = import1.GenericComp();
    _compView_0.create(_GenericComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _GenericComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.GenericComp<T>> viewFactory_GenericCompHost0<T>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewGenericCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesGenericComp = const [];

class ViewUsesGenericComp0 extends AppView<import1.UsesGenericComp> {
  ViewGenericComp0<int> _compView_0;
  import1.GenericComp<int> _GenericComp_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesGenericComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesGenericComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewGenericComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _GenericComp_0_5 = import1.GenericComp();
    _compView_0.create(_GenericComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _GenericComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesGenericComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesGenericComp> viewFactory_UsesGenericComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesGenericComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesGenericComp> _UsesGenericCompNgFactory = const ComponentFactory('comp', viewFactory_UsesGenericCompHost0);
ComponentFactory<import1.UsesGenericComp> get UsesGenericCompNgFactory {
  return _UsesGenericCompNgFactory;
}

final List<dynamic> styles$UsesGenericCompHost = const [];

class _ViewUsesGenericCompHost0 extends AppView<import1.UsesGenericComp> {
  ViewUsesGenericComp0 _compView_0;
  import1.UsesGenericComp _UsesGenericComp_0_5;
  _ViewUsesGenericCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesGenericComp> build() {
    _compView_0 = ViewUsesGenericComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesGenericComp_0_5 = import1.UsesGenericComp();
    _compView_0.create(_UsesGenericComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesGenericComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesGenericComp> viewFactory_UsesGenericCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesGenericCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$MappingComp1 = const [];

class ViewMappingComp10<K, V> extends AppView<import1.MappingComp1<K, V>> {
  static import2.ComponentStyles _componentStyles;
  ViewMappingComp10(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.MappingComp1<K, V>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$MappingComp1, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.MappingComp1<K, V>> viewFactory_MappingComp10<K, V>(AppView<dynamic> parentView, int parentIndex) {
  return ViewMappingComp10(parentView, parentIndex);
}

const ComponentFactory<import1.MappingComp1> _MappingComp1NgFactory = const ComponentFactory('comp', viewFactory_MappingComp1Host0);
ComponentFactory<import1.MappingComp1> get MappingComp1NgFactory {
  return _MappingComp1NgFactory;
}

final List<dynamic> styles$MappingComp1Host = const [];

class _ViewMappingComp1Host0<K, V> extends AppView<import1.MappingComp1<K, V>> {
  ViewMappingComp10<K, V> _compView_0;
  import1.MappingComp1<K, V> _MappingComp1_0_5;
  _ViewMappingComp1Host0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.MappingComp1<K, V>> build() {
    _compView_0 = ViewMappingComp10(this, 0);
    rootEl = _compView_0.rootEl;
    _MappingComp1_0_5 = import1.MappingComp1();
    _compView_0.create(_MappingComp1_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _MappingComp1_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.MappingComp1<K, V>> viewFactory_MappingComp1Host0<K, V>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewMappingComp1Host0(parentView, parentIndex);
}

final List<dynamic> styles$UsesMappingComp1 = const [];

class ViewUsesMappingComp10 extends AppView<import1.UsesMappingComp1> {
  ViewMappingComp10<int, String> _compView_0;
  import1.MappingComp1<int, String> _MappingComp1_0_5;
  var _expr_0;
  var _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesMappingComp10(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesMappingComp1> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewMappingComp10(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _MappingComp1_0_5 = import1.MappingComp1();
    _compView_0.create(_MappingComp1_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.bindKey;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _MappingComp1_0_5.key = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.bindValue;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      _MappingComp1_0_5.value = currVal_1;
      _expr_1 = currVal_1;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesMappingComp1, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesMappingComp1> viewFactory_UsesMappingComp10(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesMappingComp10(parentView, parentIndex);
}

const ComponentFactory<import1.UsesMappingComp1> _UsesMappingComp1NgFactory = const ComponentFactory('comp', viewFactory_UsesMappingComp1Host0);
ComponentFactory<import1.UsesMappingComp1> get UsesMappingComp1NgFactory {
  return _UsesMappingComp1NgFactory;
}

final List<dynamic> styles$UsesMappingComp1Host = const [];

class _ViewUsesMappingComp1Host0 extends AppView<import1.UsesMappingComp1> {
  ViewUsesMappingComp10 _compView_0;
  import1.UsesMappingComp1 _UsesMappingComp1_0_5;
  _ViewUsesMappingComp1Host0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesMappingComp1> build() {
    _compView_0 = ViewUsesMappingComp10(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesMappingComp1_0_5 = import1.UsesMappingComp1();
    _compView_0.create(_UsesMappingComp1_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesMappingComp1_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesMappingComp1> viewFactory_UsesMappingComp1Host0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesMappingComp1Host0(parentView, parentIndex);
}

final List<dynamic> styles$MappingComp2 = const [];

class ViewMappingComp20<K, V> extends AppView<import1.MappingComp2<K, V>> {
  static import2.ComponentStyles _componentStyles;
  ViewMappingComp20(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.MappingComp2<K, V>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$MappingComp2, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.MappingComp2<K, V>> viewFactory_MappingComp20<K, V>(AppView<dynamic> parentView, int parentIndex) {
  return ViewMappingComp20(parentView, parentIndex);
}

const ComponentFactory<import1.MappingComp2> _MappingComp2NgFactory = const ComponentFactory('comp', viewFactory_MappingComp2Host0);
ComponentFactory<import1.MappingComp2> get MappingComp2NgFactory {
  return _MappingComp2NgFactory;
}

final List<dynamic> styles$MappingComp2Host = const [];

class _ViewMappingComp2Host0<K, V> extends AppView<import1.MappingComp2<K, V>> {
  ViewMappingComp20<K, V> _compView_0;
  import1.MappingComp2<K, V> _MappingComp2_0_5;
  _ViewMappingComp2Host0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.MappingComp2<K, V>> build() {
    _compView_0 = ViewMappingComp20(this, 0);
    rootEl = _compView_0.rootEl;
    _MappingComp2_0_5 = import1.MappingComp2();
    _compView_0.create(_MappingComp2_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _MappingComp2_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.MappingComp2<K, V>> viewFactory_MappingComp2Host0<K, V>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewMappingComp2Host0(parentView, parentIndex);
}

final List<dynamic> styles$UsesMappingComp2 = const [];

class ViewUsesMappingComp20 extends AppView<import1.UsesMappingComp2> {
  ViewMappingComp20<int, String> _compView_0;
  import1.MappingComp2<int, String> _MappingComp2_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesMappingComp20(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesMappingComp2> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewMappingComp20(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _MappingComp2_0_5 = import1.MappingComp2();
    _compView_0.create(_MappingComp2_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _MappingComp2_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesMappingComp2, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesMappingComp2> viewFactory_UsesMappingComp20(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesMappingComp20(parentView, parentIndex);
}

const ComponentFactory<import1.UsesMappingComp2> _UsesMappingComp2NgFactory = const ComponentFactory('comp', viewFactory_UsesMappingComp2Host0);
ComponentFactory<import1.UsesMappingComp2> get UsesMappingComp2NgFactory {
  return _UsesMappingComp2NgFactory;
}

final List<dynamic> styles$UsesMappingComp2Host = const [];

class _ViewUsesMappingComp2Host0 extends AppView<import1.UsesMappingComp2> {
  ViewUsesMappingComp20 _compView_0;
  import1.UsesMappingComp2 _UsesMappingComp2_0_5;
  _ViewUsesMappingComp2Host0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesMappingComp2> build() {
    _compView_0 = ViewUsesMappingComp20(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesMappingComp2_0_5 = import1.UsesMappingComp2();
    _compView_0.create(_UsesMappingComp2_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesMappingComp2_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesMappingComp2> viewFactory_UsesMappingComp2Host0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesMappingComp2Host0(parentView, parentIndex);
}

final List<dynamic> styles$BoundComp = const [];

class ViewBoundComp0<T extends num> extends AppView<import1.BoundComp<T>> {
  static import2.ComponentStyles _componentStyles;
  ViewBoundComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.BoundComp<T>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$BoundComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.BoundComp<T>> viewFactory_BoundComp0<T extends num>(AppView<dynamic> parentView, int parentIndex) {
  return ViewBoundComp0(parentView, parentIndex);
}

const ComponentFactory<import1.BoundComp> _BoundCompNgFactory = const ComponentFactory('comp', viewFactory_BoundCompHost0);
ComponentFactory<import1.BoundComp> get BoundCompNgFactory {
  return _BoundCompNgFactory;
}

final List<dynamic> styles$BoundCompHost = const [];

class _ViewBoundCompHost0<T extends num> extends AppView<import1.BoundComp<T>> {
  ViewBoundComp0<T> _compView_0;
  import1.BoundComp<T> _BoundComp_0_5;
  _ViewBoundCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.BoundComp<T>> build() {
    _compView_0 = ViewBoundComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _BoundComp_0_5 = import1.BoundComp();
    _compView_0.create(_BoundComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _BoundComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.BoundComp<T>> viewFactory_BoundCompHost0<T extends num>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewBoundCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesBoundCompWithBounds = const [];

class ViewUsesBoundCompWithBounds0 extends AppView<import1.UsesBoundCompWithBounds> {
  ViewBoundComp0 _compView_0;
  import1.BoundComp _BoundComp_0_5;
  num _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesBoundCompWithBounds0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesBoundCompWithBounds> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewBoundComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _BoundComp_0_5 = import1.BoundComp();
    _compView_0.create(_BoundComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _BoundComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesBoundCompWithBounds, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesBoundCompWithBounds> viewFactory_UsesBoundCompWithBounds0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesBoundCompWithBounds0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesBoundCompWithBounds> _UsesBoundCompWithBoundsNgFactory = const ComponentFactory('comp', viewFactory_UsesBoundCompWithBoundsHost0);
ComponentFactory<import1.UsesBoundCompWithBounds> get UsesBoundCompWithBoundsNgFactory {
  return _UsesBoundCompWithBoundsNgFactory;
}

final List<dynamic> styles$UsesBoundCompWithBoundsHost = const [];

class _ViewUsesBoundCompWithBoundsHost0 extends AppView<import1.UsesBoundCompWithBounds> {
  ViewUsesBoundCompWithBounds0 _compView_0;
  import1.UsesBoundCompWithBounds _UsesBoundCompWithBounds_0_5;
  _ViewUsesBoundCompWithBoundsHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesBoundCompWithBounds> build() {
    _compView_0 = ViewUsesBoundCompWithBounds0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesBoundCompWithBounds_0_5 = import1.UsesBoundCompWithBounds();
    _compView_0.create(_UsesBoundCompWithBounds_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesBoundCompWithBounds_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesBoundCompWithBounds> viewFactory_UsesBoundCompWithBoundsHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesBoundCompWithBoundsHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesBoundComp = const [];

class ViewUsesBoundComp0 extends AppView<import1.UsesBoundComp> {
  ViewBoundComp0 _compView_0;
  import1.BoundComp _BoundComp_0_5;
  num _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesBoundComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesBoundComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewBoundComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _BoundComp_0_5 = import1.BoundComp();
    _compView_0.create(_BoundComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _BoundComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesBoundComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesBoundComp> viewFactory_UsesBoundComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesBoundComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesBoundComp> _UsesBoundCompNgFactory = const ComponentFactory('comp', viewFactory_UsesBoundCompHost0);
ComponentFactory<import1.UsesBoundComp> get UsesBoundCompNgFactory {
  return _UsesBoundCompNgFactory;
}

final List<dynamic> styles$UsesBoundCompHost = const [];

class _ViewUsesBoundCompHost0 extends AppView<import1.UsesBoundComp> {
  ViewUsesBoundComp0 _compView_0;
  import1.UsesBoundComp _UsesBoundComp_0_5;
  _ViewUsesBoundCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesBoundComp> build() {
    _compView_0 = ViewUsesBoundComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesBoundComp_0_5 = import1.UsesBoundComp();
    _compView_0.create(_UsesBoundComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesBoundComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesBoundComp> viewFactory_UsesBoundCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesBoundCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$SelfBoundComp = const [];

class ViewSelfBoundComp0<A, B extends A> extends AppView<import1.SelfBoundComp<A, B>> {
  static import2.ComponentStyles _componentStyles;
  ViewSelfBoundComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.SelfBoundComp<A, B>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$SelfBoundComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.SelfBoundComp<A, B>> viewFactory_SelfBoundComp0<A, B extends A>(AppView<dynamic> parentView, int parentIndex) {
  return ViewSelfBoundComp0(parentView, parentIndex);
}

const ComponentFactory<import1.SelfBoundComp> _SelfBoundCompNgFactory = const ComponentFactory('comp', viewFactory_SelfBoundCompHost0);
ComponentFactory<import1.SelfBoundComp> get SelfBoundCompNgFactory {
  return _SelfBoundCompNgFactory;
}

final List<dynamic> styles$SelfBoundCompHost = const [];

class _ViewSelfBoundCompHost0<A, B extends A> extends AppView<import1.SelfBoundComp<A, B>> {
  ViewSelfBoundComp0<A, B> _compView_0;
  import1.SelfBoundComp<A, B> _SelfBoundComp_0_5;
  _ViewSelfBoundCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.SelfBoundComp<A, B>> build() {
    _compView_0 = ViewSelfBoundComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _SelfBoundComp_0_5 = import1.SelfBoundComp();
    _compView_0.create(_SelfBoundComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _SelfBoundComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.SelfBoundComp<A, B>> viewFactory_SelfBoundCompHost0<A, B extends A>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewSelfBoundCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesSelfBoundComp = const [];

class ViewUsesSelfBoundComp0 extends AppView<import1.UsesSelfBoundComp> {
  ViewSelfBoundComp0 _compView_0;
  import1.SelfBoundComp _SelfBoundComp_0_5;
  var _expr_0;
  var _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesSelfBoundComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesSelfBoundComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewSelfBoundComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _SelfBoundComp_0_5 = import1.SelfBoundComp();
    _compView_0.create(_SelfBoundComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.bindA;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _SelfBoundComp_0_5.a = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.bindB;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      _SelfBoundComp_0_5.b = currVal_1;
      _expr_1 = currVal_1;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesSelfBoundComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesSelfBoundComp> viewFactory_UsesSelfBoundComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesSelfBoundComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesSelfBoundComp> _UsesSelfBoundCompNgFactory = const ComponentFactory('comp', viewFactory_UsesSelfBoundCompHost0);
ComponentFactory<import1.UsesSelfBoundComp> get UsesSelfBoundCompNgFactory {
  return _UsesSelfBoundCompNgFactory;
}

final List<dynamic> styles$UsesSelfBoundCompHost = const [];

class _ViewUsesSelfBoundCompHost0 extends AppView<import1.UsesSelfBoundComp> {
  ViewUsesSelfBoundComp0 _compView_0;
  import1.UsesSelfBoundComp _UsesSelfBoundComp_0_5;
  _ViewUsesSelfBoundCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesSelfBoundComp> build() {
    _compView_0 = ViewUsesSelfBoundComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesSelfBoundComp_0_5 = import1.UsesSelfBoundComp();
    _compView_0.create(_UsesSelfBoundComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesSelfBoundComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesSelfBoundComp> viewFactory_UsesSelfBoundCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesSelfBoundCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$RecursiveComp = const [];

class ViewRecursiveComp0<T extends Comparable<T>> extends AppView<import1.RecursiveComp<T>> {
  static import2.ComponentStyles _componentStyles;
  ViewRecursiveComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.RecursiveComp<T>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$RecursiveComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.RecursiveComp<T>> viewFactory_RecursiveComp0<T extends Comparable<T>>(AppView<dynamic> parentView, int parentIndex) {
  return ViewRecursiveComp0(parentView, parentIndex);
}

const ComponentFactory<import1.RecursiveComp> _RecursiveCompNgFactory = const ComponentFactory('comp', viewFactory_RecursiveCompHost0);
ComponentFactory<import1.RecursiveComp> get RecursiveCompNgFactory {
  return _RecursiveCompNgFactory;
}

final List<dynamic> styles$RecursiveCompHost = const [];

class _ViewRecursiveCompHost0<T extends Comparable<T>> extends AppView<import1.RecursiveComp<T>> {
  ViewRecursiveComp0<T> _compView_0;
  import1.RecursiveComp<T> _RecursiveComp_0_5;
  _ViewRecursiveCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.RecursiveComp<T>> build() {
    _compView_0 = ViewRecursiveComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _RecursiveComp_0_5 = import1.RecursiveComp();
    _compView_0.create(_RecursiveComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _RecursiveComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.RecursiveComp<T>> viewFactory_RecursiveCompHost0<T extends Comparable<T>>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewRecursiveCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesRecursiveComp = const [];

class ViewUsesRecursiveComp0 extends AppView<import1.UsesRecursiveComp> {
  ViewRecursiveComp0 _compView_0;
  import1.RecursiveComp _RecursiveComp_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesRecursiveComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesRecursiveComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewRecursiveComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _RecursiveComp_0_5 = import1.RecursiveComp();
    _compView_0.create(_RecursiveComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _RecursiveComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesRecursiveComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesRecursiveComp> viewFactory_UsesRecursiveComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesRecursiveComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesRecursiveComp> _UsesRecursiveCompNgFactory = const ComponentFactory('comp', viewFactory_UsesRecursiveCompHost0);
ComponentFactory<import1.UsesRecursiveComp> get UsesRecursiveCompNgFactory {
  return _UsesRecursiveCompNgFactory;
}

final List<dynamic> styles$UsesRecursiveCompHost = const [];

class _ViewUsesRecursiveCompHost0 extends AppView<import1.UsesRecursiveComp> {
  ViewUsesRecursiveComp0 _compView_0;
  import1.UsesRecursiveComp _UsesRecursiveComp_0_5;
  _ViewUsesRecursiveCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesRecursiveComp> build() {
    _compView_0 = ViewUsesRecursiveComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesRecursiveComp_0_5 = import1.UsesRecursiveComp();
    _compView_0.create(_UsesRecursiveComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesRecursiveComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesRecursiveComp> viewFactory_UsesRecursiveCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesRecursiveCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$FunctionTypeComp = const [];

class ViewFunctionTypeComp0<F> extends AppView<import1.FunctionTypeComp<F>> {
  static import2.ComponentStyles _componentStyles;
  ViewFunctionTypeComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.FunctionTypeComp<F>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$FunctionTypeComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.FunctionTypeComp<F>> viewFactory_FunctionTypeComp0<F>(AppView<dynamic> parentView, int parentIndex) {
  return ViewFunctionTypeComp0(parentView, parentIndex);
}

const ComponentFactory<import1.FunctionTypeComp> _FunctionTypeCompNgFactory = const ComponentFactory('comp', viewFactory_FunctionTypeCompHost0);
ComponentFactory<import1.FunctionTypeComp> get FunctionTypeCompNgFactory {
  return _FunctionTypeCompNgFactory;
}

final List<dynamic> styles$FunctionTypeCompHost = const [];

class _ViewFunctionTypeCompHost0<F> extends AppView<import1.FunctionTypeComp<F>> {
  ViewFunctionTypeComp0<F> _compView_0;
  import1.FunctionTypeComp<F> _FunctionTypeComp_0_5;
  _ViewFunctionTypeCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.FunctionTypeComp<F>> build() {
    _compView_0 = ViewFunctionTypeComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _FunctionTypeComp_0_5 = import1.FunctionTypeComp();
    _compView_0.create(_FunctionTypeComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _FunctionTypeComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.FunctionTypeComp<F>> viewFactory_FunctionTypeCompHost0<F>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewFunctionTypeCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesFunctionTypeComp = const [];

class ViewUsesFunctionTypeComp0 extends AppView<import1.UsesFunctionTypeComp> {
  ViewFunctionTypeComp0<String> _compView_0;
  import1.FunctionTypeComp<String> _FunctionTypeComp_0_5;
  var _expr_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesFunctionTypeComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesFunctionTypeComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewFunctionTypeComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _FunctionTypeComp_0_5 = import1.FunctionTypeComp();
    _compView_0.create(_FunctionTypeComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _FunctionTypeComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesFunctionTypeComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesFunctionTypeComp> viewFactory_UsesFunctionTypeComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesFunctionTypeComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesFunctionTypeComp> _UsesFunctionTypeCompNgFactory = const ComponentFactory('comp', viewFactory_UsesFunctionTypeCompHost0);
ComponentFactory<import1.UsesFunctionTypeComp> get UsesFunctionTypeCompNgFactory {
  return _UsesFunctionTypeCompNgFactory;
}

final List<dynamic> styles$UsesFunctionTypeCompHost = const [];

class _ViewUsesFunctionTypeCompHost0 extends AppView<import1.UsesFunctionTypeComp> {
  ViewUsesFunctionTypeComp0 _compView_0;
  import1.UsesFunctionTypeComp _UsesFunctionTypeComp_0_5;
  _ViewUsesFunctionTypeCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesFunctionTypeComp> build() {
    _compView_0 = ViewUsesFunctionTypeComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesFunctionTypeComp_0_5 = import1.UsesFunctionTypeComp();
    _compView_0.create(_UsesFunctionTypeComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesFunctionTypeComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesFunctionTypeComp> viewFactory_UsesFunctionTypeCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesFunctionTypeCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$NestedParentComp = const [];

class ViewNestedParentComp0<T> extends AppView<import1.NestedParentComp<T>> {
  ViewNestedChildComp0<T> _compView_0;
  import1.NestedChildComp<T> _NestedChildComp_0_5;
  ViewNestedChildComp0<T> _compView_1;
  import1.NestedChildComp<T> _NestedChildComp_1_5;
  ViewContainer _appEl_2;
  import11.NgFor _NgFor_2_9;
  var _expr_0;
  var _expr_1;
  var _expr_2;
  static import2.ComponentStyles _componentStyles;
  ViewNestedParentComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('parent');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.NestedParentComp<T>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewNestedChildComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _NestedChildComp_0_5 = import1.NestedChildComp();
    _compView_0.create(_NestedChildComp_0_5, []);
    _compView_1 = ViewNestedChildComp0(this, 1);
    final _el_1 = _compView_1.rootEl;
    parentRenderNode.append(_el_1);
    _NestedChildComp_1_5 = import1.NestedChildComp();
    _compView_1.create(_NestedChildComp_1_5, []);
    final _anchor_2 = import12.appendAnchor(parentRenderNode);
    _appEl_2 = ViewContainer(2, null, this, _anchor_2);
    TemplateRef _TemplateRef_2_8 = TemplateRef(_appEl_2, (parentView, parentIndex) {
      return viewFactory_NestedParentComp1<T>(parentView, parentIndex);
    });
    _NgFor_2_9 = import11.NgFor(_appEl_2, _TemplateRef_2_8);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.input1;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _NestedChildComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.input2;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      _NestedChildComp_1_5.input = currVal_1;
      _expr_1 = currVal_1;
    }
    final currVal_2 = _ctx.moreInputs;
    if (import8.checkBinding(_expr_2, currVal_2)) {
      _NgFor_2_9.ngForOf = currVal_2;
      _expr_2 = currVal_2;
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      _NgFor_2_9.ngDoCheck();
    }
    _appEl_2.detectChangesInNestedViews();
    _compView_0.detectChanges();
    _compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    _appEl_2.destroyNestedViews();
    _compView_0.destroy();
    _compView_1.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$NestedParentComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.NestedParentComp<T>> viewFactory_NestedParentComp0<T>(AppView<dynamic> parentView, int parentIndex) {
  return ViewNestedParentComp0(parentView, parentIndex);
}

const ComponentFactory<import1.NestedParentComp> _NestedParentCompNgFactory = const ComponentFactory('parent', viewFactory_NestedParentCompHost0);
ComponentFactory<import1.NestedParentComp> get NestedParentCompNgFactory {
  return _NestedParentCompNgFactory;
}

class _ViewNestedParentComp1<T> extends AppView<import1.NestedParentComp<T>> {
  ViewNestedChildComp0<T> _compView_0;
  import1.NestedChildComp<T> _NestedChildComp_0_5;
  var _expr_0;
  _ViewNestedParentComp1(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.embedded, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedParentComp<T>> build() {
    _compView_0 = ViewNestedChildComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _NestedChildComp_0_5 = import1.NestedChildComp();
    _compView_0.create(_NestedChildComp_0_5, []);
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_input = import6.unsafeCast<T>(locals['\$implicit']);
    final currVal_0 = local_input;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _NestedChildComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.NestedParentComp<T>> viewFactory_NestedParentComp1<T>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedParentComp1(parentView, parentIndex);
}

final List<dynamic> styles$NestedParentCompHost = const [];

class _ViewNestedParentCompHost0<T> extends AppView<import1.NestedParentComp<T>> {
  ViewNestedParentComp0<T> _compView_0;
  import1.NestedParentComp<T> _NestedParentComp_0_5;
  _ViewNestedParentCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedParentComp<T>> build() {
    _compView_0 = ViewNestedParentComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _NestedParentComp_0_5 = import1.NestedParentComp();
    _compView_0.create(_NestedParentComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _NestedParentComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.NestedParentComp<T>> viewFactory_NestedParentCompHost0<T>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedParentCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$NestedChildComp = const [];

class ViewNestedChildComp0<T> extends AppView<import1.NestedChildComp<T>> {
  static import2.ComponentStyles _componentStyles;
  ViewNestedChildComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('child');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.NestedChildComp<T>> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$NestedChildComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.NestedChildComp<T>> viewFactory_NestedChildComp0<T>(AppView<dynamic> parentView, int parentIndex) {
  return ViewNestedChildComp0(parentView, parentIndex);
}

const ComponentFactory<import1.NestedChildComp> _NestedChildCompNgFactory = const ComponentFactory('child', viewFactory_NestedChildCompHost0);
ComponentFactory<import1.NestedChildComp> get NestedChildCompNgFactory {
  return _NestedChildCompNgFactory;
}

final List<dynamic> styles$NestedChildCompHost = const [];

class _ViewNestedChildCompHost0<T> extends AppView<import1.NestedChildComp<T>> {
  ViewNestedChildComp0<T> _compView_0;
  import1.NestedChildComp<T> _NestedChildComp_0_5;
  _ViewNestedChildCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.NestedChildComp<T>> build() {
    _compView_0 = ViewNestedChildComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _NestedChildComp_0_5 = import1.NestedChildComp();
    _compView_0.create(_NestedChildComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _NestedChildComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.NestedChildComp<T>> viewFactory_NestedChildCompHost0<T>(AppView<dynamic> parentView, int parentIndex) {
  return _ViewNestedChildCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesNestedParentComp = const [];

class ViewUsesNestedParentComp0 extends AppView<import1.UsesNestedParentComp> {
  ViewNestedParentComp0<int> _compView_0;
  import1.NestedParentComp<int> _NestedParentComp_0_5;
  var _expr_0;
  var _expr_1;
  var _expr_2;
  static import2.ComponentStyles _componentStyles;
  ViewUsesNestedParentComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesNestedParentComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewNestedParentComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _NestedParentComp_0_5 = import1.NestedParentComp();
    _compView_0.create(_NestedParentComp_0_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.binding1;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _NestedParentComp_0_5.input1 = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.binding2;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      _NestedParentComp_0_5.input2 = currVal_1;
      _expr_1 = currVal_1;
    }
    final currVal_2 = _ctx.moreBindings;
    if (import8.checkBinding(_expr_2, currVal_2)) {
      _NestedParentComp_0_5.moreInputs = currVal_2;
      _expr_2 = currVal_2;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesNestedParentComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesNestedParentComp> viewFactory_UsesNestedParentComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesNestedParentComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesNestedParentComp> _UsesNestedParentCompNgFactory = const ComponentFactory('comp', viewFactory_UsesNestedParentCompHost0);
ComponentFactory<import1.UsesNestedParentComp> get UsesNestedParentCompNgFactory {
  return _UsesNestedParentCompNgFactory;
}

final List<dynamic> styles$UsesNestedParentCompHost = const [];

class _ViewUsesNestedParentCompHost0 extends AppView<import1.UsesNestedParentComp> {
  ViewUsesNestedParentComp0 _compView_0;
  import1.UsesNestedParentComp _UsesNestedParentComp_0_5;
  _ViewUsesNestedParentCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesNestedParentComp> build() {
    _compView_0 = ViewUsesNestedParentComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesNestedParentComp_0_5 = import1.UsesNestedParentComp();
    _compView_0.create(_UsesNestedParentComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesNestedParentComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesNestedParentComp> viewFactory_UsesNestedParentCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesNestedParentCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesMultipleTypesComp = const [];

class ViewUsesMultipleTypesComp0 extends AppView<import1.UsesMultipleTypesComp> {
  ViewGenericComp0<String> _compView_0;
  import1.GenericComp<String> _GenericComp_0_5;
  ViewGenericComp0<int> _compView_1;
  import1.GenericComp<int> _GenericComp_1_5;
  var _expr_0;
  var _expr_1;
  static import2.ComponentStyles _componentStyles;
  ViewUsesMultipleTypesComp0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesMultipleTypesComp> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _compView_0 = ViewGenericComp0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _GenericComp_0_5 = import1.GenericComp();
    _compView_0.create(_GenericComp_0_5, []);
    _compView_1 = ViewGenericComp0(this, 1);
    final _el_1 = _compView_1.rootEl;
    parentRenderNode.append(_el_1);
    _GenericComp_1_5 = import1.GenericComp();
    _compView_1.create(_GenericComp_1_5, []);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.name;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _GenericComp_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = _ctx.index;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      _GenericComp_1_5.input = currVal_1;
      _expr_1 = currVal_1;
    }
    _compView_0.detectChanges();
    _compView_1.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
    _compView_1.destroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesMultipleTypesComp, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesMultipleTypesComp> viewFactory_UsesMultipleTypesComp0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesMultipleTypesComp0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesMultipleTypesComp> _UsesMultipleTypesCompNgFactory = const ComponentFactory('comp', viewFactory_UsesMultipleTypesCompHost0);
ComponentFactory<import1.UsesMultipleTypesComp> get UsesMultipleTypesCompNgFactory {
  return _UsesMultipleTypesCompNgFactory;
}

final List<dynamic> styles$UsesMultipleTypesCompHost = const [];

class _ViewUsesMultipleTypesCompHost0 extends AppView<import1.UsesMultipleTypesComp> {
  ViewUsesMultipleTypesComp0 _compView_0;
  import1.UsesMultipleTypesComp _UsesMultipleTypesComp_0_5;
  _ViewUsesMultipleTypesCompHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesMultipleTypesComp> build() {
    _compView_0 = ViewUsesMultipleTypesComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesMultipleTypesComp_0_5 = import1.UsesMultipleTypesComp();
    _compView_0.create(_UsesMultipleTypesComp_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesMultipleTypesComp_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesMultipleTypesComp> viewFactory_UsesMultipleTypesCompHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesMultipleTypesCompHost0(parentView, parentIndex);
}

final List<dynamic> styles$UsesGenericChangeDetector = const [];

class ViewUsesGenericChangeDetector0 extends AppView<import1.UsesGenericChangeDetector> {
  GenericDirectiveNgCd<String> _GenericDirective_0_5;
  var _expr_0;
  import5.DivElement _el_0;
  static import2.ComponentStyles _componentStyles;
  ViewUsesGenericChangeDetector0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/generics.dart' : null);
  }

  @override
  ComponentRef<import1.UsesGenericChangeDetector> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    _el_0 = import12.appendDiv(doc, parentRenderNode);
    import12.setAttribute(_el_0, 'generic', '');
    _GenericDirective_0_5 = GenericDirectiveNgCd(import1.GenericDirective());
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = _ctx.value;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _GenericDirective_0_5.instance.input = currVal_0;
      _expr_0 = currVal_0;
    }
    _GenericDirective_0_5.detectHostChanges(this, _el_0);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesGenericChangeDetector, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesGenericChangeDetector> viewFactory_UsesGenericChangeDetector0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesGenericChangeDetector0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesGenericChangeDetector> _UsesGenericChangeDetectorNgFactory = const ComponentFactory('comp', viewFactory_UsesGenericChangeDetectorHost0);
ComponentFactory<import1.UsesGenericChangeDetector> get UsesGenericChangeDetectorNgFactory {
  return _UsesGenericChangeDetectorNgFactory;
}

final List<dynamic> styles$UsesGenericChangeDetectorHost = const [];

class _ViewUsesGenericChangeDetectorHost0 extends AppView<import1.UsesGenericChangeDetector> {
  ViewUsesGenericChangeDetector0 _compView_0;
  import1.UsesGenericChangeDetector _UsesGenericChangeDetector_0_5;
  _ViewUsesGenericChangeDetectorHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesGenericChangeDetector> build() {
    _compView_0 = ViewUsesGenericChangeDetector0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesGenericChangeDetector_0_5 = import1.UsesGenericChangeDetector();
    _compView_0.create(_UsesGenericChangeDetector_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesGenericChangeDetector_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesGenericChangeDetector> viewFactory_UsesGenericChangeDetectorHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesGenericChangeDetectorHost0(parentView, parentIndex);
}

class GenericDirectiveNgCd<T> extends import14.DirectiveChangeDetector {
  final import1.GenericDirective<T> instance;
  var _expr_0;
  GenericDirectiveNgCd(this.instance);
  void detectHostChanges(AppView<dynamic> view, import5.Element el) {
    final currVal_0 = instance.input;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      import12.updateAttribute(el, 'a', currVal_0?.toString());
      _expr_0 = currVal_0;
    }
  }
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UntypedComp, UntypedCompNgFactory);
  _ngRef.registerComponent(UsesUntypedComp, UsesUntypedCompNgFactory);
  _ngRef.registerComponent(GenericComp, GenericCompNgFactory);
  _ngRef.registerComponent(UsesGenericComp, UsesGenericCompNgFactory);
  _ngRef.registerComponent(MappingComp1, MappingComp1NgFactory);
  _ngRef.registerComponent(UsesMappingComp1, UsesMappingComp1NgFactory);
  _ngRef.registerComponent(MappingComp2, MappingComp2NgFactory);
  _ngRef.registerComponent(UsesMappingComp2, UsesMappingComp2NgFactory);
  _ngRef.registerComponent(BoundComp, BoundCompNgFactory);
  _ngRef.registerComponent(UsesBoundCompWithBounds, UsesBoundCompWithBoundsNgFactory);
  _ngRef.registerComponent(UsesBoundComp, UsesBoundCompNgFactory);
  _ngRef.registerComponent(SelfBoundComp, SelfBoundCompNgFactory);
  _ngRef.registerComponent(UsesSelfBoundComp, UsesSelfBoundCompNgFactory);
  _ngRef.registerComponent(RecursiveComp, RecursiveCompNgFactory);
  _ngRef.registerComponent(UsesRecursiveComp, UsesRecursiveCompNgFactory);
  _ngRef.registerComponent(FunctionTypeComp, FunctionTypeCompNgFactory);
  _ngRef.registerComponent(UsesFunctionTypeComp, UsesFunctionTypeCompNgFactory);
  _ngRef.registerComponent(NestedParentComp, NestedParentCompNgFactory);
  _ngRef.registerComponent(NestedChildComp, NestedChildCompNgFactory);
  _ngRef.registerComponent(UsesNestedParentComp, UsesNestedParentCompNgFactory);
  _ngRef.registerComponent(UsesMultipleTypesComp, UsesMultipleTypesCompNgFactory);
  _ngRef.registerComponent(UsesGenericChangeDetector, UsesGenericChangeDetectorNgFactory);
  _ref0.initReflector();
}
