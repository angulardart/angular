// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'components.dart';
export 'components.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'components.dart' as import0;
import 'dart:html' as import1;
import 'package:angular/src/core/linker/view_type.dart' as import2;
import 'package:angular/src/core/linker/app_view_utils.dart' as import3;
import 'package:angular/src/runtime.dart' as import4;

final List<dynamic> styles$TestSubComponent = const [];

class ViewTestSubComponent0 extends AppView<import0.TestSubComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewTestSubComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import1.document.createElement('test-bar');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/directives/components.dart' : null), ViewEncapsulation.None, styles$TestSubComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.TestSubComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Bar');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.TestSubComponent> viewFactory_TestSubComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewTestSubComponent0(parentView, parentIndex);
}

final List<dynamic> styles$TestSubComponentHost = const [];

class _ViewTestSubComponentHost0 extends AppView<import0.TestSubComponent> {
  ViewTestSubComponent0 _compView_0;
  import0.TestSubComponent _TestSubComponent_0_5;
  _ViewTestSubComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.TestSubComponent> build() {
    _compView_0 = ViewTestSubComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestSubComponent_0_5 = import0.TestSubComponent();
    _compView_0.create(_TestSubComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _TestSubComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.TestSubComponent> viewFactory_TestSubComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestSubComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.TestSubComponent> _TestSubComponentNgFactory = const ComponentFactory('test-bar', viewFactory_TestSubComponentHost0);
ComponentFactory<import0.TestSubComponent> get TestSubComponentNgFactory {
  return _TestSubComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestSubComponent, TestSubComponentNgFactory);
  _ref0.initReflector();
}
