// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'base_component.dart';
export 'base_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'base_component.dart' as import1;
import 'components.template.dart' as import2;
import 'components.dart' as import3;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/view.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import11;

final List<dynamic> styles$TestFooComponent = const [];

// View for component TestFooComponent in asset:_goldens/test/_files/directives/base_component.dart (changeDetection: Default)
class ViewTestFooComponent0 extends import0.ComponentView<import1.TestFooComponent> {
  import2.ViewTestSubComponent0 _compView_2;
  import3.TestSubComponent _TestSubComponent_2_5;
  static import4.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/directives/base_component.dart' : null);
  }

  @override
  void build() {
    final import7.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import7.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    final _text_1 = import9.appendText(_el_0, 'Foo');
    // Child component TestSubComponent in asset:_goldens/test/_files/directives/components.dart (changeDetection: Default)
    this._compView_2 = import2.ViewTestSubComponent0(this, 2);
    final _el_2 = this._compView_2.rootElement;
    parentRenderNode.append(_el_2);
    this._TestSubComponent_2_5 = import3.TestSubComponent();
    this._compView_2.create(this._TestSubComponent_2_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_2.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_2.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl));
      if (import8.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

// Host for component TestFooComponent in asset:_goldens/test/_files/directives/base_component.dart (changeDetection: Default)
class _ViewTestFooComponentHost0 extends import11.HostView<import1.TestFooComponent> {
  @override
  void build() {
    // Child component TestFooComponent in asset:_goldens/test/_files/directives/base_component.dart (changeDetection: Default)
    this.componentView = ViewTestFooComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.TestFooComponent();
    this.initRootNode(_el_0);
  }
}

import11.HostView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
