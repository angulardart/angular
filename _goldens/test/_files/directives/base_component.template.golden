// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'base_component.dart';
export 'base_component.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'base_component.dart' as import1;
import 'components.template.dart' as import2;
import 'components.dart' as import3;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/render_view.dart' as import5;
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import8;
import 'package:angular/src/runtime.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import11;

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  import2.ViewTestSubComponent0 _compView_2;
  import3.TestSubComponent _TestSubComponent_2_5;
  static import4.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import8.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import9.isDevMode ? 'asset:_goldens/test/_files/directives/base_component.dart' : null);
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    final import8.HtmlElement parentRenderNode = initViewRoot();
    final doc = import8.document;
    final _el_0 = import11.appendDiv(doc, parentRenderNode);
    final _text_1 = import11.appendText(_el_0, 'Foo');
    _compView_2 = import2.ViewTestSubComponent0(this, 2);
    final _el_2 = _compView_2.rootEl;
    parentRenderNode.append(_el_2);
    _TestSubComponent_2_5 = import3.TestSubComponent();
    _compView_2.create0(_TestSubComponent_2_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    _compView_2.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_2.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import4.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(import5.RenderView parentView, int parentIndex) : super(import6.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  AppView<void> get hostedComponentView {
    return _compView_0;
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    _compView_0 = ViewTestFooComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _TestFooComponent_0_5 = import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
