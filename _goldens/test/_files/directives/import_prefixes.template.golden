// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'import_prefixes.dart';
export 'import_prefixes.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'import_prefixes.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;

final List<dynamic> styles$ParentComponent = const [];

class ViewParentComponent0 extends AppView<import1.ParentComponent> {
  import2.Element _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewParentComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('parent-comp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/import_prefixes.dart' : null);
  }

  @override
  ComponentRef<import1.ParentComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import2.document;
    _el_0 = import8.appendElement(doc, parentRenderNode, 'child-comp');
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.input, null)) {
        import8.setProperty(_el_0, 'myType', _ctx.input);
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$ParentComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.ParentComponent> viewFactory_ParentComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewParentComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.ParentComponent> _ParentComponentNgFactory = const ComponentFactory('parent-comp', viewFactory_ParentComponentHost0);
ComponentFactory<import1.ParentComponent> get ParentComponentNgFactory {
  return _ParentComponentNgFactory;
}

final List<dynamic> styles$ParentComponentHost = const [];

class _ViewParentComponentHost0 extends AppView<import1.ParentComponent> {
  ViewParentComponent0 _compView_0;
  import1.ParentComponent _ParentComponent_0_5;
  _ViewParentComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.ParentComponent> build() {
    _compView_0 = ViewParentComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _ParentComponent_0_5 = import1.ParentComponent();
    _compView_0.create(_ParentComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _ParentComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.ParentComponent> viewFactory_ParentComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewParentComponentHost0(parentView, parentIndex);
}

final List<dynamic> styles$ChildComponent = const [];

class ViewChildComponent0 extends AppView<import1.ChildComponent> {
  var _expr_0;
  final import2.Text _text_0 = import8.createText('');
  static import3.ComponentStyles _componentStyles;
  ViewChildComponent0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('child-cmp');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/import_prefixes.dart' : null);
  }

  @override
  ComponentRef<import1.ChildComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    parentRenderNode.append(_text_0);
    init(const [], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    final currVal_0 = import9.interpolate0(_ctx.myType);
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _text_0.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$ChildComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.ChildComponent> viewFactory_ChildComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewChildComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.ChildComponent> _ChildComponentNgFactory = const ComponentFactory('child-cmp', viewFactory_ChildComponentHost0);
ComponentFactory<import1.ChildComponent> get ChildComponentNgFactory {
  return _ChildComponentNgFactory;
}

final List<dynamic> styles$ChildComponentHost = const [];

class _ViewChildComponentHost0 extends AppView<import1.ChildComponent> {
  ViewChildComponent0 _compView_0;
  import1.ChildComponent _ChildComponent_0_5;
  _ViewChildComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import4.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.ChildComponent> build() {
    _compView_0 = ViewChildComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _ChildComponent_0_5 = import1.ChildComponent();
    _compView_0.create(_ChildComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _ChildComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.ChildComponent> viewFactory_ChildComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewChildComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ParentComponent, ParentComponentNgFactory);
  _ngRef.registerComponent(ChildComponent, ChildComponentNgFactory);
  _ref0.initReflector();
}
