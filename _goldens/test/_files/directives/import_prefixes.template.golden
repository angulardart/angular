// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'import_prefixes.dart';
export 'import_prefixes.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'import_prefixes.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import3;
import 'package:angular/src/core/linker/views/view.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;
import 'package:angular/src/di/injector/injector.dart' as import10;
import 'package:angular/src/runtime/text_binding.dart' as import11;
import 'package:angular/src/runtime/interpolate.dart' as import12;

final List<dynamic> styles$ParentComponent = const [];

// View for component ParentComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
class ViewParentComponent0 extends import0.ComponentView<import1.ParentComponent> {
  import2.Element _el_0;
  static import3.ComponentStyles _componentStyles;
  ViewParentComponent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import2.document.createElement('parent-comp');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/import_prefixes.dart' : null);
  }

  @override
  void build() {
    final import2.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import2.document;
    this._el_0 = import7.appendElement(doc, parentRenderNode, 'child-comp');
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    if (firstCheck) {
      if (!identical(_ctx.input, null)) {
        import7.setProperty(this._el_0, 'myType', _ctx.input);
      }
    }
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$ParentComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ParentComponent> _ParentComponentNgFactory = const ComponentFactory('parent-comp', viewFactory_ParentComponentHost0);
ComponentFactory<import1.ParentComponent> get ParentComponentNgFactory {
  return _ParentComponentNgFactory;
}

final List<dynamic> styles$ParentComponentHost = const [];

// Host for component ParentComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
class _ViewParentComponentHost0 extends import9.HostView<import1.ParentComponent> {
  _ViewParentComponentHost0(import10.Injector injector) : super(injector);
  @override
  void build() {
    // Child component ParentComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
    this.componentView = ViewParentComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ParentComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.ParentComponent> viewFactory_ParentComponentHost0(import10.Injector injector) {
  return _ViewParentComponentHost0(injector);
}

final List<dynamic> styles$ChildComponent = const [];

// View for component ChildComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
class ViewChildComponent0 extends import0.ComponentView<import1.ChildComponent> {
  final import11.TextBinding _textBinding_0 = import11.TextBinding();
  static import3.ComponentStyles _componentStyles;
  ViewChildComponent0(import4.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import2.document.createElement('child-cmp');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/directives/import_prefixes.dart' : null);
  }

  @override
  void build() {
    final import2.HtmlElement parentRenderNode = this.initViewRoot();
    parentRenderNode.append(this._textBinding_0.element);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    this._textBinding_0.updateText(import12.interpolate0(_ctx.myType));
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import3.ComponentStyles.unscoped(styles$ChildComponent, _debugComponentUrl))));
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.ChildComponent> _ChildComponentNgFactory = const ComponentFactory('child-cmp', viewFactory_ChildComponentHost0);
ComponentFactory<import1.ChildComponent> get ChildComponentNgFactory {
  return _ChildComponentNgFactory;
}

final List<dynamic> styles$ChildComponentHost = const [];

// Host for component ChildComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
class _ViewChildComponentHost0 extends import9.HostView<import1.ChildComponent> {
  _ViewChildComponentHost0(import10.Injector injector) : super(injector);
  @override
  void build() {
    // Child component ChildComponent in asset:_goldens/test/_files/directives/import_prefixes.dart (changeDetection: Default)
    this.componentView = ViewChildComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.ChildComponent> viewFactory_ChildComponentHost0(import10.Injector injector) {
  return _ViewChildComponentHost0(injector);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(ParentComponent, ParentComponentNgFactory);
  _ngRef.registerComponent(ChildComponent, ChildComponentNgFactory);
  _ref0.initReflector();
}
