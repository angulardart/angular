// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'export_as.dart';
export 'export_as.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'export_as.dart' as import0;
import 'dart:html' as import1;
import 'package:angular/src/core/linker/view_type.dart' as import2;
import 'package:angular/src/core/linker/app_view_utils.dart' as import3;
import 'package:angular/src/runtime.dart' as import4;

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import0.TestFooComponent> {
  import1.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import1.document.createElement('test-foo');
    _renderType ??= import3.appViewUtils.createRenderType((import4.isDevMode ? 'asset:_goldens/test/_files/export_as.dart' : null), ViewEncapsulation.None, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import0.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import1.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    var doc = import1.document;
    _el_0 = createDivAndAppend(doc, parentRenderNode);
    import1.Text _text_1 = import1.Text('Foo');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }
}

AppView<import0.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewTestFooComponent0(parentView, parentIndex);
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import0.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import0.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import2.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import0.TestFooComponent> build() {
    _compView_0 = ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_5 = import0.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import0.TestFooComponent> viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import0.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import0.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
