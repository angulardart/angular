// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'event_tearoff.dart';
export 'event_tearoff.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'event_tearoff.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/view_type.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import8;

final List<dynamic> styles$UsesEventTearoff = const [];

class ViewUsesEventTearoff0 extends AppView<import1.UsesEventTearoff> {
  static import2.ComponentStyles _componentStyles;
  ViewUsesEventTearoff0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import5.document.createElement('uses-event-tearoff');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/event_tearoff.dart' : null);
  }

  @override
  ComponentRef<import1.UsesEventTearoff> build() {
    final _rootEl = rootEl;
    final import5.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import5.document;
    final _el_0 = import8.appendElement(doc, parentRenderNode, 'button');
    _el_0.addEventListener('click', eventHandler1(ctx.onClick));
    _el_0.addEventListener('blur', eventHandler0(ctx.onBlur));
    init(const [], null);
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesEventTearoff, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.UsesEventTearoff> viewFactory_UsesEventTearoff0(AppView<dynamic> parentView, int parentIndex) {
  return ViewUsesEventTearoff0(parentView, parentIndex);
}

const ComponentFactory<import1.UsesEventTearoff> _UsesEventTearoffNgFactory = const ComponentFactory('uses-event-tearoff', viewFactory_UsesEventTearoffHost0);
ComponentFactory<import1.UsesEventTearoff> get UsesEventTearoffNgFactory {
  return _UsesEventTearoffNgFactory;
}

final List<dynamic> styles$UsesEventTearoffHost = const [];

class _ViewUsesEventTearoffHost0 extends AppView<import1.UsesEventTearoff> {
  ViewUsesEventTearoff0 _compView_0;
  import1.UsesEventTearoff _UsesEventTearoff_0_5;
  _ViewUsesEventTearoffHost0(AppView<dynamic> parentView, int parentIndex) : super(import3.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.UsesEventTearoff> build() {
    _compView_0 = ViewUsesEventTearoff0(this, 0);
    rootEl = _compView_0.rootEl;
    _UsesEventTearoff_0_5 = import1.UsesEventTearoff();
    _compView_0.create(_UsesEventTearoff_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _UsesEventTearoff_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.UsesEventTearoff> viewFactory_UsesEventTearoffHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewUsesEventTearoffHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(UsesEventTearoff, UsesEventTearoffNgFactory);
  _ref0.initReflector();
}
