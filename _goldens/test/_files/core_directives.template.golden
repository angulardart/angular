// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'core_directives.dart';
export 'core_directives.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'core_directives.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import3;
import 'dart:html' as import4;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import5;
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/runtime.dart' as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import10;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import12;
import 'dart:core';

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  ViewContainer _appEl_1;
  import3.NgFor _NgFor_1_9;
  import4.Comment _anchor_0;
  static import5.ComponentStyles _componentStyles;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import4.document.createElement('test-foo');
    initComponentStyles();
  }
  static String get _debugComponentUrl {
    return (import8.isDevMode ? 'asset:_goldens/test/_files/core_directives.dart' : null);
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import4.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = import10.appendAnchor(parentRenderNode);
    final _anchor_1 = import10.appendAnchor(parentRenderNode);
    _appEl_1 = ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = TemplateRef(_appEl_1, viewFactory_TestFooComponent2);
    _NgFor_1_9 = import3.NgFor(_appEl_1, _TemplateRef_1_8);
    init([], null);
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.foo, null)) {
        if (_ctx.foo) {
          final doc = import4.document;
          final _el_0_0 = doc.createElement('div');
          final _text_0_1 = import10.appendText(_el_0_0, 'Foo');
          addInlinedNodes(_anchor_0, [_el_0_0], true);
        }
      }
      if (!identical(_ctx.bars, null)) {
        (_NgFor_1_9.ngForOf = _ctx.bars);
      }
    }
    if (!import12.AppViewUtils.throwOnChanges) {
      _NgFor_1_9.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1.destroyNestedViews();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import5.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return ViewTestFooComponent0(parentView, parentIndex);
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

class _ViewTestFooComponent2 extends AppView<import1.TestFooComponent> {
  var _expr_0;
  var _expr_1;
  var _expr_2;
  final import4.Text _text_2 = import10.createText('');
  final import4.Text _text_4 = import10.createText('');
  final import4.Text _text_6 = import10.createText('');
  _ViewTestFooComponent2(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.embedded, {'\$implicit': null, 'index': null, 'odd': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    final doc = import4.document;
    final _el_0 = doc.createElement('div');
    final _el_1 = import10.appendSpan(doc, _el_0);
    _el_1.append(_text_2);
    final _text_3 = import10.appendText(_el_1, '. #');
    _el_1.append(_text_4);
    final _text_5 = import10.appendText(_el_1, ' odd?');
    _el_1.append(_text_6);
    _el_1.addEventListener('click', eventHandler1(_handle_click_1_0));
    init0(_el_0);
  }

  @override
  void detectChangesInternal() {
    final local_bar = import8.unsafeCast<String>(locals['\$implicit']);
    final local_index = import8.unsafeCast<int>(locals['index']);
    final local_odd = import8.unsafeCast<bool>(locals['odd']);
    final currVal_0 = import12.interpolateString0(local_bar);
    if (import12.checkBinding(_expr_0, currVal_0)) {
      _text_2.text = currVal_0;
      _expr_0 = currVal_0;
    }
    final currVal_1 = import12.interpolate0(local_index);
    if (import12.checkBinding(_expr_1, currVal_1)) {
      _text_4.text = currVal_1;
      _expr_1 = currVal_1;
    }
    final currVal_2 = import12.interpolate0(local_odd);
    if (import12.checkBinding(_expr_2, currVal_2)) {
      _text_6.text = currVal_2;
      _expr_2 = currVal_2;
    }
  }

  void _handle_click_1_0($event) {
    final local_bar = import8.unsafeCast<String>(locals['\$implicit']);
    ctx.onClick(local_bar);
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent2(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestFooComponent2(parentView, parentIndex);
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    _compView_0 = ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_5 = import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0(rootEl);
    return ComponentRef(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return _ViewTestFooComponentHost0(parentView, parentIndex);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
