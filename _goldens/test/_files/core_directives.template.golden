// **************************************************************************
// Generator: Instance of 'Compiler'
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'core_directives.dart';
export 'core_directives.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'core_directives.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_for.dart' as import4;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart' as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular/src/runtime.dart' as import9;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/template_ref.dart';
import 'dart:core';

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  import2.Comment _anchor_0;
  import2.DivElement _el_0_0;
  import2.Text _text_0_1;
  ViewContainer _appEl_1;
  import4.NgFor _NgFor_1_9;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.component, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('test-foo');
    _renderType ??= import8.appViewUtils.createRenderType((import9.isDevMode ? 'asset:_goldens/test/_files/core_directives.dart' : null), ViewEncapsulation.None, styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import2.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    _anchor_0 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_0);
    final _anchor_1 = createViewContainerAnchor();
    parentRenderNode.append(_anchor_1);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    TemplateRef _TemplateRef_1_8 = new TemplateRef(_appEl_1, viewFactory_TestFooComponent2);
    _NgFor_1_9 = new import4.NgFor(_appEl_1, _TemplateRef_1_8);
    init([], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.TestFooComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    if (firstCheck) {
      if (!identical(_ctx.foo, null)) {
        if (_ctx.foo) {
          var doc = import2.document;
          _el_0_0 = doc.createElement('div');
          _text_0_1 = new import2.Text('Foo');
          _el_0_0.append(_text_0_1);
          addInlinedNodes(_anchor_0, [_el_0_0], true);
        }
      }
    }
    if (firstCheck) {
      if (!identical(_ctx.bars, null)) {
        (_NgFor_1_9.ngForOf = _ctx.bars);
      }
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      _NgFor_1_9.ngDoCheck();
    }
    _appEl_1.detectChangesInNestedViews();
  }

  @override
  void destroyInternal() {
    _appEl_1?.destroyNestedViews();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(AppView<dynamic> parentView, int parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

class _ViewTestFooComponent2 extends AppView<import1.TestFooComponent> {
  import2.DivElement _el_0;
  import2.Element _el_1;
  import2.Text _text_2;
  var _expr_0;
  _ViewTestFooComponent2(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.embedded, {'\$implicit': null}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestFooComponent0._renderType;
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    var doc = import2.document;
    _el_0 = doc.createElement('div');
    _el_1 = createSpanAndAppend(doc, _el_0);
    _text_2 = new import2.Text('');
    _el_1.append(_text_2);
    _el_1.addEventListener('click', eventHandler1(_handle_click_1_0));
    init0(_el_0);
    return null;
  }

  @override
  void detectChangesInternal() {
    final String local_bar = locals['\$implicit'];
    final currVal_0 = import8.interpolate0(local_bar);
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _text_2.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  void _handle_click_1_0($event) {
    final String local_bar = locals['\$implicit'];
    ctx.onClick(local_bar);
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent2(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestFooComponent2(parentView, parentIndex);
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) : super(import6.ViewType.host, {}, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.TestFooComponent> build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_5 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectableNodes);
    init0(rootEl);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0(AppView<dynamic> parentView, int parentIndex) {
  return new _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0, _TestFooComponentMetadata);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

const _TestFooComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ref0.initReflector();
}
