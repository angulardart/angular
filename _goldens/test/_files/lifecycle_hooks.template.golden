// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'lifecycle_hooks.dart';
export 'lifecycle_hooks.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'lifecycle_hooks.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/app_view_utils.dart' as import9;
import 'package:angular/src/runtime/dom_helpers.dart' as import10;

final List<dynamic> styles$MostLifecycleHooksComponent = const [];

class ViewMostLifecycleHooksComponent0 extends AppView<import1.MostLifecycleHooksComponent> {
  ViewEmptyComponent0 _compView_0;
  import1.EmptyComponent _EmptyComponent_0_5;
  static import2.ComponentStyles _componentStyles;
  ViewMostLifecycleHooksComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('lifecycle-hooks');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/lifecycle_hooks.dart' : null);
  }

  @override
  ComponentRef<import1.MostLifecycleHooksComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    _compView_0 = ViewEmptyComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _EmptyComponent_0_5 = import1.EmptyComponent();
    _compView_0.create0(_EmptyComponent_0_5);
    project(parentRenderNode, 0);
    init0();
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$MostLifecycleHooksComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.MostLifecycleHooksComponent> _MostLifecycleHooksComponentNgFactory = const ComponentFactory('lifecycle-hooks', viewFactory_MostLifecycleHooksComponentHost0);
ComponentFactory<import1.MostLifecycleHooksComponent> get MostLifecycleHooksComponentNgFactory {
  return _MostLifecycleHooksComponentNgFactory;
}

final List<dynamic> styles$MostLifecycleHooksComponentHost = const [];

class _ViewMostLifecycleHooksComponentHost0 extends AppView<import1.MostLifecycleHooksComponent> {
  ViewMostLifecycleHooksComponent0 _compView_0;
  import1.MostLifecycleHooksComponent _MostLifecycleHooksComponent_0_5;
  _ViewMostLifecycleHooksComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.MostLifecycleHooksComponent> build() {
    _compView_0 = ViewMostLifecycleHooksComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _MostLifecycleHooksComponent_0_5 = import1.MostLifecycleHooksComponent();
    _compView_0.create(_MostLifecycleHooksComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _MostLifecycleHooksComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if (((!import9.AppViewUtils.throwOnChanges) && firstCheck)) {
      _MostLifecycleHooksComponent_0_5.ngOnInit();
    }
    if ((!import9.AppViewUtils.throwOnChanges)) {
      if (firstCheck) {
        _MostLifecycleHooksComponent_0_5.ngAfterContentInit();
      }
      _MostLifecycleHooksComponent_0_5.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if ((!import9.AppViewUtils.throwOnChanges)) {
      if (firstCheck) {
        _MostLifecycleHooksComponent_0_5.ngAfterViewInit();
      }
      _MostLifecycleHooksComponent_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
    _MostLifecycleHooksComponent_0_5.ngOnDestroy();
  }
}

AppView<import1.MostLifecycleHooksComponent> viewFactory_MostLifecycleHooksComponentHost0() {
  return _ViewMostLifecycleHooksComponentHost0(null, null);
}

final List<dynamic> styles$EmptyComponent = const [];

class ViewEmptyComponent0 extends AppView<import1.EmptyComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewEmptyComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('empty-comp');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/lifecycle_hooks.dart' : null);
  }

  @override
  ComponentRef<import1.EmptyComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$EmptyComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.EmptyComponent> _EmptyComponentNgFactory = const ComponentFactory('empty-comp', viewFactory_EmptyComponentHost0);
ComponentFactory<import1.EmptyComponent> get EmptyComponentNgFactory {
  return _EmptyComponentNgFactory;
}

final List<dynamic> styles$EmptyComponentHost = const [];

class _ViewEmptyComponentHost0 extends AppView<import1.EmptyComponent> {
  ViewEmptyComponent0 _compView_0;
  import1.EmptyComponent _EmptyComponent_0_5;
  _ViewEmptyComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.EmptyComponent> build() {
    _compView_0 = ViewEmptyComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _EmptyComponent_0_5 = import1.EmptyComponent();
    _compView_0.create(_EmptyComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _EmptyComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.EmptyComponent> viewFactory_EmptyComponentHost0() {
  return _ViewEmptyComponentHost0(null, null);
}

final List<dynamic> styles$AfterChangesComponent = const [];

class ViewAfterChangesComponent0 extends AppView<import1.AfterChangesComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewAfterChangesComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('after-changes');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/lifecycle_hooks.dart' : null);
  }

  @override
  ComponentRef<import1.AfterChangesComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$AfterChangesComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.AfterChangesComponent> _AfterChangesComponentNgFactory = const ComponentFactory('after-changes', viewFactory_AfterChangesComponentHost0);
ComponentFactory<import1.AfterChangesComponent> get AfterChangesComponentNgFactory {
  return _AfterChangesComponentNgFactory;
}

final List<dynamic> styles$AfterChangesComponentHost = const [];

class _ViewAfterChangesComponentHost0 extends AppView<import1.AfterChangesComponent> {
  ViewAfterChangesComponent0 _compView_0;
  import1.AfterChangesComponent _AfterChangesComponent_0_5;
  _ViewAfterChangesComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.AfterChangesComponent> build() {
    _compView_0 = ViewAfterChangesComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _AfterChangesComponent_0_5 = import1.AfterChangesComponent();
    _compView_0.create(_AfterChangesComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _AfterChangesComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.AfterChangesComponent> viewFactory_AfterChangesComponentHost0() {
  return _ViewAfterChangesComponentHost0(null, null);
}

final List<dynamic> styles$UsesLifecycleHooksComponent = const [];

class ViewUsesLifecycleHooksComponent0 extends AppView<import1.UsesLifecycleHooksComponent> {
  ViewMostLifecycleHooksComponent0 _compView_0;
  import1.MostLifecycleHooksComponent _MostLifecycleHooksComponent_0_5;
  ViewEmptyComponent0 _compView_1;
  import1.EmptyComponent _EmptyComponent_1_5;
  import1.DoCheckDirective _DoCheckDirective_2_5;
  ViewAfterChangesComponent0 _compView_3;
  import1.AfterChangesComponent _AfterChangesComponent_3_5;
  String _expr_0;
  String _expr_1;
  String _expr_2;
  static import2.ComponentStyles _componentStyles;
  ViewUsesLifecycleHooksComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('uses-lifecylce-hooks');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/lifecycle_hooks.dart' : null);
  }

  @override
  ComponentRef<import1.UsesLifecycleHooksComponent> build() {
    final import6.HtmlElement parentRenderNode = initViewRoot();
    _compView_0 = ViewMostLifecycleHooksComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    parentRenderNode.append(_el_0);
    _MostLifecycleHooksComponent_0_5 = import1.MostLifecycleHooksComponent();
    _compView_1 = ViewEmptyComponent0(this, 1);
    final _el_1 = _compView_1.rootEl;
    _EmptyComponent_1_5 = import1.EmptyComponent();
    _compView_1.create0(_EmptyComponent_1_5);
    _compView_0.create(_MostLifecycleHooksComponent_0_5, [
      [_el_1]
    ]);
    final doc = import6.document;
    final _el_2 = import10.appendElement(doc, parentRenderNode, 'do-check');
    _DoCheckDirective_2_5 = import1.DoCheckDirective();
    _compView_3 = ViewAfterChangesComponent0(this, 3);
    final _el_3 = _compView_3.rootEl;
    parentRenderNode.append(_el_3);
    _AfterChangesComponent_3_5 = import1.AfterChangesComponent();
    _compView_3.create0(_AfterChangesComponent_3_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    final _ctx = ctx;
    bool changed = false;
    bool firstCheck = (this.cdState == 0);
    final currVal_0 = _ctx.input;
    if (import9.checkBinding(_expr_0, currVal_0)) {
      _MostLifecycleHooksComponent_0_5.input = currVal_0;
      _expr_0 = currVal_0;
    }
    if (((!import9.AppViewUtils.throwOnChanges) && firstCheck)) {
      _MostLifecycleHooksComponent_0_5.ngOnInit();
    }
    final currVal_1 = _ctx.input;
    if (import9.checkBinding(_expr_1, currVal_1)) {
      _DoCheckDirective_2_5.input = currVal_1;
      _expr_1 = currVal_1;
    }
    if ((!import9.AppViewUtils.throwOnChanges)) {
      _DoCheckDirective_2_5.ngDoCheck();
    }
    changed = false;
    final currVal_2 = _ctx.input;
    if (import9.checkBinding(_expr_2, currVal_2)) {
      _AfterChangesComponent_3_5.input = currVal_2;
      changed = true;
      _expr_2 = currVal_2;
    }
    if (changed) {
      _AfterChangesComponent_3_5.ngAfterChanges();
    }
    if ((!import9.AppViewUtils.throwOnChanges)) {
      if (firstCheck) {
        _MostLifecycleHooksComponent_0_5.ngAfterContentInit();
      }
      _MostLifecycleHooksComponent_0_5.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    _compView_1.detectChanges();
    _compView_3.detectChanges();
    if ((!import9.AppViewUtils.throwOnChanges)) {
      if (firstCheck) {
        _MostLifecycleHooksComponent_0_5.ngAfterViewInit();
      }
      _MostLifecycleHooksComponent_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
    _compView_1.destroyInternalState();
    _compView_3.destroyInternalState();
    _MostLifecycleHooksComponent_0_5.ngOnDestroy();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$UsesLifecycleHooksComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.UsesLifecycleHooksComponent> _UsesLifecycleHooksComponentNgFactory = const ComponentFactory('uses-lifecylce-hooks', viewFactory_UsesLifecycleHooksComponentHost0);
ComponentFactory<import1.UsesLifecycleHooksComponent> get UsesLifecycleHooksComponentNgFactory {
  return _UsesLifecycleHooksComponentNgFactory;
}

final List<dynamic> styles$UsesLifecycleHooksComponentHost = const [];

class _ViewUsesLifecycleHooksComponentHost0 extends AppView<import1.UsesLifecycleHooksComponent> {
  ViewUsesLifecycleHooksComponent0 _compView_0;
  import1.UsesLifecycleHooksComponent _UsesLifecycleHooksComponent_0_5;
  _ViewUsesLifecycleHooksComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.UsesLifecycleHooksComponent> build() {
    _compView_0 = ViewUsesLifecycleHooksComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _UsesLifecycleHooksComponent_0_5 = import1.UsesLifecycleHooksComponent();
    _compView_0.create(_UsesLifecycleHooksComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _UsesLifecycleHooksComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.UsesLifecycleHooksComponent> viewFactory_UsesLifecycleHooksComponentHost0() {
  return _ViewUsesLifecycleHooksComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(MostLifecycleHooksComponent, MostLifecycleHooksComponentNgFactory);
  _ngRef.registerComponent(EmptyComponent, EmptyComponentNgFactory);
  _ngRef.registerComponent(AfterChangesComponent, AfterChangesComponentNgFactory);
  _ngRef.registerComponent(UsesLifecycleHooksComponent, UsesLifecycleHooksComponentNgFactory);
  _ref0.initReflector();
}
