// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'has_directives.dart';
export 'has_directives.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/app_view.dart';
import 'has_directives.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/render_view.dart' as import3;
import 'package:angular/src/core/linker/view_type.dart' as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import6;
import 'package:angular/src/runtime.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/runtime/dom_helpers.dart' as import9;

final List<dynamic> styles$TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  import1.TestDirective _TestDirective_3_5;
  ViewTestSubComponent0 _compView_5;
  import1.TestSubComponent _TestSubComponent_5_5;
  static import2.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/has_directives.dart' : null);
  }

  @override
  ComponentRef<import1.TestFooComponent> build() {
    final _rootEl = rootEl;
    final import6.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import6.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    final _text_1 = import9.appendText(_el_0, 'My own template');
    final _text_2 = import9.appendText(parentRenderNode, 'A directive:');
    final _el_3 = import9.appendElement(doc, parentRenderNode, 'directive');
    _TestDirective_3_5 = import1.TestDirective();
    final _text_4 = import9.appendText(parentRenderNode, 'A component:');
    _compView_5 = ViewTestSubComponent0(this, 5);
    final _el_5 = _compView_5.rootEl;
    parentRenderNode.append(_el_5);
    _TestSubComponent_5_5 = import1.TestSubComponent();
    _compView_5.create0(_TestSubComponent_5_5);
    init0();
  }

  @override
  void detectChangesInternal() {
    _compView_5.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_5.destroyInternalState();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

class _ViewTestFooComponentHost0 extends AppView<import1.TestFooComponent> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_5;
  _ViewTestFooComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.TestFooComponent> build() {
    _compView_0 = ViewTestFooComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _TestFooComponent_0_5 = import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _TestFooComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0(null, null);
}

final List<dynamic> styles$TestSubComponent = const [];

class ViewTestSubComponent0 extends AppView<import1.TestSubComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewTestSubComponent0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.component, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    initComponentStyles();
    rootEl = import6.document.createElement('test-bar');
  }
  static String get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:_goldens/test/_files/has_directives.dart' : null);
  }

  @override
  ComponentRef<import1.TestSubComponent> build() {
    final _rootEl = rootEl;
    final import6.HtmlElement parentRenderNode = initViewRoot(_rootEl);
    final doc = import6.document;
    final _el_0 = import9.appendDiv(doc, parentRenderNode);
    final _text_1 = import9.appendText(_el_0, 'Bar');
    init0();
  }

  @override
  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      (_componentStyles = (styles = (_componentStyles = import2.ComponentStyles.unscoped(styles$TestSubComponent, _debugComponentUrl))));
    }
    componentStyles = styles;
  }
}

const ComponentFactory<import1.TestSubComponent> _TestSubComponentNgFactory = const ComponentFactory('test-bar', viewFactory_TestSubComponentHost0);
ComponentFactory<import1.TestSubComponent> get TestSubComponentNgFactory {
  return _TestSubComponentNgFactory;
}

final List<dynamic> styles$TestSubComponentHost = const [];

class _ViewTestSubComponentHost0 extends AppView<import1.TestSubComponent> {
  ViewTestSubComponent0 _compView_0;
  import1.TestSubComponent _TestSubComponent_0_5;
  _ViewTestSubComponentHost0(import3.RenderView parentView, int parentIndex) : super(import4.ViewType.host, parentView, parentIndex, ChangeDetectionStrategy.CheckAlways);
  @override
  ComponentRef<import1.TestSubComponent> build() {
    _compView_0 = ViewTestSubComponent0(this, 0);
    final _el_0 = _compView_0.rootEl;
    _TestSubComponent_0_5 = import1.TestSubComponent();
    _compView_0.create(_TestSubComponent_0_5, projectedNodes);
    init1(_el_0);
    return ComponentRef(0, this, _el_0, _TestSubComponent_0_5);
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroyInternalState();
  }
}

AppView<import1.TestSubComponent> viewFactory_TestSubComponentHost0() {
  return _ViewTestSubComponentHost0(null, null);
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ngRef.registerComponent(TestSubComponent, TestSubComponentNgFactory);
  _ref0.initReflector();
}
