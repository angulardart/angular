// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'has_directives.dart';
export 'has_directives.dart';
import 'package:angular/src/di/reflector.dart' as _ngRef;
import 'package:angular/angular.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'has_directives.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import5;
import 'package:angular/src/runtime.dart' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;

final List<dynamic> styles$TestFooComponent = const [];

// View for component TestFooComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
class ViewTestFooComponent0 extends import0.ComponentView<import1.TestFooComponent> {
  import1.TestDirective _TestDirective_3_5;
  ViewTestSubComponent0 _compView_5;
  import1.TestSubComponent _TestSubComponent_5_5;
  static import2.ComponentStyles _componentStyles;
  ViewTestFooComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('test-foo');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/has_directives.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    final _text_1 = import7.appendText(_el_0, 'My own template');
    final _text_2 = import7.appendText(parentRenderNode, 'A directive:');
    final _el_3 = import7.appendElement(doc, parentRenderNode, 'directive');
    this._TestDirective_3_5 = import1.TestDirective();
    final _text_4 = import7.appendText(parentRenderNode, 'A component:');
    // Child component TestSubComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
    this._compView_5 = ViewTestSubComponent0(this, 5);
    final _el_5 = this._compView_5.rootElement;
    parentRenderNode.append(_el_5);
    this._TestSubComponent_5_5 = import1.TestSubComponent();
    this._compView_5.create(this._TestSubComponent_5_5);
  }

  @override
  void detectChangesInternal() {
    this._compView_5.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_5.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$TestFooComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.TestFooComponent> _TestFooComponentNgFactory = const ComponentFactory('test-foo', viewFactory_TestFooComponentHost0);
ComponentFactory<import1.TestFooComponent> get TestFooComponentNgFactory {
  return _TestFooComponentNgFactory;
}

final List<dynamic> styles$TestFooComponentHost = const [];

// Host for component TestFooComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
class _ViewTestFooComponentHost0 extends import9.HostView<import1.TestFooComponent> {
  @override
  void build() {
    // Child component TestFooComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
    this.componentView = ViewTestFooComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.TestFooComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.TestFooComponent> viewFactory_TestFooComponentHost0() {
  return _ViewTestFooComponentHost0();
}

final List<dynamic> styles$TestSubComponent = const [];

// View for component TestSubComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
class ViewTestSubComponent0 extends import0.ComponentView<import1.TestSubComponent> {
  static import2.ComponentStyles _componentStyles;
  ViewTestSubComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.document.createElement('test-bar');
  }
  static String get _debugComponentUrl {
    return (import6.isDevMode ? 'asset:_goldens/test/_files/has_directives.dart' : null);
  }

  @override
  void build() {
    final import5.HtmlElement parentRenderNode = this.initViewRoot();
    final doc = import5.document;
    final _el_0 = import7.appendDiv(doc, parentRenderNode);
    final _text_1 = import7.appendText(_el_0, 'Bar');
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if (identical(styles, null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$TestSubComponent, _debugComponentUrl));
      if (import6.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const ComponentFactory<import1.TestSubComponent> _TestSubComponentNgFactory = const ComponentFactory('test-bar', viewFactory_TestSubComponentHost0);
ComponentFactory<import1.TestSubComponent> get TestSubComponentNgFactory {
  return _TestSubComponentNgFactory;
}

final List<dynamic> styles$TestSubComponentHost = const [];

// Host for component TestSubComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
class _ViewTestSubComponentHost0 extends import9.HostView<import1.TestSubComponent> {
  @override
  void build() {
    // Child component TestSubComponent in asset:_goldens/test/_files/has_directives.dart (changeDetection: Default)
    this.componentView = ViewTestSubComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.TestSubComponent();
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.TestSubComponent> viewFactory_TestSubComponentHost0() {
  return _ViewTestSubComponentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(TestFooComponent, TestFooComponentNgFactory);
  _ngRef.registerComponent(TestSubComponent, TestSubComponentNgFactory);
  _ref0.initReflector();
}
