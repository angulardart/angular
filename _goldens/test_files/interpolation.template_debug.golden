// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'interpolation.dart';
export 'interpolation.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'interpolation.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$InterpolationComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InterpolationComponent0 = [null, null];

class ViewInterpolationComponent0
    extends DebugAppView<import2.InterpolationComponent> {
  import3.DivElement _el_0;
  import3.Text _text_1;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewInterpolationComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InterpolationComponent0) {
    rootEl = import3.document.createElement('interpolation');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/interpolation.dart class InterpolationComponent - inline template',
        ViewEncapsulation.None,
        styles$InterpolationComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.InterpolationComponent> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    _text_1 = new import3.Text('');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import2.InterpolationComponent _ctx = ctx;
    dbg(1, 0, 5);
    final currVal_0 = import8.interpolate0(_ctx.foo);
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import2.InterpolationComponent> viewFactory_InterpolationComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponent0(parentView, parentIndex);
}

const List<dynamic> styles$InterpolationComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InterpolationComponentHost0 = [
  new StaticNodeDebugInfo([import2.InterpolationComponent],
      import2.InterpolationComponent, <String, dynamic>{})
];

class _ViewInterpolationComponentHost0 extends DebugAppView<dynamic> {
  ViewInterpolationComponent0 _compView_0;
  import2.InterpolationComponent _InterpolationComponent_0_4;
  static RenderComponentType _renderType;
  _ViewInterpolationComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InterpolationComponentHost0) {
    _renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$InterpolationComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewInterpolationComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _InterpolationComponent_0_4 = new import2.InterpolationComponent();
    _compView_0.create(_InterpolationComponent_0_4, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.InterpolationComponent>(
        0, this, rootEl, _InterpolationComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.InterpolationComponent) &&
        (0 == nodeIndex))) {
      return _InterpolationComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InterpolationComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInterpolationComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.InterpolationComponent>
    InterpolationComponentNgFactory =
    const ComponentFactory<import2.InterpolationComponent>(
        'interpolation',
        viewFactory_InterpolationComponentHost0,
        _InterpolationComponentMetadata);
const List<dynamic> styles$InterpolationComponentNoWhitespace = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InterpolationComponentNoWhitespace0 = [
  null,
  null
];

class ViewInterpolationComponentNoWhitespace0
    extends DebugAppView<import2.InterpolationComponentNoWhitespace> {
  import3.DivElement _el_0;
  import3.Text _text_1;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewInterpolationComponentNoWhitespace0(
      AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InterpolationComponentNoWhitespace0) {
    rootEl = import3.document.createElement('interpolation');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/interpolation.dart class InterpolationComponentNoWhitespace - inline template',
        ViewEncapsulation.None,
        styles$InterpolationComponentNoWhitespace);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.InterpolationComponentNoWhitespace> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    _text_1 = new import3.Text('');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import2.InterpolationComponentNoWhitespace _ctx = ctx;
    dbg(1, 0, 5);
    final currVal_0 = import8.interpolate0(_ctx.foo);
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import2.InterpolationComponentNoWhitespace>
    viewFactory_InterpolationComponentNoWhitespace0(
        AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponentNoWhitespace0(parentView, parentIndex);
}

const List<dynamic> styles$InterpolationComponentNoWhitespaceHost = const [];
List<StaticNodeDebugInfo>
    nodeDebugInfos_InterpolationComponentNoWhitespaceHost0 = [
  new StaticNodeDebugInfo([import2.InterpolationComponentNoWhitespace],
      import2.InterpolationComponentNoWhitespace, <String, dynamic>{})
];

class _ViewInterpolationComponentNoWhitespaceHost0
    extends DebugAppView<dynamic> {
  ViewInterpolationComponentNoWhitespace0 _compView_0;
  import2.InterpolationComponentNoWhitespace
      _InterpolationComponentNoWhitespace_0_4;
  static RenderComponentType _renderType;
  _ViewInterpolationComponentNoWhitespaceHost0(
      AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InterpolationComponentNoWhitespaceHost0) {
    _renderType ??= import8.appViewUtils.createRenderType(
        '',
        ViewEncapsulation.Emulated,
        styles$InterpolationComponentNoWhitespaceHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewInterpolationComponentNoWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _InterpolationComponentNoWhitespace_0_4 =
        new import2.InterpolationComponentNoWhitespace();
    _compView_0.create(
        _InterpolationComponentNoWhitespace_0_4, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.InterpolationComponentNoWhitespace>(
        0, this, rootEl, _InterpolationComponentNoWhitespace_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.InterpolationComponentNoWhitespace) &&
        (0 == nodeIndex))) {
      return _InterpolationComponentNoWhitespace_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InterpolationComponentNoWhitespaceHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInterpolationComponentNoWhitespaceHost0(
      parentView, parentIndex);
}

const ComponentFactory<import2.InterpolationComponentNoWhitespace>
    InterpolationComponentNoWhitespaceNgFactory =
    const ComponentFactory<import2.InterpolationComponentNoWhitespace>(
        'interpolation',
        viewFactory_InterpolationComponentNoWhitespaceHost0,
        _InterpolationComponentNoWhitespaceMetadata);
const _InterpolationComponentMetadata = const [];
const _InterpolationComponentNoWhitespaceMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    InterpolationComponent,
    InterpolationComponentNgFactory,
  );
  _ngRef.registerComponent(
    InterpolationComponentNoWhitespace,
    InterpolationComponentNoWhitespaceNgFactory,
  );
}
