// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'inherited_lifecycle_hooks.dart';
export 'inherited_lifecycle_hooks.dart';
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'inherited_lifecycle_hooks.dart' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'dart:html' as import7;
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';

const List<dynamic> styles$LifecycleHooksComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponent0 = [];

class ViewLifecycleHooksComponent0
    extends DebugAppView<import2.LifecycleHooksComponent> {
  static RenderComponentType _renderType;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponent0) {
    rootEl = import7.document.createElement('lifecycle-hooks');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/inherited_lifecycle_hooks.dart class LifecycleHooksComponent - inline template',
        ViewEncapsulation.None,
        styles$LifecycleHooksComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.LifecycleHooksComponent> build() {
    final import7.HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], null, []);
    return null;
  }
}

AppView<import2.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewLifecycleHooksComponent0(parentView, parentIndex);
}

const List<dynamic> styles$LifecycleHooksComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponentHost0 = [
  new StaticNodeDebugInfo([import2.LifecycleHooksComponent],
      import2.LifecycleHooksComponent, <String, dynamic>{})
];

class _ViewLifecycleHooksComponentHost0 extends DebugAppView<dynamic> {
  ViewLifecycleHooksComponent0 _compView_0;
  import2.LifecycleHooksComponent _LifecycleHooksComponent_0_4;
  _ViewLifecycleHooksComponentHost0(
      AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponentHost0);
  @override
  ComponentRef build() {
    _compView_0 = new ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _LifecycleHooksComponent_0_4 = new import2.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_4, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.LifecycleHooksComponent>(
        0, this, rootEl, _LifecycleHooksComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.LifecycleHooksComponent) &&
        (0 == nodeIndex))) {
      return _LifecycleHooksComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = (this.cdState == 0);
    if ((firstCheck && !import8.AppViewUtils.throwOnChanges)) {
      _LifecycleHooksComponent_0_4.ngOnInit();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      _LifecycleHooksComponent_0_4.ngDoCheck();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (firstCheck) {
        _LifecycleHooksComponent_0_4.ngAfterContentInit();
      }
      _LifecycleHooksComponent_0_4.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if (!import8.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (firstCheck) {
        _LifecycleHooksComponent_0_4.ngAfterViewInit();
      }
      _LifecycleHooksComponent_0_4.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
    dbg(0, 0, 0);
    _LifecycleHooksComponent_0_4.ngOnDestroy();
  }
}

AppView viewFactory_LifecycleHooksComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.LifecycleHooksComponent>
    LifecycleHooksComponentNgFactory =
    const ComponentFactory<import2.LifecycleHooksComponent>(
        'lifecycle-hooks',
        viewFactory_LifecycleHooksComponentHost0,
        _LifecycleHooksComponentMetadata);
const _LifecycleHooksComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(
      LifecycleHooksComponent, LifecycleHooksComponentNgFactory);
  _ref0.initReflector();
}
