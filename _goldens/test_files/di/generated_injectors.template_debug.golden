// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'generated_injectors.dart';
export 'generated_injectors.dart';
import 'package:angular/angular.dart';
import 'generated_injectors.template.dart' as ng;
// Required for initReflector().
import 'generated_injectors.template.dart' as _ref0;
import 'package:angular/angular.template.dart'
    as _ref1;

// *** EXPERIMENTAL ** Injector Generator [START]
import 'package:angular/src/di/injector/injector.dart'
    as _i1;
import 'generated_injectors.dart' as _i2;

_i1.Injector doGenerate$Injector([_i1.Injector parent]) =>
    new _Injector$doGenerate._(parent);

class _Injector$doGenerate extends _i1.GeneratedInjector {
  _Injector$doGenerate._([_i1.Injector parent]) : super(parent);

  _i2.ExamplePrime _field0;

  _i2.ExamplePrime _getExamplePrime$0() => _field0 ??= new _i2.ExamplePrime();
  String _getString$1() => r"""dynamic""";
  String _getString$2() => r"""String""";
  String _getString$3() => r"""A""";
  String _getString$4() => r"""B""";
  _i1.Injector _getInjector$5() => this;
  @override
  Object injectFromSelfOptional(Object token,
      [Object orElse = _i1.throwIfNotFound]) {
    if (identical(token, _i2.Example)) {
      return _getExamplePrime$0();
    }
    if (identical(token, const _i1.OpaqueToken<dynamic>('someToken'))) {
      return _getString$1();
    }
    if (identical(token, const _i1.OpaqueToken<String>('someToken'))) {
      return _getString$2();
    }
    if (identical(token, _i1.Injector)) {
      return _getInjector$5();
    }
    if (identical(token, const _i1.MultiToken<dynamic>('someMultiToken'))) {
      return [_getString$3(), _getString$4()];
    }
    return orElse;
  }
}
// *** EXPERIMENTAL ** Injector Generator [END]

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ref1.initReflector();
}
