// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'injectables.dart';
export 'injectables.dart';
import 'dart:html' as html;
import 'package:angular/angular.dart';
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;
import 'dart:html' as _i1;
import 'package:angular/src/debug/debug_context.dart';
import 'package:angular/src/debug/debug_app_view.dart';
import 'injectables.dart' as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/core/di/opaque_token.dart'
    as import10;
import 'dart:core';

const List<dynamic> styles$InjectableComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InjectableComponent0 = [null, null];

class ViewInjectableComponent0
    extends DebugAppView<import2.InjectableComponent> {
  import3.DivElement _el_0;
  static RenderComponentType _renderType;
  ViewInjectableComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InjectableComponent0) {
    rootEl = import3.document.createElement('test-injectables');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/injectables.dart class InjectableComponent - inline template',
        ViewEncapsulation.None,
        styles$InjectableComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import2.InjectableComponent> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createDivAndAppendDbg(this, doc, parentRenderNode, 0, 0, 0);
    import3.Text _text_1 = new import3.Text('Inject!');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 5);
    init(const [], null, [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.InjectableComponent> viewFactory_InjectableComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponent0(parentView, parentIndex);
}

const List<dynamic> styles$InjectableComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InjectableComponentHost0 = [
  new StaticNodeDebugInfo(
      [
        const import10.OpaqueToken('test'),
        import2.InjectableComponent,
        import2.SomeDep,
        import2.BaseService
      ],
      import2.InjectableComponent,
      <String, dynamic>{})
];

class _ViewInjectableComponentHost0 extends DebugAppView<dynamic> {
  ViewInjectableComponent0 _compView_0;
  dynamic _test_0_4;
  import2.InjectableComponent _InjectableComponent_0_5;
  dynamic __SomeDep_0_6;
  dynamic __BaseService_0_7;
  _ViewInjectableComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InjectableComponentHost0);
  dynamic get _SomeDep_0_6 {
    dbg(0, 0, 0);
    if ((this.__SomeDep_0_6 == null)) {
      (__SomeDep_0_6 = import2.createLinkedHashMap(this._test_0_4));
    }
    return this.__SomeDep_0_6;
  }

  dynamic get _BaseService_0_7 {
    dbg(0, 0, 0);
    if ((this.__BaseService_0_7 == null)) {
      (__BaseService_0_7 = import2.createLinkedHashMap(
          this._SomeDep_0_6,
          this.injectorGet(import2.SomeDep, this.viewData.parentIndex),
          this._SomeDep_0_6));
    }
    return this.__BaseService_0_7;
  }

  @override
  ComponentRef build() {
    _compView_0 = new ViewInjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _test_0_4 = import2.injectableFactory(
        this.injectorGet(import3.Window, viewData.parentIndex));
    _InjectableComponent_0_5 = new import2.InjectableComponent(
        null,
        this.injectorGet(import2.InjectableService, viewData.parentIndex, null),
        _test_0_4,
        this.injectorGet(String, viewData.parentIndex, null));
    _compView_0.create(_InjectableComponent_0_5, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import2.InjectableComponent>(
        0, this, rootEl, _InjectableComponent_0_5);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const import10.OpaqueToken('test')) &&
        (0 == nodeIndex))) {
      return _test_0_4;
    }
    if ((identical(token, import2.InjectableComponent) && (0 == nodeIndex))) {
      return _InjectableComponent_0_5;
    }
    if ((identical(token, import2.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_6;
    }
    if ((identical(token, import2.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_7;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInjectableComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import2.InjectableComponent>
    InjectableComponentNgFactory =
    const ComponentFactory<import2.InjectableComponent>('test-injectables',
        viewFactory_InjectableComponentHost0, _InjectableComponentMetadata);
const _InjectableComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(InjectableComponent, InjectableComponentNgFactory);
  _ngRef.registerFactory(SomeDep, () => new SomeDep());
  _ngRef.registerFactory(BaseService, () => new BaseService());
  _ngRef.registerFactory(InjectableService, () => new InjectableService());
  _ngRef.registerDependencies(injectableFactory, const [
    const [_i1.Window]
  ]);
  _ref0.initReflector();
}
