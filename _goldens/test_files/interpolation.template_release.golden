// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'interpolation.dart';
export 'interpolation.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'interpolation.dart' as import1;
import 'dart:html' as import2;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import4;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import6;
import 'package:angular/angular.dart';
import 'package:angular/src/facade/lang.dart'
    as import8;

const List<dynamic> styles$InterpolationComponent = const [];

class ViewInterpolationComponent0
    extends AppView<import1.InterpolationComponent> {
  import2.DivElement _el_0;
  import2.Text _text_1;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewInterpolationComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$InterpolationComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.InterpolationComponent> build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    _text_1 = new import2.Text('');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.InterpolationComponent _ctx = ctx;
    final currVal_0 = import6.interpolate0(_ctx.foo);
    if (!import8.looseIdentical(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.InterpolationComponent> viewFactory_InterpolationComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponent0(parentView, parentIndex);
}

const List<dynamic> styles$InterpolationComponentHost = const [];

class _ViewInterpolationComponentHost0 extends AppView<dynamic> {
  ViewInterpolationComponent0 _compView_0;
  import1.InterpolationComponent _InterpolationComponent_0_4;
  static RenderComponentType _renderType;
  _ViewInterpolationComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$InterpolationComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewInterpolationComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponent_0_4 = new import1.InterpolationComponent();
    _compView_0.create(_InterpolationComponent_0_4, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.InterpolationComponent>(
        0, this, rootEl, _InterpolationComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.InterpolationComponent) &&
        (0 == nodeIndex))) {
      return _InterpolationComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InterpolationComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInterpolationComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationComponent>
    InterpolationComponentNgFactory =
    const ComponentFactory<import1.InterpolationComponent>(
        'interpolation',
        viewFactory_InterpolationComponentHost0,
        _InterpolationComponentMetadata);
const List<dynamic> styles$InterpolationComponentNoWhitespace = const [];

class ViewInterpolationComponentNoWhitespace0
    extends AppView<import1.InterpolationComponentNoWhitespace> {
  import2.DivElement _el_0;
  import2.Text _text_1;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewInterpolationComponentNoWhitespace0(
      AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('interpolation');
    _renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$InterpolationComponentNoWhitespace);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.InterpolationComponentNoWhitespace> build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import2.document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    _text_1 = new import2.Text('');
    _el_0.append(_text_1);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.InterpolationComponentNoWhitespace _ctx = ctx;
    final currVal_0 = import6.interpolate0(_ctx.foo);
    if (!import8.looseIdentical(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.InterpolationComponentNoWhitespace>
    viewFactory_InterpolationComponentNoWhitespace0(
        AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponentNoWhitespace0(parentView, parentIndex);
}

const List<dynamic> styles$InterpolationComponentNoWhitespaceHost = const [];

class _ViewInterpolationComponentNoWhitespaceHost0 extends AppView<dynamic> {
  ViewInterpolationComponentNoWhitespace0 _compView_0;
  import1.InterpolationComponentNoWhitespace
      _InterpolationComponentNoWhitespace_0_4;
  static RenderComponentType _renderType;
  _ViewInterpolationComponentNoWhitespaceHost0(
      AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import6.appViewUtils.createRenderType(
        '',
        ViewEncapsulation.Emulated,
        styles$InterpolationComponentNoWhitespaceHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewInterpolationComponentNoWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponentNoWhitespace_0_4 =
        new import1.InterpolationComponentNoWhitespace();
    _compView_0.create(
        _InterpolationComponentNoWhitespace_0_4, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.InterpolationComponentNoWhitespace>(
        0, this, rootEl, _InterpolationComponentNoWhitespace_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.InterpolationComponentNoWhitespace) &&
        (0 == nodeIndex))) {
      return _InterpolationComponentNoWhitespace_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InterpolationComponentNoWhitespaceHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInterpolationComponentNoWhitespaceHost0(
      parentView, parentIndex);
}

const ComponentFactory<import1.InterpolationComponentNoWhitespace>
    InterpolationComponentNoWhitespaceNgFactory =
    const ComponentFactory<import1.InterpolationComponentNoWhitespace>(
        'interpolation',
        viewFactory_InterpolationComponentNoWhitespaceHost0,
        _InterpolationComponentNoWhitespaceMetadata);
const _InterpolationComponentMetadata = const [];
const _InterpolationComponentNoWhitespaceMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    InterpolationComponent,
    InterpolationComponentNgFactory,
  );
  _ngRef.registerComponent(
    InterpolationComponentNoWhitespace,
    InterpolationComponentNoWhitespaceNgFactory,
  );
}
