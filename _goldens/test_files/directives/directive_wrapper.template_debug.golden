// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'directive_wrapper.dart';
export 'directive_wrapper.dart';
import 'dart:async';
import 'dart:html';
import 'package:angular/angular.dart';
import 'package:angular_forms/angular_forms.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;
import 'package:angular_forms/angular_forms.template.dart'
    as _ref1;

import 'package:angular/src/debug/debug_context.dart';
import 'directive_wrapper.dart' as import1;
import 'package:angular/src/debug/debug_app_view.dart';
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/app_view.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import6;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import8;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/element_ref.dart';
import 'package:angular_forms/src/directives/ng_form_model.dart'
    as import11;
import 'package:angular_forms/src/directives/control_container.dart'
    as import12;
import 'package:angular_forms/src/directives/default_value_accessor.dart'
    as import13;
import 'package:angular_forms/src/directives/ng_control_name.dart'
    as import14;
import 'package:angular_forms/src/directives/ng_control.dart'
    as import15;
import 'package:angular_forms/src/directives/ng_form_model.template.dart'
    as import16;
import 'package:angular_forms/src/directives/ng_control_name.template.dart'
    as import17;
import 'package:angular/src/core/change_detection/directive_change_detector.dart'
    as import18;

const List<dynamic> styles$TestFooComponent = const [
  'div._ngcontent-%COMP% { font-size:10px; }'
];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [
  new StaticNodeDebugInfo([import1.ChildDirective, import1.DirectiveWithOutput],
      null, <String, dynamic>{}),
  null
];

class ViewTestFooComponent0 extends DebugAppView<import1.TestFooComponent> {
  import3.DivElement _el_0;
  ChildDirectiveNgCd _ChildDirective_0_4;
  import1.DirectiveWithOutput _DirectiveWithOutput_0_5;
  String _expr_0;
  static RenderComponentType _renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent0) {
    rootEl = import3.document.createElement('test-foo');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/directives/directive_wrapper.dart class TestFooComponent - inline template',
        ViewEncapsulation.Emulated,
        styles$TestFooComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.TestFooComponent> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    createAttr(_el_0, 'directive-with-output', '');
    createAttr(_el_0, 'role', 'button');
    createAttr(_el_0, 'some-child-directive', '');
    addShimC(_el_0);
    _ChildDirective_0_4 = new ChildDirectiveNgCd(
        new import1.ChildDirective(_el_0, new ElementRef(_el_0)));
    _DirectiveWithOutput_0_5 = new import1.DirectiveWithOutput();
    import3.Text _text_1 = new import3.Text('Foo');
    _el_0.append(_text_1);
    dbgElm(this, _text_1, 1, 0, 87);
    _el_0.addEventListener(
        'click', eventHandler1(_ChildDirective_0_4.instance.handleClick));
    _el_0.addEventListener(
        'keypress', eventHandler1(_ChildDirective_0_4.instance.handleKeyPress));
    final subscription_0 = _ChildDirective_0_4.instance.trigger
        .listen(eventHandler1(_handle_trigger_0_0));
    final subscription_1 = _DirectiveWithOutput_0_5.eventXyz.listen(
        eventHandler1(
            _ChildDirective_0_4.instance.handleXyzEventFromOtherDirective));
    init(const [], [subscription_0, subscription_1], [_el_0, _text_1]);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.ChildDirective) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _ChildDirective_0_4.instance;
    }
    if ((identical(token, import1.DirectiveWithOutput) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _DirectiveWithOutput_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    final import1.TestFooComponent _ctx = ctx;
    bool firstCheck = (this.cdState == 0);
    dbg(0, 0, 48);
    final currVal_0 = _ctx.rowIndex;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _ChildDirective_0_4.instance.gridRow = currVal_0;
      _expr_0 = currVal_0;
    }
    _ChildDirective_0_4.detectHostChanges(this, _el_0, firstCheck);
  }

  void _handle_trigger_0_0($event) {
    dbg(0, 0, 65);
    ctx.onTrigger;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

const List<dynamic> styles$TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo(
      [import1.TestFooComponent], import1.TestFooComponent, <String, dynamic>{})
];

class _ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_4;
  static RenderComponentType _renderType;
  _ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponentHost0) {
    _renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$TestFooComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_4 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_4, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import1.TestFooComponent>(
        0, this, rootEl, _TestFooComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.TestFooComponent> TestFooComponentNgFactory =
    const ComponentFactory<import1.TestFooComponent>('test-foo',
        viewFactory_TestFooComponentHost0, _TestFooComponentMetadata);
const List<dynamic> styles$InputFormTest = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InputFormTest0 = [
  new StaticNodeDebugInfo([import11.NgFormModel, import12.ControlContainer],
      null, <String, dynamic>{}),
  new StaticNodeDebugInfo(
      [
        import13.DefaultValueAccessor,
        const OpaqueToken<dynamic>('NgValueAccessor'),
        import14.NgControlName,
        import15.NgControl
      ],
      null,
      <String, dynamic>{})
];

class ViewInputFormTest0 extends DebugAppView<import1.InputFormTest> {
  import3.DivElement _el_0;
  import16.NgFormModelNgCd _NgFormModel_0_4;
  import11.NgFormModel _ControlContainer_0_5;
  import3.InputElement _el_1;
  import13.DefaultValueAccessor _DefaultValueAccessor_1_4;
  List<dynamic> _const_OpaqueToken_dynamic___NgValueAccessor___1_5;
  import17.NgControlNameNgCd _NgControlName_1_6;
  var _expr_0;
  static RenderComponentType _renderType;
  ViewInputFormTest0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InputFormTest0) {
    rootEl = import3.document.createElement('input-form-test');
    _renderType ??= import8.appViewUtils.createRenderType(
        'asset:_goldens/test_files/directives/directive_wrapper.dart class InputFormTest - inline template',
        ViewEncapsulation.None,
        styles$InputFormTest);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.InputFormTest> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = import3.document;
    _el_0 = createAndAppendDbg(this, doc, 'div', parentRenderNode, 0, 0, 0);
    _NgFormModel_0_4 =
        new import16.NgFormModelNgCd(new import11.NgFormModel(null));
    _ControlContainer_0_5 = _NgFormModel_0_4.instance;
    _el_1 = createAndAppendDbg(this, doc, 'input', _el_0, 1, 1, 2);
    createAttr(_el_1, 'ngControl', 'login');
    createAttr(_el_1, 'type', 'text');
    _DefaultValueAccessor_1_4 = new import13.DefaultValueAccessor(_el_1);
    _const_OpaqueToken_dynamic___NgValueAccessor___1_5 = [
      _DefaultValueAccessor_1_4
    ];
    _NgControlName_1_6 = new import17.NgControlNameNgCd(
        new import14.NgControlName(_ControlContainer_0_5, null,
            _const_OpaqueToken_dynamic___NgValueAccessor___1_5));
    import8.appViewUtils.eventManager.addEventListener(
        _el_0, 'submit', eventHandler1(_NgFormModel_0_4.instance.onSubmit));
    _el_1.addEventListener('input', eventHandler1(_handle_input_1_0));
    _el_1.addEventListener(
        'blur', eventHandler0(_DefaultValueAccessor_1_4.touchHandler));
    init(const [], null, [_el_0, _el_1]);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import13.DefaultValueAccessor) && (1 == nodeIndex))) {
      return _DefaultValueAccessor_1_4;
    }
    if ((identical(token, const OpaqueToken<dynamic>('NgValueAccessor')) &&
        (1 == nodeIndex))) {
      return _const_OpaqueToken_dynamic___NgValueAccessor___1_5;
    }
    if (((identical(token, import14.NgControlName) ||
            identical(token, import15.NgControl)) &&
        (1 == nodeIndex))) {
      return _NgControlName_1_6.instance;
    }
    if ((identical(token, import11.NgFormModel) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _NgFormModel_0_4.instance;
    }
    if ((identical(token, import12.ControlContainer) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _ControlContainer_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    final import1.InputFormTest _ctx = ctx;
    Map<String, SimpleChange> changes;
    bool firstCheck = (this.cdState == 0);
    changes = null;
    dbg(0, 0, 5);
    final currVal_0 = _ctx.form;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      _NgFormModel_0_4.instance.form = currVal_0;
      changes ??= <String, SimpleChange>{};
      changes['form'] = new SimpleChange(_expr_0, currVal_0);
      _expr_0 = currVal_0;
    }
    if (!identical(changes, null)) {
      _NgFormModel_0_4.instance.ngOnChanges(changes);
    }
    changes = null;
    if (firstCheck) {
      _NgControlName_1_6.instance.name = 'login';
      changes ??= {};
      changes['name'] = new SimpleChange(null, 'login');
    }
    if (!identical(changes, null)) {
      _NgControlName_1_6.instance.ngOnChanges(changes);
    }
  }

  @override
  void destroyInternal() {
    dbg(1, 1, 2);
    _NgControlName_1_6.instance.ngOnDestroy();
  }

  void _handle_input_1_0($event) {
    dbg(1, 1, 2);
    _DefaultValueAccessor_1_4.onChange($event.target.value);
  }
}

AppView<import1.InputFormTest> viewFactory_InputFormTest0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInputFormTest0(parentView, parentIndex);
}

const List<dynamic> styles$InputFormTestHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InputFormTestHost0 = [
  new StaticNodeDebugInfo(
      [import1.InputFormTest], import1.InputFormTest, <String, dynamic>{})
];

class _ViewInputFormTestHost0 extends DebugAppView<dynamic> {
  ViewInputFormTest0 _compView_0;
  import1.InputFormTest _InputFormTest_0_4;
  static RenderComponentType _renderType;
  _ViewInputFormTestHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InputFormTestHost0) {
    _renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$InputFormTestHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewInputFormTest0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _InputFormTest_0_4 = new import1.InputFormTest();
    _compView_0.create(_InputFormTest_0_4, projectableNodes);
    init0Dbg(rootEl, [rootEl]);
    return new ComponentRef<import1.InputFormTest>(
        0, this, rootEl, _InputFormTest_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.InputFormTest) && (0 == nodeIndex))) {
      return _InputFormTest_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_InputFormTestHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewInputFormTestHost0(parentView, parentIndex);
}

const ComponentFactory<import1.InputFormTest> InputFormTestNgFactory =
    const ComponentFactory<import1.InputFormTest>('input-form-test',
        viewFactory_InputFormTestHost0, _InputFormTestMetadata);

class ChildDirectiveNgCd extends import18.DirectiveChangeDetector {
  final import1.ChildDirective instance;
  var _expr_0;
  var _expr_1;
  bool _expr_2;
  ChildDirectiveNgCd(import1.ChildDirective this.instance);
  void detectHostChanges(
      AppView<dynamic> view, import3.Element el, bool firstCheck) {
    final currVal_0 = instance.tabIndex;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      setProp(el, 'tabIndex', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = instance.disabledStr;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      setAttr(el, 'aria-disabled', currVal_1?.toString());
      _expr_1 = currVal_1;
    }
    final currVal_2 = instance.disabled;
    if (import8.checkBinding(_expr_2, currVal_2)) {
      updateElemClass(el, 'is-disabled', currVal_2);
      _expr_2 = currVal_2;
    }
  }
}

const _TestFooComponentMetadata = const [];
const _InputFormTestMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ref1.initReflector();
  _ngRef.registerComponent(
    TestFooComponent,
    TestFooComponentNgFactory,
  );
  _ngRef.registerFactory(
    MyInjectableClass,
    () => new MyInjectableClass(),
  );

  _ngRef.registerComponent(
    InputFormTest,
    InputFormTestNgFactory,
  );
}
