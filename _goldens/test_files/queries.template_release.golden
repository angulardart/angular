// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'queries.dart';
export 'queries.dart';
import 'dart:html';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'queries.dart' as import1;
import 'package:angular/src/core/linker/query_list.dart'
    as import2;
import 'dart:html' as import3;
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/element_ref.dart';

const List<dynamic> styles$QueriesComponent = const [];

class ViewQueriesComponent0 extends AppView<import1.QueriesComponent> {
  import2.QueryList _viewQuery_q6_0;
  import2.QueryList _viewQuery_q8_1;
  import2.QueryList _viewQuery_q8_2;
  import2.QueryList _viewQuery_q8_3;
  import2.QueryList _viewQuery_q8_4;
  import2.QueryList _viewQuery_AnotherDirective_5;
  import3.Element _el_0;
  import1.AnotherDirective _AnotherDirective_0_4;
  import3.Element _el_1;
  import1.AnotherDirective _AnotherDirective_1_4;
  import3.Element _el_2;
  import1.AnotherDirective _AnotherDirective_2_4;
  import3.Element _el_3;
  import1.AnotherDirective _AnotherDirective_3_4;
  import3.Element _el_4;
  import1.AnotherDirective _AnotherDirective_4_4;
  import3.Element _el_5;
  import1.AnotherDirective _AnotherDirective_5_4;
  import3.Element _el_6;
  import1.AnotherDirective _AnotherDirective_6_4;
  import3.Element _el_7;
  import1.AnotherDirective _AnotherDirective_7_4;
  static RenderComponentType _renderType;
  ViewQueriesComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import3.document.createElement('queries');
    _renderType ??= import7.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$QueriesComponent);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.QueriesComponent> build() {
    final import3.HtmlElement parentRenderNode = initViewRoot(rootEl);
    _viewQuery_q6_0 = new import2.QueryList();
    _viewQuery_q8_1 = new import2.QueryList();
    _viewQuery_q8_2 = new import2.QueryList();
    _viewQuery_q8_3 = new import2.QueryList();
    _viewQuery_q8_4 = new import2.QueryList();
    _viewQuery_AnotherDirective_5 = new import2.QueryList();
    var doc = import3.document;
    _el_0 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_0_4 = new import1.AnotherDirective();
    _el_1 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_1_4 = new import1.AnotherDirective();
    _el_2 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_2_4 = new import1.AnotherDirective();
    _el_3 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_3_4 = new import1.AnotherDirective();
    _el_4 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_4_4 = new import1.AnotherDirective();
    _el_5 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_5_4 = new import1.AnotherDirective();
    _el_6 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_6_4 = new import1.AnotherDirective();
    _el_7 = createAndAppend(doc, 'another', parentRenderNode);
    _AnotherDirective_7_4 = new import1.AnotherDirective();
    _viewQuery_q8_1.reset([new ElementRef(_el_7)]);
    ctx.viewChildFromField = _viewQuery_q8_1.first;
    _viewQuery_q8_2.reset([new ElementRef(_el_7)]);
    ctx.readDIFromElementRef = _viewQuery_q8_2.first;
    _viewQuery_q8_3.reset([_el_7]);
    ctx.readDIFromElement = _viewQuery_q8_3.first;
    _viewQuery_q8_4.reset([_el_7]);
    ctx.readDIFromHtmlElement = _viewQuery_q8_4.first;
    init(const [], null);
    return null;
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.AnotherDirective) && (0 == nodeIndex))) {
      return _AnotherDirective_0_4;
    }
    if ((identical(token, import1.AnotherDirective) && (1 == nodeIndex))) {
      return _AnotherDirective_1_4;
    }
    if ((identical(token, import1.AnotherDirective) && (2 == nodeIndex))) {
      return _AnotherDirective_2_4;
    }
    if ((identical(token, import1.AnotherDirective) && (3 == nodeIndex))) {
      return _AnotherDirective_3_4;
    }
    if ((identical(token, import1.AnotherDirective) && (4 == nodeIndex))) {
      return _AnotherDirective_4_4;
    }
    if ((identical(token, import1.AnotherDirective) && (5 == nodeIndex))) {
      return _AnotherDirective_5_4;
    }
    if ((identical(token, import1.AnotherDirective) && (6 == nodeIndex))) {
      return _AnotherDirective_6_4;
    }
    if ((identical(token, import1.AnotherDirective) && (7 == nodeIndex))) {
      return _AnotherDirective_7_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    if (_viewQuery_q6_0.dirty) {
      _viewQuery_q6_0.reset([new ElementRef(_el_5)]);
      ctx.viewChildrenFromField = _viewQuery_q6_0;
      _viewQuery_q6_0.notifyOnChanges();
    }
    if (_viewQuery_AnotherDirective_5.dirty) {
      _viewQuery_AnotherDirective_5.reset([
        _AnotherDirective_0_4,
        _AnotherDirective_1_4,
        _AnotherDirective_2_4,
        _AnotherDirective_3_4,
        _AnotherDirective_4_4,
        _AnotherDirective_5_4,
        _AnotherDirective_6_4,
        _AnotherDirective_7_4
      ]);
      ctx.usingTypeFromField = _viewQuery_AnotherDirective_5;
      _viewQuery_AnotherDirective_5.notifyOnChanges();
    }
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewQueriesComponent0(parentView, parentIndex);
}

const List<dynamic> styles$QueriesComponentHost = const [];

class _ViewQueriesComponentHost0 extends AppView<dynamic> {
  ViewQueriesComponent0 _compView_0;
  import1.QueriesComponent _QueriesComponent_0_4;
  import2.QueryList _query_q5_0_0;
  import2.QueryList _query_q7_0_1;
  static RenderComponentType _renderType;
  _ViewQueriesComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$QueriesComponentHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewQueriesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _QueriesComponent_0_4 = new import1.QueriesComponent();
    _query_q5_0_0 = new import2.QueryList();
    _query_q7_0_1 = new import2.QueryList();
    _query_q7_0_1.reset([]);
    _QueriesComponent_0_4.contentChildFromField = _query_q7_0_1.first;
    _compView_0.create(_QueriesComponent_0_4, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.QueriesComponent>(
        0, this, rootEl, _QueriesComponent_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.QueriesComponent) && (0 == nodeIndex))) {
      return _QueriesComponent_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    if (_query_q5_0_0.dirty) {
      _query_q5_0_0.reset([]);
      _QueriesComponent_0_4.contentChildrenFromField = _query_q5_0_0;
      _query_q5_0_0.notifyOnChanges();
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_QueriesComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new _ViewQueriesComponentHost0(parentView, parentIndex);
}

const ComponentFactory<import1.QueriesComponent> QueriesComponentNgFactory =
    const ComponentFactory<import1.QueriesComponent>('queries',
        viewFactory_QueriesComponentHost0, _QueriesComponentMetadata);
const _QueriesComponentMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    QueriesComponent,
    QueriesComponentNgFactory,
  );
}
