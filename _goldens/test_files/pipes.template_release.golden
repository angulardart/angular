// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// **************************************************************************

// ignore_for_file: cancel_subscriptions,constant_identifier_names,duplicate_import,non_constant_identifier_names,library_prefixes,UNUSED_IMPORT,UNUSED_SHOWN_NAME
import 'pipes.dart';
export 'pipes.dart';
import 'package:angular/angular.dart';
// Required for initReflector().
import 'package:angular/src/di/reflector.dart'
    as _ngRef;
import 'package:angular/angular.template.dart'
    as _ref0;

import 'package:angular/src/core/linker/app_view.dart';
import 'pipes.dart' as import1;
import 'dart:html' as import2;
import 'dart:core';
import 'package:angular/src/core/render/api.dart';
import 'package:angular/src/core/linker/view_type.dart'
    as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/core/linker/app_view_utils.dart'
    as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/facade/lang.dart'
    as import9;

const List<dynamic> styles$Comp = const [];

class ViewComp0 extends AppView<import1.Comp> {
  import2.Text _text_0;
  var _expr_0;
  import1.PurePipe _pipe_pure_0;
  dynamic Function(dynamic) _pipe_pure_0_0;
  import1.DirtyPipe _pipe_dirty_1;
  import1.LifecyclePipe _pipe_lifecycle_2;
  dynamic Function(dynamic) _pipe_lifecycle_2_0;
  import1.TypesPipe _pipe_types_3;
  String Function(String, int, dynamic, import1.C, void Function(String))
      _pipe_types_3_0;
  static RenderComponentType _renderType;
  ViewComp0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = import2.document.createElement('comp');
    _renderType ??= import7.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles$Comp);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef<import1.Comp> build() {
    final import2.HtmlElement parentRenderNode = initViewRoot(rootEl);
    _text_0 = new import2.Text('');
    parentRenderNode.append(_text_0);
    _pipe_pure_0 = new import1.PurePipe();
    _pipe_pure_0_0 = import7.pureProxy1(_pipe_pure_0.transform);
    _pipe_dirty_1 = new import1.DirtyPipe();
    _pipe_lifecycle_2 = new import1.LifecyclePipe();
    _pipe_lifecycle_2_0 = import7.pureProxy1(_pipe_lifecycle_2.transform);
    _pipe_types_3 = new import1.TypesPipe();
    _pipe_types_3_0 = import7.pureProxy5(_pipe_types_3.transform);
    init(const [], null);
    return null;
  }

  @override
  void detectChangesInternal() {
    final import1.Comp _ctx = ctx;
    final currVal_0 = import7.interpolate4(
        '    ',
        _pipe_pure_0_0('foo'),
        '\n    ',
        _pipe_dirty_1.transform('bar'),
        '\n    ',
        _pipe_lifecycle_2_0('lifecycle'),
        '\n    ',
        _pipe_types_3_0('types', 1, 2, _ctx.c, _ctx.d),
        '');
    if (!import9.looseIdentical(_expr_0, currVal_0)) {
      _text_0.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  @override
  void destroyInternal() {
    _pipe_lifecycle_2.ngOnDestroy();
  }
}

AppView<import1.Comp> viewFactory_Comp0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewComp0(parentView, parentIndex);
}

const List<dynamic> styles$CompHost = const [];

class _ViewCompHost0 extends AppView<dynamic> {
  ViewComp0 _compView_0;
  import1.Comp _Comp_0_4;
  static RenderComponentType _renderType;
  _ViewCompHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    _renderType ??= import7.appViewUtils
        .createRenderType('', ViewEncapsulation.Emulated, styles$CompHost);
    setupComponentType(_renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewComp0(this, 0);
    rootEl = _compView_0.rootEl;
    _Comp_0_4 = new import1.Comp();
    _compView_0.create(_Comp_0_4, projectableNodes);
    init0(rootEl);
    return new ComponentRef<import1.Comp>(0, this, rootEl, _Comp_0_4);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.Comp) && (0 == nodeIndex))) {
      return _Comp_0_4;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0?.destroy();
  }
}

AppView viewFactory_CompHost0(AppView<dynamic> parentView, num parentIndex) {
  return new _ViewCompHost0(parentView, parentIndex);
}

const ComponentFactory<import1.Comp> CompNgFactory =
    const ComponentFactory<import1.Comp>(
        'comp', viewFactory_CompHost0, _CompMetadata);
const _CompMetadata = const [];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ref0.initReflector();
  _ngRef.registerComponent(
    Comp,
    CompNgFactory,
  );
}
