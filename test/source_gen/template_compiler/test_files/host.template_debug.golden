// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
import 'host.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'host.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'host.dart' as import2;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';

const List<dynamic> styles$HostComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HostComponent0 = [];

class ViewHostComponent0 extends DebugAppView<import2.HostComponent> {
  static RenderComponentType renderType;
  ViewHostComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HostComponent0) {
    rootEl = document.createElement('host');
    createAttr(this.rootEl, 'aria-title', 'title');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/host.dart class HostComponent - inline template',
        ViewEncapsulation.None,
        styles$HostComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import2.HostComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], const [], []);
    rootEl.addEventListener('keydown', eventHandler0(_ctx.onKeyDown));
    rootEl.addEventListener('click', eventHandler1(_ctx.onClick));
    return null;
  }
}

AppView<import2.HostComponent> viewFactory_HostComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHostComponent0(parentView, parentIndex);
}

const List<dynamic> styles$HostComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_HostComponentHost0 = [
  new StaticNodeDebugInfo(
      [import2.HostComponent], import2.HostComponent, <String, dynamic>{})
];

class ViewHostComponentHost0 extends DebugAppView<dynamic> {
  ViewHostComponent0 _compView_0;
  import2.HostComponent _HostComponent_0_2;
  var _expr_0;
  bool _expr_1;
  static RenderComponentType renderType;
  ViewHostComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HostComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$HostComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewHostComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _HostComponent_0_2 = new import2.HostComponent();
    _compView_0.create(_HostComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _HostComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.HostComponent) && (0 == nodeIndex))) {
      return _HostComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    dbg(0, 0, 0);
    final currVal_0 = _HostComponent_0_2.title;
    if (import8.checkBinding(_expr_0, currVal_0)) {
      setProp(rootEl, 'title', currVal_0);
      _expr_0 = currVal_0;
    }
    final currVal_1 = _HostComponent_0_2.isDisabled;
    if (import8.checkBinding(_expr_1, currVal_1)) {
      updateElemClass(rootEl, 'is-disabled', currVal_1);
      _expr_1 = currVal_1;
    }
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_HostComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewHostComponentHost0(parentView, parentIndex);
}

const ComponentFactory HostComponentNgFactory = const ComponentFactory(
    'host', viewFactory_HostComponentHost0, import2.HostComponent, _METADATA);
const _METADATA = const <dynamic>[HostComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      HostComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[HostComponentNgFactory],
          const [], () => new HostComponent()));
  _i1.initReflector();
}
