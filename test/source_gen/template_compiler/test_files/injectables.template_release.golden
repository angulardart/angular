// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'injectables.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'dart:html' as html;
import 'package:angular2/angular2.template.dart' as _i1;
export 'injectables.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'injectables.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_InjectableComponent = const [];

class ViewInjectableComponent0 extends AppView<import1.InjectableComponent> {
  DivElement _el_0;
  static RenderComponentType renderType;
  ViewInjectableComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewInjectableComponent0,
            import4.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_InjectableComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Inject!');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewInjectableComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_InjectableComponentHost = const [];

class ViewInjectableComponentHost0 extends AppView<dynamic> {
  HtmlElement _el_0;
  AppView<import1.InjectableComponent> _compView_0;
  dynamic _OpaqueToken__test_0_2;
  import1.InjectableComponent _InjectableComponent_0_3;
  static RenderComponentType renderType;
  ViewInjectableComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewInjectableComponentHost0,
            import4.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_InjectableComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-injectables', rootSelector, null);
    _compView_0 = viewFactory_InjectableComponent0(this, 0, _el_0);
    _OpaqueToken__test_0_2 =
        import1.injectableFactory(this.injectorGet(Window, parentIndex));
    _InjectableComponent_0_3 = new import1.InjectableComponent(
        null,
        this.injectorGet(import1.InjectableService, parentIndex, null),
        _OpaqueToken__test_0_2);
    _compView_0.create(_InjectableComponent_0_3, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _InjectableComponent_0_3);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, 'OpaqueToken__test') && (0 == requestNodeIndex))) {
      return _OpaqueToken__test_0_2;
    }
    if ((identical(token, import1.InjectableComponent) &&
        (0 == requestNodeIndex))) {
      return _InjectableComponent_0_3;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewInjectableComponentHost0(
      parentView, parentIndex, parentElement);
}

const ComponentFactory InjectableComponentNgFactory = const ComponentFactory(
    'test-injectables',
    viewFactory_InjectableComponentHost0,
    import1.InjectableComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  injectableFactory,
  const <dynamic>[const Injectable()],
  InjectableComponent,
  const <dynamic>[],
  BaseService,
  const <dynamic>[const Injectable()],
  InjectableService,
  const <dynamic>[const Injectable()]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerFunction(
      injectableFactory,
      new _ngRef.ReflectionInfo(const <dynamic>[
        const Injectable()
      ], const [
        const <dynamic>[html.Window]
      ]));
  _ngRef.reflector.registerType(
      InjectableComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[
            InjectableComponentNgFactory
          ],
          const [
            const <dynamic>[
              BaseService,
              const Attribute("baseService"),
              optional
            ],
            const <dynamic>[InjectableService, const Optional()],
            const <dynamic>[bool, const Inject(testToken)]
          ],
          (BaseService service, InjectableService injectableService,
                  bool isTest) =>
              new InjectableComponent(service, injectableService, isTest)));
  _ngRef.reflector.registerType(
      BaseService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new BaseService()));
  _ngRef.reflector.registerType(
      InjectableService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new InjectableService()));
  _i1.initReflector();
}
