// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
import 'injectables.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/src/core/di/decorators.dart' as _di;
import 'dart:html' as html;
import 'package:angular2/angular2.template.dart' as _i1;
export 'injectables.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'injectables.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';
import 'dart:core';

const List<dynamic> styles$InjectableComponent = const [];

class ViewInjectableComponent0 extends AppView<import1.InjectableComponent> {
  DivElement _el_0;
  static RenderComponentType renderType;
  ViewInjectableComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('test-injectables');
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles$InjectableComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    Text _text_1 = new Text('Inject!');
    _el_0.append(_text_1);
    init(const [], const []);
    return null;
  }
}

AppView<import1.InjectableComponent> viewFactory_InjectableComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponent0(parentView, parentIndex);
}

const List<dynamic> styles$InjectableComponentHost = const [];

class ViewInjectableComponentHost0 extends AppView<dynamic> {
  ViewInjectableComponent0 _compView_0;
  dynamic _const_OpaqueToken__test___0_2;
  import1.InjectableComponent _InjectableComponent_0_3;
  dynamic __SomeDep_0_4;
  dynamic __BaseService_0_5;
  static RenderComponentType renderType;
  ViewInjectableComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles$InjectableComponentHost);
    setupComponentType(renderType);
  }
  dynamic get _SomeDep_0_4 {
    if ((this.__SomeDep_0_4 == null)) {
      (__SomeDep_0_4 =
          import1.createLinkedHashMap(this._const_OpaqueToken__test___0_2));
    }
    return this.__SomeDep_0_4;
  }

  dynamic get _BaseService_0_5 {
    if ((this.__BaseService_0_5 == null)) {
      (__BaseService_0_5 = import1.createLinkedHashMap(
          this._SomeDep_0_4,
          this.injectorGet(import1.SomeDep, this.parentIndex),
          this._SomeDep_0_4));
    }
    return this.__BaseService_0_5;
  }

  @override
  ComponentRef build() {
    _compView_0 = new ViewInjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _const_OpaqueToken__test___0_2 =
        import1.injectableFactory(this.injectorGet(Window, parentIndex));
    _InjectableComponent_0_3 = new import1.InjectableComponent(
        null,
        this.injectorGet(import1.InjectableService, parentIndex, null),
        _const_OpaqueToken__test___0_2,
        this.injectorGet(String, parentIndex, null));
    _compView_0.create(_InjectableComponent_0_3, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _InjectableComponent_0_3);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const OpaqueToken('test')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__test___0_2;
    }
    if ((identical(token, import1.InjectableComponent) && (0 == nodeIndex))) {
      return _InjectableComponent_0_3;
    }
    if ((identical(token, import1.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_4;
    }
    if ((identical(token, import1.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_5;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponentHost0(parentView, parentIndex);
}

const ComponentFactory InjectableComponentNgFactory = const ComponentFactory(
    'test-injectables',
    viewFactory_InjectableComponentHost0,
    import1.InjectableComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  injectableFactory,
  const <dynamic>[const Injectable()],
  InjectableComponent,
  const <dynamic>[],
  SomeDep,
  const <dynamic>[const Injectable()],
  BaseService,
  const <dynamic>[const Injectable()],
  InjectableService,
  const <dynamic>[const Injectable()]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerFunction(
      injectableFactory,
      new _ngRef.ReflectionInfo(const <dynamic>[
        const Injectable()
      ], const [
        const <dynamic>[html.Window]
      ]));
  _ngRef.reflector.registerType(
      InjectableComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[
            InjectableComponentNgFactory
          ],
          const [
            const <dynamic>[
              BaseService,
              const Attribute('baseService'),
              optional
            ],
            const <dynamic>[InjectableService, const Optional()],
            const <dynamic>[bool, const Inject(testToken)],
            const <dynamic>[String, const _di.Optional()]
          ],
          (BaseService service, InjectableService injectableService,
                  bool isTest, String foo) =>
              new InjectableComponent(
                  service, injectableService, isTest, foo)));
  _ngRef.reflector.registerType(
      SomeDep,
      new _ngRef.ReflectionInfo(
          const <dynamic>[const Injectable()], const [], () => new SomeDep()));
  _ngRef.reflector.registerType(
      BaseService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new BaseService()));
  _ngRef.reflector.registerType(
      InjectableService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new InjectableService()));
  _i1.initReflector();
}
