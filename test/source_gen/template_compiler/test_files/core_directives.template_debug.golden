// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'core_directives.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'core_directives.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/core/linker/template_ref.dart';
import 'package:angular2/src/common/directives/ng_if.dart';
import 'package:angular2/src/common/directives/ng_for.dart' as import3;
import 'package:angular2/src/debug/debug_app_view.dart';
import 'core_directives.dart' as import5;
import 'package:angular2/src/core/linker/view_container.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import9;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import11;
import 'package:angular2/angular2.dart';
import 'dart:html';

const List<dynamic> styles_TestFooComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = const [
  null,
  const StaticNodeDebugInfo(
      const [TemplateRef, NgIf], null, const <String, dynamic>{}),
  null,
  const StaticNodeDebugInfo(
      const [TemplateRef, import3.NgFor], null, const <String, dynamic>{}),
  null
];

class ViewTestFooComponent0 extends DebugAppView<import5.TestFooComponent> {
  ViewContainer _appEl_1;
  dynamic _TemplateRef_1_3;
  NgIf _NgIf_1_4;
  ViewContainer _appEl_3;
  dynamic _TemplateRef_3_3;
  import3.NgFor _NgFor_3_4;
  var _expr_1;
  static RenderComponentType renderType;
  ViewTestFooComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponent0,
            import9.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent0) {
    renderType ??= import11.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/core_directives.dart class TestFooComponent - inline template',
        0,
        ViewEncapsulation.None,
        styles_TestFooComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    Text _text_0 = new Text('    ');
    parentRenderNode.append(_text_0);
    dbgElm(_text_0, 0, 0, 0);
    var _anchor_1 = new Comment('template bindings={}');
    parentRenderNode?.append(_anchor_1);
    dbgElm(_anchor_1, 1, 0, 4);
    _appEl_1 = new ViewContainer(1, null, this, _anchor_1);
    _TemplateRef_1_3 = new TemplateRef(_appEl_1, viewFactory_TestFooComponent1);
    _NgIf_1_4 = new NgIf(parentView.injectorGet(ViewContainerRef, parentIndex),
        parentView.injectorGet(TemplateRef, parentIndex));
    Text _text_2 = new Text('\n    ');
    parentRenderNode.append(_text_2);
    dbgElm(_text_2, 2, 0, 30);
    var _anchor_3 = new Comment('template bindings={}');
    parentRenderNode?.append(_anchor_3);
    dbgElm(_anchor_3, 3, 1, 4);
    _appEl_3 = new ViewContainer(3, null, this, _anchor_3);
    _TemplateRef_3_3 = new TemplateRef(_appEl_3, viewFactory_TestFooComponent2);
    _NgFor_3_4 = new import3.NgFor(
        parentView.injectorGet(ViewContainerRef, parentIndex),
        parentView.injectorGet(TemplateRef, parentIndex),
        parentView.injectorGet(IterableDiffers, parentIndex),
        parentView.injectorGet(ChangeDetectorRef, parentIndex));
    Text _text_4 = new Text('\n    ');
    parentRenderNode.append(_text_4);
    dbgElm(_text_4, 4, 3, 10);
    init([], [_text_0, _anchor_1, _text_2, _anchor_3, _text_4], []);
    return null;
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, TemplateRef) && (1 == requestNodeIndex))) {
      return _TemplateRef_1_3;
    }
    if ((identical(token, NgIf) && (1 == requestNodeIndex))) {
      return _NgIf_1_4;
    }
    if ((identical(token, TemplateRef) && (3 == requestNodeIndex))) {
      return _TemplateRef_3_3;
    }
    if ((identical(token, import3.NgFor) && (3 == requestNodeIndex))) {
      return _NgFor_3_4;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    dbg(1, 0, 9);
    _NgIf_1_4.ngIf = ctx.foo;
    dbg(3, 1, 9);
    final currVal_1 = ctx.bars;
    if (import11.checkBinding(_expr_1, currVal_1)) {
      _NgFor_3_4.ngForOf = currVal_1;
      _expr_1 = currVal_1;
    }
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponent0(parentView, parentIndex, parentElement);
}

const List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent1 = const [
  null,
  null
];

class ViewTestFooComponent1 extends DebugAppView<import5.TestFooComponent> {
  Element _el_0;
  ViewTestFooComponent1(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponent1,
            import9.ViewType.EMBEDDED,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent1) {
    componentType = ViewTestFooComponent0.renderType;
  }
  ComponentRef createInternal(dynamic rootSelector) {
    var doc = document;
    _el_0 = doc.createElement('div');
    dbgElm(_el_0, 0, 0, 4);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 21);
    init([_el_0], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent1(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponent1(parentView, parentIndex, parentElement);
}

const List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent2 = const [
  null,
  null,
  null,
  null,
  null
];

class ViewTestFooComponent2 extends DebugAppView<import5.TestFooComponent> {
  Element _el_0;
  Element _el_2;
  Text _text_3;
  var _expr_0;
  ViewTestFooComponent2(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponent2,
            import9.ViewType.EMBEDDED,
            {'\$implicit': null},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent2) {
    componentType = ViewTestFooComponent0.renderType;
  }
  ComponentRef createInternal(dynamic rootSelector) {
    var doc = document;
    _el_0 = doc.createElement('div');
    dbgElm(_el_0, 0, 1, 4);
    Text _text_1 = new Text('\n      ');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 1, 34);
    _el_2 = doc.createElement('span');
    _el_0.append(_el_2);
    dbgElm(_el_2, 2, 2, 6);
    _text_3 = new Text('');
    _el_2.append(_text_3);
    dbgElm(_text_3, 3, 2, 12);
    Text _text_4 = new Text('\n    ');
    _el_0.append(_text_4);
    dbgElm(_text_4, 4, 2, 26);
    init([_el_0], [_el_0, _text_1, _el_2, _text_3, _text_4], []);
    return null;
  }

  void detectChangesInternal() {
    dbg(3, 2, 12);
    final currVal_0 = import11.interpolate0(locals['\$implicit']);
    if (import11.checkBinding(_expr_0, currVal_0)) {
      _text_3.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import5.TestFooComponent> viewFactory_TestFooComponent2(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponent2(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_TestFooComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = const [
  const StaticNodeDebugInfo(const [import5.TestFooComponent],
      import5.TestFooComponent, const <String, dynamic>{})
];

class ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import5.TestFooComponent> _compView_0;
  import5.TestFooComponent _TestFooComponent_0_2;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponentHost0,
            import9.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponentHost0) {
    renderType ??= import11.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_TestFooComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-foo', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_TestFooComponent0(this, 0, _el_0);
    _TestFooComponent_0_2 = new import5.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _TestFooComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import5.TestFooComponent) &&
        (0 == requestNodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import5.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new TestFooComponent()));
}
