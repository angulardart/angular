// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'pipes.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'pipes.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'pipes.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_Comp = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_Comp0 = [null];

class ViewComp0 extends DebugAppView<import2.Comp> {
  Text _text_0;
  var _expr_0;
  import2.PurePipe _pipe_pure_0;
  var _pipe_pure_0_0;
  import2.DirtyPipe _pipe_dirty_1;
  import2.LifecyclePipe _pipe_lifecycle_2;
  var _pipe_lifecycle_2_0;
  static RenderComponentType renderType;
  ViewComp0(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_Comp0) {
    rootEl = document.createElement('comp');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/pipes.dart class Comp - inline template',
        ViewEncapsulation.None,
        styles_Comp);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import2.Comp _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    _text_0 = new Text('');
    parentRenderNode.append(_text_0);
    dbgElm(_text_0, 0, 0, 0);
    _pipe_pure_0 = new import2.PurePipe();
    this._pipe_pure_0_0 = import8.pureProxy1(_pipe_pure_0.transform);
    _pipe_dirty_1 = new import2.DirtyPipe();
    _pipe_lifecycle_2 = new import2.LifecyclePipe();
    this._pipe_lifecycle_2_0 = import8.pureProxy1(_pipe_lifecycle_2.transform);
    init(const [], const [], [_text_0]);
    return null;
  }

  void detectChangesInternal() {
    final valUnwrapper = new ValueUnwrapper();
    final import2.Comp _ctx = ctx;
    dbg(0, 0, 0);
    valUnwrapper.reset();
    final currVal_0 = import8.interpolate(
        3,
        '    ',
        valUnwrapper.unwrap(
            import8.castByValue(_pipe_pure_0_0, _pipe_pure_0.transform)('foo')),
        '\n    ',
        valUnwrapper.unwrap(_pipe_dirty_1.transform('bar')),
        '\n    ',
        valUnwrapper.unwrap(import8.castByValue(
            _pipe_lifecycle_2_0, _pipe_lifecycle_2.transform)('lifecycle')),
        '\n  ');
    if ((valUnwrapper.hasWrappedValue ||
        import8.checkBinding(_expr_0, currVal_0))) {
      _text_0.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }

  void destroyInternal() {
    _pipe_lifecycle_2.ngOnDestroy();
  }
}

AppView<import2.Comp> viewFactory_Comp0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewComp0(parentView, parentIndex);
}

const List<dynamic> styles_CompHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_CompHost0 = [
  new StaticNodeDebugInfo([import2.Comp], import2.Comp, <String, dynamic>{})
];

class ViewCompHost0 extends DebugAppView<dynamic> {
  AppView<import2.Comp> _compView_0;
  import2.Comp _Comp_0_2;
  static RenderComponentType renderType;
  ViewCompHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import6.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways, nodeDebugInfos_CompHost0) {
    renderType ??= import8.appViewUtils
        .createRenderType('', ViewEncapsulation.Emulated, styles_CompHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = viewFactory_Comp0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _Comp_0_2 = new import2.Comp();
    _compView_0.create(_Comp_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _Comp_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.Comp) && (0 == nodeIndex))) {
      return _Comp_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_CompHost0(AppView<dynamic> parentView, num parentIndex) {
  return new ViewCompHost0(parentView, parentIndex);
}

const ComponentFactory CompNgFactory = const ComponentFactory(
    'comp', viewFactory_CompHost0, import2.Comp, _METADATA);
const _METADATA = const <dynamic>[
  PurePipe,
  const <dynamic>[],
  DirtyPipe,
  const <dynamic>[],
  LifecyclePipe,
  const <dynamic>[],
  Comp,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      PurePipe,
      new _ngRef.ReflectionInfo(const <dynamic>[], const [],
          () => new PurePipe(), const <dynamic>[PipeTransform]));
  _ngRef.reflector.registerType(
      DirtyPipe,
      new _ngRef.ReflectionInfo(const <dynamic>[], const [],
          () => new DirtyPipe(), const <dynamic>[PipeTransform]));
  _ngRef.reflector.registerType(
      LifecyclePipe,
      new _ngRef.ReflectionInfo(
          const <dynamic>[],
          const [],
          () => new LifecyclePipe(),
          const <dynamic>[PipeTransform, OnDestroy]));
  _ngRef.reflector.registerType(
      Comp,
      new _ngRef.ReflectionInfo(
          const <dynamic>[CompNgFactory], const [], () => new Comp()));
  _i1.initReflector();
}
