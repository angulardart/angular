// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'providers.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'providers.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'providers.dart' as import1;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import3;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import5;
import 'package:angular2/angular2.dart';
import 'dart:html';
import 'package:angular2/src/core/zone/ng_zone.dart' as import8;

const List<dynamic> styles_ProvidersComponent = const [];

class ViewProvidersComponent0 extends AppView<import1.ProvidersComponent> {
  static RenderComponentType renderType;
  ViewProvidersComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewProvidersComponent0,
            import3.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import5.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_ProvidersComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    Text _text_0 = new Text('Hello');
    parentRenderNode.append(_text_0);
    init([], [_text_0], []);
    return null;
  }
}

AppView<import1.ProvidersComponent> viewFactory_ProvidersComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewProvidersComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_ProvidersComponentHost = const [];

class ViewProvidersComponentHost0 extends AppView<dynamic> {
  HtmlElement _el_0;
  AppView<import1.ProvidersComponent> _compView_0;
  import1.ProvidersComponent _ProvidersComponent_0_2;
  import1.MyTypeAnnotation __MyTypeAnnotation_0_3;
  dynamic __MyUseFactory_0_4;
  import1.MyUseClass __MyUseClass_0_5;
  dynamic __MyUseExisting_0_6;
  dynamic __MyUseValue_0_7;
  static RenderComponentType renderType;
  ViewProvidersComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewProvidersComponentHost0,
            import3.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import5.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_ProvidersComponentHost);
    setupComponentType(renderType);
  }
  import1.MyTypeAnnotation get _MyTypeAnnotation_0_3 {
    if ((this.__MyTypeAnnotation_0_3 == null)) {
      (__MyTypeAnnotation_0_3 = new import1.MyTypeAnnotation());
    }
    return this.__MyTypeAnnotation_0_3;
  }

  dynamic get _MyUseFactory_0_4 {
    if ((this.__MyUseFactory_0_4 == null)) {
      (__MyUseFactory_0_4 = import1
          .createService(this.injectorGet(import8.NgZone, this.parentIndex)));
    }
    return this.__MyUseFactory_0_4;
  }

  import1.MyUseClass get _MyUseClass_0_5 {
    if ((this.__MyUseClass_0_5 == null)) {
      (__MyUseClass_0_5 = new import1.MyUseClass());
    }
    return this.__MyUseClass_0_5;
  }

  dynamic get _MyUseExisting_0_6 {
    if ((this.__MyUseExisting_0_6 == null)) {
      (__MyUseExisting_0_6 = this._MyUseClass_0_5);
    }
    return this.__MyUseExisting_0_6;
  }

  dynamic get _MyUseValue_0_7 {
    if ((this.__MyUseValue_0_7 == null)) {
      (__MyUseValue_0_7 = null);
    }
    return this.__MyUseValue_0_7;
  }

  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('providers', rootSelector, null);
    _compView_0 = viewFactory_ProvidersComponent0(this, 0, _el_0);
    _ProvidersComponent_0_2 = new import1.ProvidersComponent();
    _compView_0.create(_ProvidersComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _ProvidersComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.ProvidersComponent) &&
        (0 == requestNodeIndex))) {
      return _ProvidersComponent_0_2;
    }
    if ((identical(token, import1.MyTypeAnnotation) &&
        (0 == requestNodeIndex))) {
      return _MyTypeAnnotation_0_3;
    }
    if ((identical(token, import1.MyUseFactory) && (0 == requestNodeIndex))) {
      return _MyUseFactory_0_4;
    }
    if ((identical(token, import1.MyUseClass) && (0 == requestNodeIndex))) {
      return _MyUseClass_0_5;
    }
    if ((identical(token, import1.MyUseExisting) && (0 == requestNodeIndex))) {
      return _MyUseExisting_0_6;
    }
    if ((identical(token, import1.MyUseValue) && (0 == requestNodeIndex))) {
      return _MyUseValue_0_7;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_ProvidersComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewProvidersComponentHost0(
      parentView, parentIndex, parentElement);
}

const ComponentFactory ProvidersComponentNgFactory = const ComponentFactory(
    'providers',
    viewFactory_ProvidersComponentHost0,
    import1.ProvidersComponent,
    _METADATA);
const _METADATA = const <dynamic>[ProvidersComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      ProvidersComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[ProvidersComponentNgFactory],
          const [], () => new ProvidersComponent()));
  _i1.initReflector();
}
