// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'export_as.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'export_as.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'export_as.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  Element _el_0;
  static RenderComponentType renderType;
  ViewTestFooComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(ViewTestFooComponent0, import4.ViewType.COMPONENT, {}, parentView,
            parentIndex, parentElement, ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.None, styles_TestFooComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_TestFooComponentHost = const [];

class ViewTestFooComponentHost0 extends AppView<dynamic> {
  Element _el_0;
  AppView<import1.TestFooComponent> _compView_0;
  import1.TestFooComponent _TestFooComponent_0_2;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(ViewTestFooComponentHost0, import4.ViewType.HOST, {}, parentView,
            parentIndex, parentElement, ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_TestFooComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-foo', rootSelector, null);
    _compView_0 = viewFactory_TestFooComponent0(this, 0, _el_0);
    _TestFooComponent_0_2 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _TestFooComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestFooComponent) &&
        (0 == requestNodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewTestFooComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import1.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestFooComponentNgFactory],
          const [], () => new TestFooComponent()));
}
