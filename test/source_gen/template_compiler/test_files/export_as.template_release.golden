// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'export_as.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'export_as.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'export_as.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_TestFooComponent = const [];

class ViewTestFooComponent0 extends AppView<import1.TestFooComponent> {
  DivElement _el_0;
  static RenderComponentType renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('test-foo');
    renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles_TestFooComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.TestFooComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    init(const [], const []);
    return null;
  }
}

AppView<import1.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

const List<dynamic> styles_TestFooComponentHost = const [];

class ViewTestFooComponentHost0 extends AppView<dynamic> {
  ViewTestFooComponent0 _compView_0;
  import1.TestFooComponent _TestFooComponent_0_2;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_TestFooComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewTestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestFooComponent_0_2 = new import1.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import1.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestFooComponentNgFactory],
          const [], () => new TestFooComponent()));
  _i1.initReflector();
}
