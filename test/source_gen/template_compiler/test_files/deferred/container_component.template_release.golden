// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'container_component.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'deferred_component.dart';
import 'package:angular2/angular2.template.dart' as _i1;
import 'deferred_component.template.dart' as _i2;
export 'container_component.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'container_component.dart' as import1;
import 'package:angular2/src/core/linker/view_container.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import7;
import 'package:angular2/angular2.dart';
import 'package:angular2/src/core/linker/template_ref.dart';
import 'deferred_component.dart' deferred as deflib0;
import 'deferred_component.template.dart' deferred as deflib1;

const List<dynamic> styles_TestContainerComponent = const [];

class ViewTestContainerComponent0
    extends AppView<import1.TestContainerComponent> {
  ViewContainer _appEl_0;
  static RenderComponentType renderType;
  ViewTestContainerComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('test-container');
    renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_TestContainerComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.TestContainerComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var _anchor_0 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_0);
    _appEl_0 = new ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_3 =
        new TemplateRef(_appEl_0, viewFactory_TestContainerComponent1);
    loadDeferred(
        deflib0.loadLibrary, deflib1.loadLibrary, _appEl_0, _TemplateRef_0_3,
        () {
      deflib1.initReflector();
    });
    init(const [], const []);
    return null;
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestContainerComponent0(parentView, parentIndex);
}

class ViewTestContainerComponent1
    extends AppView<import1.TestContainerComponent> {
  Element _el_0;
  AppView _compView_0;
  dynamic _DeferredChildComponent_0_2;
  ViewTestContainerComponent1(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.EMBEDDED, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    componentType = ViewTestContainerComponent0.renderType;
  }
  ComponentRef build() {
    final import1.TestContainerComponent _ctx = ctx;
    _compView_0 = deflib1.viewFactory_DeferredChildComponent0(this, 0);
    _el_0 = _compView_0.rootEl;
    _DeferredChildComponent_0_2 = new deflib0.DeferredChildComponent();
    Text _text_1 = new Text('Foo');
    _compView_0.create(_DeferredChildComponent_0_2, []);
    init([_el_0], const []);
    return null;
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, deflib0.DeferredChildComponent) &&
        ((0 <= nodeIndex) && (nodeIndex <= 1)))) {
      return _DeferredChildComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final import1.TestContainerComponent _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView<import1.TestContainerComponent> viewFactory_TestContainerComponent1(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestContainerComponent1(parentView, parentIndex);
}

const List<dynamic> styles_TestContainerComponentHost = const [];

class ViewTestContainerComponentHost0 extends AppView<dynamic> {
  ViewTestContainerComponent0 _compView_0;
  import1.TestContainerComponent _TestContainerComponent_0_2;
  static RenderComponentType renderType;
  ViewTestContainerComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_TestContainerComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewTestContainerComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestContainerComponent_0_2 = new import1.TestContainerComponent();
    _compView_0.create(_TestContainerComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _TestContainerComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestContainerComponent) &&
        (0 == nodeIndex))) {
      return _TestContainerComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestContainerComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestContainerComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestContainerComponentNgFactory = const ComponentFactory(
    'test-container',
    viewFactory_TestContainerComponentHost0,
    import1.TestContainerComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestContainerComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestContainerComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[TestContainerComponentNgFactory],
          const [],
          () => new TestContainerComponent()));
  _i1.initReflector();
  _i2.initReflector();
}
