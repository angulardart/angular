// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'lifecycle_hooks.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'lifecycle_hooks.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'lifecycle_hooks.dart' as import1;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import3;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_LifecycleHooksComponent = const [];

class ViewLifecycleHooksComponent0
    extends AppView<import1.LifecycleHooksComponent> {
  static RenderComponentType renderType;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import3.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('lifecycle-hooks');
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_LifecycleHooksComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.LifecycleHooksComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], const []);
    return null;
  }
}

AppView<import1.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewLifecycleHooksComponent0(parentView, parentIndex);
}

const List<dynamic> styles_LifecycleHooksComponentHost = const [];

class ViewLifecycleHooksComponentHost0 extends AppView<dynamic> {
  ViewLifecycleHooksComponent0 _compView_0;
  import1.LifecycleHooksComponent _LifecycleHooksComponent_0_2;
  static RenderComponentType renderType;
  ViewLifecycleHooksComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import3.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_LifecycleHooksComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _LifecycleHooksComponent_0_2 = new import1.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _LifecycleHooksComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.LifecycleHooksComponent) &&
        (0 == nodeIndex))) {
      return _LifecycleHooksComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    bool firstCheck = identical(this.cdState, ChangeDetectorState.NeverChecked);
    final _ctx = ctx;
    if (firstCheck) {
      _LifecycleHooksComponent_0_2.ngOnInit();
    }
    _LifecycleHooksComponent_0_2.ngDoCheck();
    if (firstCheck) {
      _LifecycleHooksComponent_0_2.ngAfterContentInit();
    }
    _LifecycleHooksComponent_0_2.ngAfterContentChecked();
    _compView_0.detectChanges();
    if (firstCheck) {
      _LifecycleHooksComponent_0_2.ngAfterViewInit();
    }
    _LifecycleHooksComponent_0_2.ngAfterViewChecked();
  }

  void destroyInternal() {
    _compView_0.destroy();
    _LifecycleHooksComponent_0_2.ngOnDestroy();
  }
}

AppView viewFactory_LifecycleHooksComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

const ComponentFactory LifecycleHooksComponentNgFactory =
    const ComponentFactory(
        'lifecycle-hooks',
        viewFactory_LifecycleHooksComponentHost0,
        import1.LifecycleHooksComponent,
        _METADATA);
const _METADATA = const <dynamic>[LifecycleHooksComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      LifecycleHooksComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[LifecycleHooksComponentNgFactory],
          const [],
          () => new LifecycleHooksComponent(),
          const <dynamic>[
            OnDestroy,
            OnChanges,
            OnInit,
            AfterContentChecked,
            AfterContentInit,
            AfterViewChecked,
            AfterViewInit,
            DoCheck
          ]));
  _i1.initReflector();
}
