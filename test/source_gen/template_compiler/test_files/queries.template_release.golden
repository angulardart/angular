// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'queries.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'queries.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'queries.dart' as import1;
import 'package:angular2/src/core/linker/query_list.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import7;
import 'package:angular2/angular2.dart';
import 'package:angular2/src/core/linker/element_ref.dart';

const List<dynamic> styles_QueriesComponent = const [];

class ViewQueriesComponent0 extends AppView<import1.QueriesComponent> {
  import2.QueryList _viewQuery_q8_0;
  import2.QueryList _viewQuery_q10_1;
  import2.QueryList _viewQuery_q12_2;
  import2.QueryList _viewQuery_q12_3;
  import2.QueryList _viewQuery_AnotherDirective_4;
  Element _el_1;
  import1.AnotherDirective _AnotherDirective_1_2;
  Element _el_3;
  import1.AnotherDirective _AnotherDirective_3_2;
  Element _el_5;
  import1.AnotherDirective _AnotherDirective_5_2;
  Element _el_7;
  import1.AnotherDirective _AnotherDirective_7_2;
  Element _el_9;
  import1.AnotherDirective _AnotherDirective_9_2;
  Element _el_11;
  import1.AnotherDirective _AnotherDirective_11_2;
  Element _el_13;
  import1.AnotherDirective _AnotherDirective_13_2;
  Element _el_15;
  import1.AnotherDirective _AnotherDirective_15_2;
  Element _el_17;
  import1.AnotherDirective _AnotherDirective_17_2;
  Element _el_19;
  import1.AnotherDirective _AnotherDirective_19_2;
  Element _el_21;
  import1.AnotherDirective _AnotherDirective_21_2;
  Element _el_23;
  import1.AnotherDirective _AnotherDirective_23_2;
  static RenderComponentType renderType;
  ViewQueriesComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('queries');
    renderType ??= import7.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles_QueriesComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.QueriesComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    _viewQuery_q8_0 = new import2.QueryList();
    _viewQuery_q10_1 = new import2.QueryList();
    _viewQuery_q12_2 = new import2.QueryList();
    _viewQuery_q12_3 = new import2.QueryList();
    _viewQuery_AnotherDirective_4 = new import2.QueryList();
    Text _text_0 = new Text('    ');
    parentRenderNode.append(_text_0);
    var doc = document;
    _el_1 = doc.createElement('another');
    parentRenderNode.append(_el_1);
    _AnotherDirective_1_2 = new import1.AnotherDirective();
    Text _text_2 = new Text('\n    ');
    parentRenderNode.append(_text_2);
    _el_3 = doc.createElement('another');
    parentRenderNode.append(_el_3);
    _AnotherDirective_3_2 = new import1.AnotherDirective();
    Text _text_4 = new Text('\n    ');
    parentRenderNode.append(_text_4);
    _el_5 = doc.createElement('another');
    parentRenderNode.append(_el_5);
    _AnotherDirective_5_2 = new import1.AnotherDirective();
    Text _text_6 = new Text('\n    ');
    parentRenderNode.append(_text_6);
    _el_7 = doc.createElement('another');
    parentRenderNode.append(_el_7);
    _AnotherDirective_7_2 = new import1.AnotherDirective();
    Text _text_8 = new Text('\n    ');
    parentRenderNode.append(_text_8);
    _el_9 = doc.createElement('another');
    parentRenderNode.append(_el_9);
    _AnotherDirective_9_2 = new import1.AnotherDirective();
    Text _text_10 = new Text('\n    ');
    parentRenderNode.append(_text_10);
    _el_11 = doc.createElement('another');
    parentRenderNode.append(_el_11);
    _AnotherDirective_11_2 = new import1.AnotherDirective();
    Text _text_12 = new Text('\n    ');
    parentRenderNode.append(_text_12);
    _el_13 = doc.createElement('another');
    parentRenderNode.append(_el_13);
    _AnotherDirective_13_2 = new import1.AnotherDirective();
    Text _text_14 = new Text('\n    ');
    parentRenderNode.append(_text_14);
    _el_15 = doc.createElement('another');
    parentRenderNode.append(_el_15);
    _AnotherDirective_15_2 = new import1.AnotherDirective();
    Text _text_16 = new Text('\n    ');
    parentRenderNode.append(_text_16);
    _el_17 = doc.createElement('another');
    parentRenderNode.append(_el_17);
    _AnotherDirective_17_2 = new import1.AnotherDirective();
    Text _text_18 = new Text('\n    ');
    parentRenderNode.append(_text_18);
    _el_19 = doc.createElement('another');
    parentRenderNode.append(_el_19);
    _AnotherDirective_19_2 = new import1.AnotherDirective();
    Text _text_20 = new Text('\n    ');
    parentRenderNode.append(_text_20);
    _el_21 = doc.createElement('another');
    parentRenderNode.append(_el_21);
    _AnotherDirective_21_2 = new import1.AnotherDirective();
    Text _text_22 = new Text('\n    ');
    parentRenderNode.append(_text_22);
    _el_23 = doc.createElement('another');
    parentRenderNode.append(_el_23);
    _AnotherDirective_23_2 = new import1.AnotherDirective();
    Text _text_24 = new Text('\n  ');
    parentRenderNode.append(_text_24);
    _viewQuery_q12_2.reset([new ElementRef(_el_23)]);
    ctx.viewChildFromField = _viewQuery_q12_2.first;
    _viewQuery_q12_3.reset([new ElementRef(_el_23)]);
    ctx.readDIFromElement = _viewQuery_q12_3.first;
    init(const [], const []);
    return null;
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.AnotherDirective) && (1 == nodeIndex))) {
      return _AnotherDirective_1_2;
    }
    if ((identical(token, import1.AnotherDirective) && (3 == nodeIndex))) {
      return _AnotherDirective_3_2;
    }
    if ((identical(token, import1.AnotherDirective) && (5 == nodeIndex))) {
      return _AnotherDirective_5_2;
    }
    if ((identical(token, import1.AnotherDirective) && (7 == nodeIndex))) {
      return _AnotherDirective_7_2;
    }
    if ((identical(token, import1.AnotherDirective) && (9 == nodeIndex))) {
      return _AnotherDirective_9_2;
    }
    if ((identical(token, import1.AnotherDirective) && (11 == nodeIndex))) {
      return _AnotherDirective_11_2;
    }
    if ((identical(token, import1.AnotherDirective) && (13 == nodeIndex))) {
      return _AnotherDirective_13_2;
    }
    if ((identical(token, import1.AnotherDirective) && (15 == nodeIndex))) {
      return _AnotherDirective_15_2;
    }
    if ((identical(token, import1.AnotherDirective) && (17 == nodeIndex))) {
      return _AnotherDirective_17_2;
    }
    if ((identical(token, import1.AnotherDirective) && (19 == nodeIndex))) {
      return _AnotherDirective_19_2;
    }
    if ((identical(token, import1.AnotherDirective) && (21 == nodeIndex))) {
      return _AnotherDirective_21_2;
    }
    if ((identical(token, import1.AnotherDirective) && (23 == nodeIndex))) {
      return _AnotherDirective_23_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final import1.QueriesComponent _ctx = ctx;
    if (_viewQuery_q8_0.dirty) {
      _viewQuery_q8_0.reset([new ElementRef(_el_15)]);
      ctx.viewQueryFromField = _viewQuery_q8_0;
      _viewQuery_q8_0.notifyOnChanges();
    }
    if (_viewQuery_q10_1.dirty) {
      _viewQuery_q10_1.reset([new ElementRef(_el_19)]);
      ctx.viewChildrenFromField = _viewQuery_q10_1;
      _viewQuery_q10_1.notifyOnChanges();
    }
    if (_viewQuery_AnotherDirective_4.dirty) {
      _viewQuery_AnotherDirective_4.reset([
        _AnotherDirective_1_2,
        _AnotherDirective_3_2,
        _AnotherDirective_5_2,
        _AnotherDirective_7_2,
        _AnotherDirective_9_2,
        _AnotherDirective_11_2,
        _AnotherDirective_13_2,
        _AnotherDirective_15_2,
        _AnotherDirective_17_2,
        _AnotherDirective_19_2,
        _AnotherDirective_21_2,
        _AnotherDirective_23_2
      ]);
      ctx.usingTypeFromField = _viewQuery_AnotherDirective_4;
      _viewQuery_AnotherDirective_4.notifyOnChanges();
    }
  }
}

AppView<import1.QueriesComponent> viewFactory_QueriesComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewQueriesComponent0(parentView, parentIndex);
}

const List<dynamic> styles_QueriesComponentHost = const [];

class ViewQueriesComponentHost0 extends AppView<dynamic> {
  AppView<import1.QueriesComponent> _compView_0;
  import1.QueriesComponent _QueriesComponent_0_2;
  import2.QueryList _query_q7_0_0;
  import2.QueryList _query_q9_0_1;
  import2.QueryList _query_q11_0_2;
  import2.QueryList _query_q1_0_3;
  import2.QueryList _query_q2_0_4;
  import2.QueryList _query_q3_0_5;
  import2.QueryList _query_q4_0_6;
  import2.QueryList _query_q5_0_7;
  import2.QueryList _query_q6_0_8;
  static RenderComponentType renderType;
  ViewQueriesComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import5.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import7.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_QueriesComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = viewFactory_QueriesComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _QueriesComponent_0_2 = new import1.QueriesComponent();
    _query_q7_0_0 = new import2.QueryList();
    _query_q9_0_1 = new import2.QueryList();
    _query_q11_0_2 = new import2.QueryList();
    _query_q1_0_3 = new import2.QueryList();
    _query_q2_0_4 = new import2.QueryList();
    _query_q3_0_5 = new import2.QueryList();
    _query_q4_0_6 = new import2.QueryList();
    _query_q5_0_7 = new import2.QueryList();
    _query_q6_0_8 = new import2.QueryList();
    _query_q11_0_2.reset([]);
    _QueriesComponent_0_2.contentChildFromField = _query_q11_0_2.first;
    _query_q5_0_7.reset([]);
    _QueriesComponent_0_2.contentChildFromAnnotation = _query_q5_0_7.first;
    _query_q6_0_8.reset([]);
    _QueriesComponent_0_2.viewChildFromAnnotation = _query_q6_0_8.first;
    _compView_0.create(_QueriesComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _QueriesComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.QueriesComponent) && (0 == nodeIndex))) {
      return _QueriesComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    if (_query_q7_0_0.dirty) {
      _query_q7_0_0.reset([]);
      _QueriesComponent_0_2.queryFromField = _query_q7_0_0;
      _query_q7_0_0.notifyOnChanges();
    }
    if (_query_q9_0_1.dirty) {
      _query_q9_0_1.reset([]);
      _QueriesComponent_0_2.contentChildrenFromField = _query_q9_0_1;
      _query_q9_0_1.notifyOnChanges();
    }
    if (_query_q1_0_3.dirty) {
      _query_q1_0_3.reset([]);
      _QueriesComponent_0_2.queryFromAnnotation = _query_q1_0_3;
      _query_q1_0_3.notifyOnChanges();
    }
    if (_query_q2_0_4.dirty) {
      _query_q2_0_4.reset([]);
      _QueriesComponent_0_2.viewQueryFromAnnotation = _query_q2_0_4;
      _query_q2_0_4.notifyOnChanges();
    }
    if (_query_q3_0_5.dirty) {
      _query_q3_0_5.reset([]);
      _QueriesComponent_0_2.contentChildrenFromAnnotation = _query_q3_0_5;
      _query_q3_0_5.notifyOnChanges();
    }
    if (_query_q4_0_6.dirty) {
      _query_q4_0_6.reset([]);
      _QueriesComponent_0_2.viewChildrenFromAnnotation = _query_q4_0_6;
      _query_q4_0_6.notifyOnChanges();
    }
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_QueriesComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewQueriesComponentHost0(parentView, parentIndex);
}

const ComponentFactory QueriesComponentNgFactory = const ComponentFactory(
    'queries',
    viewFactory_QueriesComponentHost0,
    import1.QueriesComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  QueriesComponent,
  const <dynamic>[],
  AnotherDirective,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      QueriesComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[QueriesComponentNgFactory],
          const [], () => new QueriesComponent()));
  _ngRef.reflector.registerType(
      AnotherDirective,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new AnotherDirective()));
  _i1.initReflector();
}
