// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'base_component.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'base_component.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'base_component.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/di/injector.dart' as import4;
import 'package:angular2/src/core/linker/view_container.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/src/core/metadata/view.dart' as import9;
import 'package:angular2/src/core/linker/component_factory.dart' as import10;

const List<dynamic> styles_TestFooComponent = const [];
RenderComponentType renderType_TestFooComponent;

class ViewTestFooComponent0 extends AppView<import2.TestFooComponent> {
  Element _el_0;
  ViewTestFooComponent0(
      import4.Injector parentInjector, ViewContainer declarationEl)
      : super(
            ViewTestFooComponent0,
            renderType_TestFooComponent,
            import6.ViewType.COMPONENT,
            {},
            parentInjector,
            declarationEl,
            ChangeDetectionStrategy.CheckAlways);
  ViewContainer createInternal(dynamic rootSelector) {
    final Node parentRenderNode =
        initViewRoot(this.declarationViewContainer.nativeElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView viewFactory_TestFooComponent0(
    import4.Injector parentInjector, ViewContainer declarationEl) {
  if (identical(renderType_TestFooComponent, null)) {
    (renderType_TestFooComponent = import8.appViewUtils
        .createRenderComponentType(
            '', 0, import9.ViewEncapsulation.None, styles_TestFooComponent));
  }
  return new ViewTestFooComponent0(parentInjector, declarationEl);
}

const List<dynamic> styles_TestFooComponentHost = const [];
RenderComponentType renderType_TestFooComponentHost;

class ViewTestFooComponentHost0 extends AppView<dynamic> {
  Element _el_0;
  ViewContainer _appEl_0;
  AppView<import2.TestFooComponent> _compView_0;
  import2.TestFooComponent _TestFooComponent_0_3;
  ViewTestFooComponentHost0(
      import4.Injector parentInjector, ViewContainer declarationEl)
      : super(
            ViewTestFooComponentHost0,
            renderType_TestFooComponentHost,
            import6.ViewType.HOST,
            {},
            parentInjector,
            declarationEl,
            ChangeDetectionStrategy.CheckAlways);
  ViewContainer createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-foo', rootSelector, null);
    _appEl_0 = new ViewContainer(0, null, this, _el_0);
    _compView_0 = viewFactory_TestFooComponent0(this.injector(0), _appEl_0);
    _TestFooComponent_0_3 = new import2.TestFooComponent();
    _appEl_0.initComponent(_TestFooComponent_0_3, _compView_0);
    _compView_0.createComp(projectableNodes, null);
    init([_el_0], [_el_0], []);
    return _appEl_0;
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.TestFooComponent) &&
        (0 == requestNodeIndex))) {
      return _TestFooComponent_0_3;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    import4.Injector parentInjector, ViewContainer declarationEl) {
  if (identical(renderType_TestFooComponentHost, null)) {
    (renderType_TestFooComponentHost = import8.appViewUtils
        .createRenderComponentType('', 0, import9.ViewEncapsulation.Emulated,
            styles_TestFooComponentHost));
  }
  return new ViewTestFooComponentHost0(parentInjector, declarationEl);
}

const import10.ComponentFactory TestFooComponentNgFactory =
    const import10.ComponentFactory('test-foo',
        viewFactory_TestFooComponentHost0, import2.TestFooComponent, _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  reflector.registerType(
      TestFooComponent,
      new ReflectionInfo(
          const <dynamic>[], const [], () => new TestFooComponent()));
}
