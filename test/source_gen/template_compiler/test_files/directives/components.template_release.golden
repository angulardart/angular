// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
import 'components.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'components.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'components.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_TestSubComponent = const [];

class ViewTestSubComponent0 extends AppView<import1.TestSubComponent> {
  DivElement _el_0;
  static RenderComponentType renderType;
  ViewTestSubComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('test-bar');
    renderType ??= import6.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles_TestSubComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    Text _text_1 = new Text('Bar');
    _el_0.append(_text_1);
    init(const [], const []);
    return null;
  }
}

AppView<import1.TestSubComponent> viewFactory_TestSubComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestSubComponent0(parentView, parentIndex);
}

const List<dynamic> styles_TestSubComponentHost = const [];

class ViewTestSubComponentHost0 extends AppView<dynamic> {
  ViewTestSubComponent0 _compView_0;
  import1.TestSubComponent _TestSubComponent_0_2;
  static RenderComponentType renderType;
  ViewTestSubComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_TestSubComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    _compView_0 = new ViewTestSubComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _TestSubComponent_0_2 = new import1.TestSubComponent();
    _compView_0.create(_TestSubComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _TestSubComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.TestSubComponent) && (0 == nodeIndex))) {
      return _TestSubComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestSubComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestSubComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestSubComponentNgFactory = const ComponentFactory(
    'test-bar',
    viewFactory_TestSubComponentHost0,
    import1.TestSubComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestSubComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestSubComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestSubComponentNgFactory],
          const [], () => new TestSubComponent()));
  _i1.initReflector();
}
