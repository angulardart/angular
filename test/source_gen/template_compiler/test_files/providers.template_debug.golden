// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'providers.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'providers.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'providers.dart' as import2;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';
import 'package:angular2/src/core/zone/ng_zone.dart' as import10;

const List<dynamic> styles_ProvidersComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_ProvidersComponent0 = [null];

class ViewProvidersComponent0 extends DebugAppView<import2.ProvidersComponent> {
  static RenderComponentType renderType;
  ViewProvidersComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_ProvidersComponent0) {
    rootEl = document.createElement('providers');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/providers.dart class ProvidersComponent - inline template',
        ViewEncapsulation.None,
        styles_ProvidersComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import2.ProvidersComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    Text _text_0 = new Text('Hello');
    parentRenderNode.append(_text_0);
    dbgElm(_text_0, 0, 0, 0);
    init(const [], const [], [_text_0]);
    return null;
  }
}

AppView<import2.ProvidersComponent> viewFactory_ProvidersComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewProvidersComponent0(parentView, parentIndex);
}

const List<dynamic> styles_ProvidersComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_ProvidersComponentHost0 = [
  new StaticNodeDebugInfo(
      [
        import2.ProvidersComponent,
        import2.MyInjectableTypeAnnotation,
        import2.MyUseFactory,
        import2.MyUseClass,
        import2.MyUseExisting,
        import2.MyUseExistingNested,
        import2.MyUseValue,
        const OpaqueToken('useValueString'),
        import2.MyMulti,
        const OpaqueToken('useValueList'),
        const OpaqueToken('useValueMap'),
        const OpaqueToken('useEnums')
      ],
      import2.ProvidersComponent,
      <String, dynamic>{})
];

class ViewProvidersComponentHost0 extends DebugAppView<dynamic> {
  AppView<import2.ProvidersComponent> _compView_0;
  import2.ProvidersComponent _ProvidersComponent_0_2;
  import2.MyInjectableTypeAnnotation __MyInjectableTypeAnnotation_0_3;
  dynamic __MyUseFactory_0_4;
  import2.MyUseClass __MyUseClass_0_5;
  import2.MyUseValue __MyUseValue_0_8;
  String __const_OpaqueToken__useValueString___0_9;
  List<dynamic> __MyMulti_0_10;
  List<dynamic> __const_OpaqueToken__useValueList___0_11;
  Map<String, dynamic> __const_OpaqueToken__useValueMap___0_12;
  dynamic __const_OpaqueToken__useEnums___0_13;
  static RenderComponentType renderType;
  ViewProvidersComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_ProvidersComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_ProvidersComponentHost);
    setupComponentType(renderType);
  }
  import2.MyInjectableTypeAnnotation get _MyInjectableTypeAnnotation_0_3 {
    dbg(0, 0, 0);
    if ((this.__MyInjectableTypeAnnotation_0_3 == null)) {
      (__MyInjectableTypeAnnotation_0_3 =
          new import2.MyInjectableTypeAnnotation());
    }
    return this.__MyInjectableTypeAnnotation_0_3;
  }

  dynamic get _MyUseFactory_0_4 {
    dbg(0, 0, 0);
    if ((this.__MyUseFactory_0_4 == null)) {
      (__MyUseFactory_0_4 = import2.ProvidersComponent
          .createService(this.injectorGet(import10.NgZone, this.parentIndex)));
    }
    return this.__MyUseFactory_0_4;
  }

  import2.MyUseClass get _MyUseClass_0_5 {
    dbg(0, 0, 0);
    if ((this.__MyUseClass_0_5 == null)) {
      (__MyUseClass_0_5 = new import2.MyUseClass());
    }
    return this.__MyUseClass_0_5;
  }

  import2.MyUseValue get _MyUseValue_0_8 {
    dbg(0, 0, 0);
    if ((this.__MyUseValue_0_8 == null)) {
      (__MyUseValue_0_8 = const import2.MyUseValue('Matan'));
    }
    return this.__MyUseValue_0_8;
  }

  String get _const_OpaqueToken__useValueString___0_9 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueString___0_9 == null)) {
      (__const_OpaqueToken__useValueString___0_9 = 'foo');
    }
    return this.__const_OpaqueToken__useValueString___0_9;
  }

  List<dynamic> get _MyMulti_0_10 {
    dbg(0, 0, 0);
    if ((this.__MyMulti_0_10 == null)) {
      (__MyMulti_0_10 = [null]);
    }
    return this.__MyMulti_0_10;
  }

  List<dynamic> get _const_OpaqueToken__useValueList___0_11 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueList___0_11 == null)) {
      (__const_OpaqueToken__useValueList___0_11 = const [
        const import2.MyUseValue('Andrew'),
        const import2.MyUseValue('Matan'),
        const import2.MyUseValue.named()
      ]);
    }
    return this.__const_OpaqueToken__useValueList___0_11;
  }

  Map<String, dynamic> get _const_OpaqueToken__useValueMap___0_12 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useValueMap___0_12 == null)) {
      (__const_OpaqueToken__useValueMap___0_12 = const {
        'Andrew': const import2.MyUseValue('Andrew'),
        'Matan': const import2.MyUseValue('Matan')
      });
    }
    return this.__const_OpaqueToken__useValueMap___0_12;
  }

  dynamic get _const_OpaqueToken__useEnums___0_13 {
    dbg(0, 0, 0);
    if ((this.__const_OpaqueToken__useEnums___0_13 == null)) {
      (__const_OpaqueToken__useEnums___0_13 = import2.MyEnum.first);
    }
    return this.__const_OpaqueToken__useEnums___0_13;
  }

  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = viewFactory_ProvidersComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _ProvidersComponent_0_2 = new import2.ProvidersComponent();
    _compView_0.create(_ProvidersComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _ProvidersComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.ProvidersComponent) && (0 == nodeIndex))) {
      return _ProvidersComponent_0_2;
    }
    if ((identical(token, import2.MyInjectableTypeAnnotation) &&
        (0 == nodeIndex))) {
      return _MyInjectableTypeAnnotation_0_3;
    }
    if ((identical(token, import2.MyUseFactory) && (0 == nodeIndex))) {
      return _MyUseFactory_0_4;
    }
    if ((((identical(token, import2.MyUseClass) ||
                identical(token, import2.MyUseExisting)) ||
            identical(token, import2.MyUseExistingNested)) &&
        (0 == nodeIndex))) {
      return _MyUseClass_0_5;
    }
    if ((identical(token, import2.MyUseValue) && (0 == nodeIndex))) {
      return _MyUseValue_0_8;
    }
    if ((identical(token, const OpaqueToken('useValueString')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueString___0_9;
    }
    if ((identical(token, import2.MyMulti) && (0 == nodeIndex))) {
      return _MyMulti_0_10;
    }
    if ((identical(token, const OpaqueToken('useValueList')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueList___0_11;
    }
    if ((identical(token, const OpaqueToken('useValueMap')) &&
        (0 == nodeIndex))) {
      return _const_OpaqueToken__useValueMap___0_12;
    }
    if ((identical(token, const OpaqueToken('useEnums')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__useEnums___0_13;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_ProvidersComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewProvidersComponentHost0(parentView, parentIndex);
}

const ComponentFactory ProvidersComponentNgFactory = const ComponentFactory(
    'providers',
    viewFactory_ProvidersComponentHost0,
    import2.ProvidersComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  ProvidersComponent,
  const <dynamic>[],
  MyInjectableTypeAnnotation,
  const <dynamic>[const Injectable()]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      ProvidersComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[ProvidersComponentNgFactory],
          const [], () => new ProvidersComponent()));
  _ngRef.reflector.registerType(
      MyInjectableTypeAnnotation,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new MyInjectableTypeAnnotation()));
  _i1.initReflector();
}
