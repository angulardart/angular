// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'injectables.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'dart:html' as html;
import 'package:angular2/angular2.template.dart' as _i1;
export 'injectables.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'injectables.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_InjectableComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InjectableComponent0 = [null, null];

class ViewInjectableComponent0
    extends DebugAppView<import2.InjectableComponent> {
  DivElement _el_0;
  static RenderComponentType renderType;
  ViewInjectableComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InjectableComponent0) {
    rootEl = document.createElement('test-injectables');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/injectables.dart class InjectableComponent - inline template',
        ViewEncapsulation.None,
        styles_InjectableComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    dbgElm(_el_0, 0, 0, 0);
    Text _text_1 = new Text('Inject!');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 5);
    init(const [], const [], [_el_0, _text_1]);
    return null;
  }
}

AppView<import2.InjectableComponent> viewFactory_InjectableComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponent0(parentView, parentIndex);
}

const List<dynamic> styles_InjectableComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_InjectableComponentHost0 = [
  new StaticNodeDebugInfo(
      [
        const OpaqueToken('test'),
        import2.InjectableComponent,
        import2.SomeDep,
        import2.BaseService
      ],
      import2.InjectableComponent,
      <String, dynamic>{})
];

class ViewInjectableComponentHost0 extends DebugAppView<dynamic> {
  AppView<import2.InjectableComponent> _compView_0;
  dynamic _const_OpaqueToken__test___0_2;
  import2.InjectableComponent _InjectableComponent_0_3;
  dynamic __SomeDep_0_4;
  dynamic __BaseService_0_5;
  static RenderComponentType renderType;
  ViewInjectableComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_InjectableComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_InjectableComponentHost);
    setupComponentType(renderType);
  }
  dynamic get _SomeDep_0_4 {
    dbg(0, 0, 0);
    if ((this.__SomeDep_0_4 == null)) {
      (__SomeDep_0_4 =
          import2.createLinkedHashMap(this._const_OpaqueToken__test___0_2));
    }
    return this.__SomeDep_0_4;
  }

  dynamic get _BaseService_0_5 {
    dbg(0, 0, 0);
    if ((this.__BaseService_0_5 == null)) {
      (__BaseService_0_5 = import2.createLinkedHashMap(
          this._SomeDep_0_4,
          this.injectorGet(import2.SomeDep, this.parentIndex),
          this._SomeDep_0_4));
    }
    return this.__BaseService_0_5;
  }

  ComponentRef build() {
    _compView_0 = viewFactory_InjectableComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _const_OpaqueToken__test___0_2 =
        import2.injectableFactory(this.injectorGet(Window, parentIndex));
    _InjectableComponent_0_3 = new import2.InjectableComponent(
        null,
        this.injectorGet(import2.InjectableService, parentIndex, null),
        _const_OpaqueToken__test___0_2);
    _compView_0.create(_InjectableComponent_0_3, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _InjectableComponent_0_3);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, const OpaqueToken('test')) && (0 == nodeIndex))) {
      return _const_OpaqueToken__test___0_2;
    }
    if ((identical(token, import2.InjectableComponent) && (0 == nodeIndex))) {
      return _InjectableComponent_0_3;
    }
    if ((identical(token, import2.SomeDep) && (0 == nodeIndex))) {
      return _SomeDep_0_4;
    }
    if ((identical(token, import2.BaseService) && (0 == nodeIndex))) {
      return _BaseService_0_5;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInjectableComponentHost0(parentView, parentIndex);
}

const ComponentFactory InjectableComponentNgFactory = const ComponentFactory(
    'test-injectables',
    viewFactory_InjectableComponentHost0,
    import2.InjectableComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  injectableFactory,
  const <dynamic>[const Injectable()],
  InjectableComponent,
  const <dynamic>[],
  SomeDep,
  const <dynamic>[const Injectable()],
  BaseService,
  const <dynamic>[const Injectable()],
  InjectableService,
  const <dynamic>[const Injectable()]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerFunction(
      injectableFactory,
      new _ngRef.ReflectionInfo(const <dynamic>[
        const Injectable()
      ], const [
        const <dynamic>[html.Window]
      ]));
  _ngRef.reflector.registerType(
      InjectableComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[
            InjectableComponentNgFactory
          ],
          const [
            const <dynamic>[
              BaseService,
              const Attribute("baseService"),
              optional
            ],
            const <dynamic>[InjectableService, const Optional()],
            const <dynamic>[bool, const Inject(testToken)]
          ],
          (BaseService service, InjectableService injectableService,
                  bool isTest) =>
              new InjectableComponent(service, injectableService, isTest)));
  _ngRef.reflector.registerType(
      SomeDep,
      new _ngRef.ReflectionInfo(
          const <dynamic>[const Injectable()], const [], () => new SomeDep()));
  _ngRef.reflector.registerType(
      BaseService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new BaseService()));
  _ngRef.reflector.registerType(
      InjectableService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new InjectableService()));
  _i1.initReflector();
}
