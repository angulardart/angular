// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'inherited_lifecycle_hooks.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'inherited_lifecycle_hooks.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'inherited_lifecycle_hooks.dart' as import2;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_LifecycleHooksComponent = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponent0 = [];

class ViewLifecycleHooksComponent0
    extends DebugAppView<import2.LifecycleHooksComponent> {
  static RenderComponentType renderType;
  ViewLifecycleHooksComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponent0) {
    rootEl = document.createElement('lifecycle-hooks');
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/inherited_lifecycle_hooks.dart class LifecycleHooksComponent - inline template',
        ViewEncapsulation.None,
        styles_LifecycleHooksComponent);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final import2.LifecycleHooksComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    init(const [], const [], []);
    return null;
  }
}

AppView<import2.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewLifecycleHooksComponent0(parentView, parentIndex);
}

const List<dynamic> styles_LifecycleHooksComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponentHost0 = [
  new StaticNodeDebugInfo([import2.LifecycleHooksComponent],
      import2.LifecycleHooksComponent, <String, dynamic>{})
];

class ViewLifecycleHooksComponentHost0 extends DebugAppView<dynamic> {
  ViewLifecycleHooksComponent0 _compView_0;
  import2.LifecycleHooksComponent _LifecycleHooksComponent_0_2;
  static RenderComponentType renderType;
  ViewLifecycleHooksComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_LifecycleHooksComponentHost);
    setupComponentType(renderType);
  }
  @override
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewLifecycleHooksComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _LifecycleHooksComponent_0_2 = new import2.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _LifecycleHooksComponent_0_2);
  }

  @override
  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.LifecycleHooksComponent) &&
        (0 == nodeIndex))) {
      return _LifecycleHooksComponent_0_2;
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = identical(this.cdState, ChangeDetectorState.NeverChecked);
    final _ctx = ctx;
    if ((firstCheck && !import8.AppViewUtils.throwOnChanges)) {
      _LifecycleHooksComponent_0_2.ngOnInit();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      _LifecycleHooksComponent_0_2.ngDoCheck();
    }
    if (!import8.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (firstCheck) {
        _LifecycleHooksComponent_0_2.ngAfterContentInit();
      }
      _LifecycleHooksComponent_0_2.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if (!import8.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (firstCheck) {
        _LifecycleHooksComponent_0_2.ngAfterViewInit();
      }
      _LifecycleHooksComponent_0_2.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    _compView_0.destroy();
    dbg(0, 0, 0);
    _LifecycleHooksComponent_0_2.ngOnDestroy();
  }
}

AppView viewFactory_LifecycleHooksComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewLifecycleHooksComponentHost0(parentView, parentIndex);
}

const ComponentFactory LifecycleHooksComponentNgFactory =
    const ComponentFactory(
        'lifecycle-hooks',
        viewFactory_LifecycleHooksComponentHost0,
        import2.LifecycleHooksComponent,
        _METADATA);
const _METADATA = const <dynamic>[LifecycleHooksComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      LifecycleHooksComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[LifecycleHooksComponentNgFactory],
          const [],
          () => new LifecycleHooksComponent()));
  _i1.initReflector();
}
