// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'injectables.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.dart';
export 'injectables.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'injectables.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/di/injector.dart' as import4;
import 'package:angular2/src/core/linker/view_container.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/src/core/metadata/view.dart' as import9;
import 'package:angular2/src/core/linker/component_factory.dart' as import10;

const List<dynamic> styles_InjectableComponent = const [];
RenderComponentType renderType_InjectableComponent;

class ViewInjectableComponent0 extends AppView<import2.InjectableComponent> {
  Element _el_0;
  ViewInjectableComponent0(
      import4.Injector parentInjector, ViewContainer declarationEl)
      : super(
            ViewInjectableComponent0,
            renderType_InjectableComponent,
            import6.ViewType.COMPONENT,
            {},
            parentInjector,
            declarationEl,
            ChangeDetectionStrategy.CheckAlways);
  ViewContainer createInternal(dynamic rootSelector) {
    final Node parentRenderNode =
        initViewRoot(this.declarationViewContainer.nativeElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Inject!');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView viewFactory_InjectableComponent0(
    import4.Injector parentInjector, ViewContainer declarationEl) {
  if (identical(renderType_InjectableComponent, null)) {
    (renderType_InjectableComponent = import8.appViewUtils
        .createRenderComponentType(
            '', 0, import9.ViewEncapsulation.None, styles_InjectableComponent));
  }
  return new ViewInjectableComponent0(parentInjector, declarationEl);
}

const List<dynamic> styles_InjectableComponentHost = const [];
RenderComponentType renderType_InjectableComponentHost;

class ViewInjectableComponentHost0 extends AppView<dynamic> {
  Element _el_0;
  ViewContainer _appEl_0;
  AppView<import2.InjectableComponent> _compView_0;
  import2.InjectableComponent _InjectableComponent_0_3;
  ViewInjectableComponentHost0(
      import4.Injector parentInjector, ViewContainer declarationEl)
      : super(
            ViewInjectableComponentHost0,
            renderType_InjectableComponentHost,
            import6.ViewType.HOST,
            {},
            parentInjector,
            declarationEl,
            ChangeDetectionStrategy.CheckAlways);
  ViewContainer createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-injectables', rootSelector, null);
    _appEl_0 = new ViewContainer(0, null, this, _el_0);
    _compView_0 = viewFactory_InjectableComponent0(this.injector(0), _appEl_0);
    _InjectableComponent_0_3 = new import2.InjectableComponent(
        null, this.parentInjector.get(InjectableService, null));
    _appEl_0.initComponent(_InjectableComponent_0_3, _compView_0);
    _compView_0.createComp(projectableNodes, null);
    init([_el_0], [_el_0], []);
    return _appEl_0;
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.InjectableComponent) &&
        (0 == requestNodeIndex))) {
      return _InjectableComponent_0_3;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InjectableComponentHost0(
    import4.Injector parentInjector, ViewContainer declarationEl) {
  if (identical(renderType_InjectableComponentHost, null)) {
    (renderType_InjectableComponentHost = import8.appViewUtils
        .createRenderComponentType('', 0, import9.ViewEncapsulation.Emulated,
            styles_InjectableComponentHost));
  }
  return new ViewInjectableComponentHost0(parentInjector, declarationEl);
}

const import10.ComponentFactory InjectableComponentNgFactory =
    const import10.ComponentFactory(
        'test-injectables',
        viewFactory_InjectableComponentHost0,
        import2.InjectableComponent,
        _METADATA);
const _METADATA = const <dynamic>[
  InjectableComponent,
  const <dynamic>[],
  BaseService,
  const <dynamic>[const Injectable()],
  InjectableService,
  const <dynamic>[const Injectable()]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      InjectableComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[],
          const [
            const <dynamic>[BaseService, Attribute, optional],
            const <dynamic>[InjectableService, Optional]
          ],
          (BaseService service, InjectableService injectableService) =>
              new InjectableComponent(service, injectableService)));
  _ngRef.reflector.registerType(
      BaseService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new BaseService()));
  _ngRef.reflector.registerType(
      InjectableService,
      new _ngRef.ReflectionInfo(const <dynamic>[const Injectable()], const [],
          () => new InjectableService()));
}
