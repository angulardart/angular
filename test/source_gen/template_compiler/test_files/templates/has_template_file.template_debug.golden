// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'has_template_file.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'has_template_file.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'has_template_file.dart' as import3;
import 'dart:html';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/angular2.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import9;

const List<dynamic> styles_HasTemplateFileComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_HasTemplateFileComponent0 =
    const [null, null, null];
RenderComponentType renderType_HasTemplateFileComponent;

class ViewHasTemplateFileComponent0
    extends DebugAppView<import3.HasTemplateFileComponent> {
  Element _el_0;
  ViewHasTemplateFileComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewHasTemplateFileComponent0,
            renderType_HasTemplateFileComponent,
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasTemplateFileComponent0);
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    dbgElm(_el_0, 0, 0, 0);
    Text _text_1 = new Text('Has Template File!');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 5);
    Text _text_2 = new Text('\n');
    parentRenderNode.append(_text_2);
    dbgElm(_text_2, 2, 0, 29);
    init([], [_el_0, _text_1, _text_2], []);
    return null;
  }
}

AppView<import3.HasTemplateFileComponent> viewFactory_HasTemplateFileComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  if (identical(renderType_HasTemplateFileComponent, null)) {
    (renderType_HasTemplateFileComponent = import9.appViewUtils
        .createRenderComponentType(
            'asset:angular2/test/source_gen/template_compiler/test_files/templates/has_template_file.html',
            0,
            ViewEncapsulation.None,
            styles_HasTemplateFileComponent));
  }
  return new ViewHasTemplateFileComponent0(
      parentView, parentIndex, parentElement);
}

const List<dynamic> styles_HasTemplateFileComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_HasTemplateFileComponentHost0 =
    const [
  const StaticNodeDebugInfo(const [import3.HasTemplateFileComponent],
      import3.HasTemplateFileComponent, const <String, dynamic>{})
];
RenderComponentType renderType_HasTemplateFileComponentHost;

class ViewHasTemplateFileComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import3.HasTemplateFileComponent> _compView_0;
  import3.HasTemplateFileComponent _HasTemplateFileComponent_0_2;
  ViewHasTemplateFileComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewHasTemplateFileComponentHost0,
            renderType_HasTemplateFileComponentHost,
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_HasTemplateFileComponentHost0);
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement(
        'has-template-file', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_HasTemplateFileComponent0(this, 0, _el_0);
    _HasTemplateFileComponent_0_2 = new import3.HasTemplateFileComponent();
    _compView_0.create(_HasTemplateFileComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _HasTemplateFileComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import3.HasTemplateFileComponent) &&
        (0 == requestNodeIndex))) {
      return _HasTemplateFileComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_HasTemplateFileComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  if (identical(renderType_HasTemplateFileComponentHost, null)) {
    (renderType_HasTemplateFileComponentHost = import9.appViewUtils
        .createRenderComponentType('', 0, ViewEncapsulation.Emulated,
            styles_HasTemplateFileComponentHost));
  }
  return new ViewHasTemplateFileComponentHost0(
      parentView, parentIndex, parentElement);
}

const ComponentFactory HasTemplateFileComponentNgFactory =
    const ComponentFactory(
        'has-template-file',
        viewFactory_HasTemplateFileComponentHost0,
        import3.HasTemplateFileComponent,
        _METADATA);
const _METADATA = const <dynamic>[HasTemplateFileComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      HasTemplateFileComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new HasTemplateFileComponent()));
}
