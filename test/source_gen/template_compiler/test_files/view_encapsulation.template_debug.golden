// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'view_encapsulation.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'view_encapsulation.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'view_encapsulation.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import6;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_EmulatedComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_EmulatedComponent0 = const [
  null,
  null
];

class ViewEmulatedComponent0 extends DebugAppView<import2.EmulatedComponent> {
  Element _el_0;
  static RenderComponentType renderType;
  ViewEmulatedComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewEmulatedComponent0,
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_EmulatedComponent0) {
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/view_encapsulation.dart class EmulatedComponent - inline template',
        0,
        ViewEncapsulation.None,
        styles_EmulatedComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    dbgElm(_el_0, 0, 0, 0);
    Text _text_1 = new Text('Emulated');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 5);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import2.EmulatedComponent> viewFactory_EmulatedComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewEmulatedComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_EmulatedComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_EmulatedComponentHost0 = const [
  const StaticNodeDebugInfo(const [import2.EmulatedComponent],
      import2.EmulatedComponent, const <String, dynamic>{})
];

class ViewEmulatedComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import2.EmulatedComponent> _compView_0;
  import2.EmulatedComponent _EmulatedComponent_0_2;
  static RenderComponentType renderType;
  ViewEmulatedComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewEmulatedComponentHost0,
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_EmulatedComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_EmulatedComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('Emulated', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_EmulatedComponent0(this, 0, _el_0);
    _EmulatedComponent_0_2 = new import2.EmulatedComponent();
    _compView_0.create(_EmulatedComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _EmulatedComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.EmulatedComponent) &&
        (0 == requestNodeIndex))) {
      return _EmulatedComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_EmulatedComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewEmulatedComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory EmulatedComponentNgFactory = const ComponentFactory(
    'Emulated',
    viewFactory_EmulatedComponentHost0,
    import2.EmulatedComponent,
    _METADATA);
const List<dynamic> styles_NativeComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_NativeComponent0 = const [
  null,
  null
];

class ViewNativeComponent0 extends DebugAppView<import2.NativeComponent> {
  Element _el_0;
  static RenderComponentType renderType;
  ViewNativeComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewNativeComponent0,
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_NativeComponent0) {
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/view_encapsulation.dart class NativeComponent - inline template',
        0,
        ViewEncapsulation.Native,
        styles_NativeComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = createViewShadowRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    dbgElm(_el_0, 0, 0, 0);
    Text _text_1 = new Text('Native');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 5);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import2.NativeComponent> viewFactory_NativeComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewNativeComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_NativeComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_NativeComponentHost0 = const [
  const StaticNodeDebugInfo(const [import2.NativeComponent],
      import2.NativeComponent, const <String, dynamic>{})
];

class ViewNativeComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import2.NativeComponent> _compView_0;
  import2.NativeComponent _NativeComponent_0_2;
  static RenderComponentType renderType;
  ViewNativeComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewNativeComponentHost0,
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_NativeComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_NativeComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('Native', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_NativeComponent0(this, 0, _el_0);
    _NativeComponent_0_2 = new import2.NativeComponent();
    _compView_0.create(_NativeComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _NativeComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.NativeComponent) &&
        (0 == requestNodeIndex))) {
      return _NativeComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_NativeComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewNativeComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory NativeComponentNgFactory = const ComponentFactory(
    'Native',
    viewFactory_NativeComponentHost0,
    import2.NativeComponent,
    _METADATA);
const List<dynamic> styles_NoneComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_NoneComponent0 = const [
  null,
  null
];

class ViewNoneComponent0 extends DebugAppView<import2.NoneComponent> {
  Element _el_0;
  static RenderComponentType renderType;
  ViewNoneComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewNoneComponent0,
            import6.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_NoneComponent0) {
    renderType ??= import8.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/view_encapsulation.dart class NoneComponent - inline template',
        0,
        ViewEncapsulation.None,
        styles_NoneComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    dbgElm(_el_0, 0, 0, 0);
    Text _text_1 = new Text('None');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 5);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import2.NoneComponent> viewFactory_NoneComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewNoneComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_NoneComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_NoneComponentHost0 = const [
  const StaticNodeDebugInfo(const [import2.NoneComponent],
      import2.NoneComponent, const <String, dynamic>{})
];

class ViewNoneComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import2.NoneComponent> _compView_0;
  import2.NoneComponent _NoneComponent_0_2;
  static RenderComponentType renderType;
  ViewNoneComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewNoneComponentHost0,
            import6.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_NoneComponentHost0) {
    renderType ??= import8.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_NoneComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('None', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_NoneComponent0(this, 0, _el_0);
    _NoneComponent_0_2 = new import2.NoneComponent();
    _compView_0.create(_NoneComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _NoneComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.NoneComponent) && (0 == requestNodeIndex))) {
      return _NoneComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_NoneComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewNoneComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory NoneComponentNgFactory = const ComponentFactory(
    'None', viewFactory_NoneComponentHost0, import2.NoneComponent, _METADATA);
const _METADATA = const <dynamic>[
  EmulatedComponent,
  const <dynamic>[],
  NativeComponent,
  const <dynamic>[],
  NoneComponent,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      EmulatedComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[EmulatedComponentNgFactory],
          const [], () => new EmulatedComponent()));
  _ngRef.reflector.registerType(
      NativeComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[NativeComponentNgFactory],
          const [], () => new NativeComponent()));
  _ngRef.reflector.registerType(
      NoneComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[NoneComponentNgFactory],
          const [], () => new NoneComponent()));
}
