// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'host.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'host.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'host.dart' as import1;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import3;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import5;
import 'package:angular2/angular2.dart';
import 'dart:html';

const List<dynamic> styles_HostComponent = const [];

class ViewHostComponent0 extends AppView<import1.HostComponent> {
  static RenderComponentType renderType;
  ViewHostComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(ViewHostComponent0, import3.ViewType.COMPONENT, {}, parentView,
            parentIndex, parentElement, ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import5.appViewUtils
        .createRenderType('', ViewEncapsulation.None, styles_HostComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    init([], [], []);
    return null;
  }
}

AppView<import1.HostComponent> viewFactory_HostComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewHostComponent0(parentView, parentIndex, parentElement);
}

const List<dynamic> styles_HostComponentHost = const [];

class ViewHostComponentHost0 extends AppView<dynamic> {
  HtmlElement _el_0;
  AppView<import1.HostComponent> _compView_0;
  import1.HostComponent _HostComponent_0_2;
  static RenderComponentType renderType;
  ViewHostComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(ViewHostComponentHost0, import3.ViewType.HOST, {}, parentView,
            parentIndex, parentElement, ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import5.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_HostComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('host', rootSelector, null);
    createAttr(_el_0, 'aria-title', 'title');
    createAttr(_el_0, 'class.is-disabled', 'isDisabled');
    createAttr(_el_0, 'title', 'title');
    _compView_0 = viewFactory_HostComponent0(this, 0, _el_0);
    _HostComponent_0_2 = new import1.HostComponent();
    _compView_0.create(_HostComponent_0_2, projectableNodes, null);
    listen(_el_0, 'keydown',
        _compView_0.eventHandler0(_HostComponent_0_2.onKeyDown));
    listen(
        _el_0, 'click', _compView_0.eventHandler1(_HostComponent_0_2.onClick));
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _HostComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.HostComponent) && (0 == requestNodeIndex))) {
      return _HostComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_HostComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewHostComponentHost0(parentView, parentIndex, parentElement);
}

const ComponentFactory HostComponentNgFactory = const ComponentFactory(
    'host', viewFactory_HostComponentHost0, import1.HostComponent, _METADATA);
const _METADATA = const <dynamic>[HostComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      HostComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[HostComponentNgFactory],
          const [], () => new HostComponent()));
  _i1.initReflector();
}
