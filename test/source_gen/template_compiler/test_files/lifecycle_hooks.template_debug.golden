// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'lifecycle_hooks.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'lifecycle_hooks.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'lifecycle_hooks.dart' as import2;
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import7;
import 'package:angular2/angular2.dart';
import 'dart:html';

const List<dynamic> styles_LifecycleHooksComponent = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponent0 =
    const [];

class ViewLifecycleHooksComponent0
    extends DebugAppView<import2.LifecycleHooksComponent> {
  static RenderComponentType renderType;
  ViewLifecycleHooksComponent0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewLifecycleHooksComponent0,
            import5.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponent0) {
    renderType ??= import7.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/lifecycle_hooks.dart class LifecycleHooksComponent - inline template',
        0,
        ViewEncapsulation.None,
        styles_LifecycleHooksComponent);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    init([], [], []);
    return null;
  }
}

AppView<import2.LifecycleHooksComponent> viewFactory_LifecycleHooksComponent0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewLifecycleHooksComponent0(
      parentView, parentIndex, parentElement);
}

const List<dynamic> styles_LifecycleHooksComponentHost = const [];
const List<StaticNodeDebugInfo> nodeDebugInfos_LifecycleHooksComponentHost0 =
    const [
  const StaticNodeDebugInfo(const [import2.LifecycleHooksComponent],
      import2.LifecycleHooksComponent, const <String, dynamic>{})
];

class ViewLifecycleHooksComponentHost0 extends DebugAppView<dynamic> {
  Element _el_0;
  AppView<import2.LifecycleHooksComponent> _compView_0;
  import2.LifecycleHooksComponent _LifecycleHooksComponent_0_2;
  static RenderComponentType renderType;
  ViewLifecycleHooksComponentHost0(
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewLifecycleHooksComponentHost0,
            import5.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_LifecycleHooksComponentHost0) {
    renderType ??= import7.appViewUtils.createRenderType(
        '', 0, ViewEncapsulation.Emulated, styles_LifecycleHooksComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement(
        'lifecycle-hooks', rootSelector, dbg(0, 0, 0));
    _compView_0 = viewFactory_LifecycleHooksComponent0(this, 0, _el_0);
    _LifecycleHooksComponent_0_2 = new import2.LifecycleHooksComponent();
    _compView_0.create(_LifecycleHooksComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _LifecycleHooksComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.LifecycleHooksComponent) &&
        (0 == requestNodeIndex))) {
      return _LifecycleHooksComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    if ((identical(this.cdState, ChangeDetectorState.NeverChecked) &&
        !import7.AppViewUtils.throwOnChanges)) {
      _LifecycleHooksComponent_0_2.ngOnInit();
    }
    if (!import7.AppViewUtils.throwOnChanges) {
      _LifecycleHooksComponent_0_2.ngDoCheck();
    }
    if (!import7.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (identical(this.cdState, ChangeDetectorState.NeverChecked)) {
        _LifecycleHooksComponent_0_2.ngAfterContentInit();
      }
      _LifecycleHooksComponent_0_2.ngAfterContentChecked();
    }
    _compView_0.detectChanges();
    if (!import7.AppViewUtils.throwOnChanges) {
      dbg(0, 0, 0);
      if (identical(this.cdState, ChangeDetectorState.NeverChecked)) {
        _LifecycleHooksComponent_0_2.ngAfterViewInit();
      }
      _LifecycleHooksComponent_0_2.ngAfterViewChecked();
    }
  }

  void destroyInternal() {
    _compView_0.destroy();
    dbg(0, 0, 0);
    _LifecycleHooksComponent_0_2.ngOnDestroy();
  }
}

AppView viewFactory_LifecycleHooksComponentHost0(
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  return new ViewLifecycleHooksComponentHost0(
      parentView, parentIndex, parentElement);
}

const ComponentFactory LifecycleHooksComponentNgFactory =
    const ComponentFactory(
        'lifecycle-hooks',
        viewFactory_LifecycleHooksComponentHost0,
        import2.LifecycleHooksComponent,
        _METADATA);
const _METADATA = const <dynamic>[LifecycleHooksComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      LifecycleHooksComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[LifecycleHooksComponentNgFactory],
          const [],
          () => new LifecycleHooksComponent(),
          const <dynamic>[
            OnDestroy,
            OnChanges,
            OnInit,
            AfterContentChecked,
            AfterContentInit,
            AfterViewChecked,
            AfterViewInit,
            DoCheck
          ]));
}
