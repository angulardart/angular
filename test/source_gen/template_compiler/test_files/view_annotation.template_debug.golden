// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile type_annotate_public_apis
// @ignoreProblemForFile STRONG_MODE_DOWN_CAST_COMPOSITE
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'view_annotation.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'view_annotation.dart';
import 'package:angular2/src/debug/debug_context.dart';
import 'package:angular2/src/core/linker/template_ref.dart';
import 'package:angular2/src/common/directives/ng_if.dart';
import 'package:angular2/src/debug/debug_app_view.dart';
import 'view_annotation.dart' as import4;
import 'package:angular2/src/core/linker/view_container.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import8;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'dart:html';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import11;
import 'package:angular2/angular2.dart';

const List<dynamic> styles_TestFooComponent = const [
  'div._ngcontent-%COMP% { font-size:10px; }'
];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent0 = [
  new StaticNodeDebugInfo([TemplateRef, NgIf], null, <String, dynamic>{})
];

class ViewTestFooComponent0 extends DebugAppView<import4.TestFooComponent> {
  ViewContainer _appEl_0;
  NgIf _NgIf_0_5;
  static RenderComponentType renderType;
  ViewTestFooComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import8.ViewType.COMPONENT,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent0) {
    rootEl = document.createElement('test-foo');
    renderType ??= import11.appViewUtils.createRenderType(
        'asset:angular2/test/source_gen/template_compiler/test_files/view_annotation.dart class TestFooComponent - inline template',
        ViewEncapsulation.Emulated,
        styles_TestFooComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import4.TestFooComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var _anchor_0 = ngAnchor.clone(false);
    parentRenderNode.append(_anchor_0);
    dbgElm(_anchor_0, 0, 0, 0);
    _appEl_0 = new ViewContainer(0, null, this, _anchor_0);
    TemplateRef _TemplateRef_0_4 =
        new TemplateRef(_appEl_0, viewFactory_TestFooComponent1);
    _NgIf_0_5 = new NgIf(_appEl_0, _TemplateRef_0_4);
    init(const [], const [], [_anchor_0]);
    return null;
  }

  void detectChangesInternal() {
    final import4.TestFooComponent _ctx = ctx;
    dbg(0, 0, 5);
    _NgIf_0_5.ngIf = true;
    _appEl_0.detectChangesInNestedViews();
  }

  void destroyInternal() {
    _appEl_0.destroyNestedViews();
  }
}

AppView<import4.TestFooComponent> viewFactory_TestFooComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent0(parentView, parentIndex);
}

List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponent1 = [null, null];

class ViewTestFooComponent1 extends DebugAppView<import4.TestFooComponent> {
  DivElement _el_0;
  ViewTestFooComponent1(AppView<dynamic> parentView, num parentIndex)
      : super(
            import8.ViewType.EMBEDDED,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponent1) {
    componentType = ViewTestFooComponent0.renderType;
  }
  ComponentRef build() {
    final import4.TestFooComponent _ctx = ctx;
    var doc = document;
    _el_0 = doc.createElement('div');
    dbgElm(_el_0, 0, 0, 0);
    addShimC(_el_0);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    dbgElm(_text_1, 1, 0, 18);
    init([_el_0], const [], [_el_0, _text_1]);
    return null;
  }
}

AppView<import4.TestFooComponent> viewFactory_TestFooComponent1(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponent1(parentView, parentIndex);
}

const List<dynamic> styles_TestFooComponentHost = const [];
List<StaticNodeDebugInfo> nodeDebugInfos_TestFooComponentHost0 = [
  new StaticNodeDebugInfo(
      [import4.TestFooComponent], import4.TestFooComponent, <String, dynamic>{})
];

class ViewTestFooComponentHost0 extends DebugAppView<dynamic> {
  AppView<import4.TestFooComponent> _compView_0;
  import4.TestFooComponent _TestFooComponent_0_2;
  static RenderComponentType renderType;
  ViewTestFooComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(
            import8.ViewType.HOST,
            {},
            parentView,
            parentIndex,
            ChangeDetectionStrategy.CheckAlways,
            nodeDebugInfos_TestFooComponentHost0) {
    renderType ??= import11.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_TestFooComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = viewFactory_TestFooComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    dbgIdx(rootEl, 0);
    _TestFooComponent_0_2 = new import4.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes);
    init([rootEl], const [], [rootEl]);
    return new ComponentRef(0, this, rootEl, _TestFooComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import4.TestFooComponent) && (0 == nodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewTestFooComponentHost0(parentView, parentIndex);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import4.TestFooComponent,
    _METADATA);
const _METADATA = const <dynamic>[TestFooComponent, const <dynamic>[]];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(const <dynamic>[TestFooComponentNgFactory],
          const [], () => new TestFooComponent()));
  _i1.initReflector();
}
