// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

// @ignoreProblemForFile annotate_overrides
// @ignoreProblemForFile cancel_subscriptions
// @ignoreProblemForFile constant_identifier_names
// @ignoreProblemForFile non_constant_identifier_names
// @ignoreProblemForFile implementation_imports
// @ignoreProblemForFile library_prefixes
// @ignoreProblemForFile UNUSED_IMPORT
// @ignoreProblemForFile UNUSED_SHOWN_NAME
// @ignoreProblemForFile UNUSED_LOCAL_VARIABLE
import 'interpolation.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
import 'package:angular2/angular2.template.dart' as _i1;
export 'interpolation.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'interpolation.dart' as import1;
import 'dart:html';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/view_type.dart' as import4;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import6;
import 'package:angular2/angular2.dart';
import 'package:angular2/src/facade/lang.dart' as import8;

const List<dynamic> styles_InterpolationComponent = const [];

class ViewInterpolationComponent0
    extends AppView<import1.InterpolationComponent> {
  DivElement _el_0;
  Text _text_1;
  var _expr_0;
  static RenderComponentType renderType;
  ViewInterpolationComponent0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('interpolation');
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_InterpolationComponent);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.InterpolationComponent _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    _text_1 = new Text('');
    _el_0.append(_text_1);
    Text _text_2 = new Text('\n');
    parentRenderNode.append(_text_2);
    init(const [], const []);
    return null;
  }

  void detectChangesInternal() {
    final import1.InterpolationComponent _ctx = ctx;
    final currVal_0 = import6.interpolate1('\n  ', _ctx.foo, '\n');
    if (!import8.looseIdentical(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.InterpolationComponent> viewFactory_InterpolationComponent0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponent0(parentView, parentIndex);
}

const List<dynamic> styles_InterpolationComponentHost = const [];

class ViewInterpolationComponentHost0 extends AppView<dynamic> {
  ViewInterpolationComponent0 _compView_0;
  import1.InterpolationComponent _InterpolationComponent_0_2;
  static RenderComponentType renderType;
  ViewInterpolationComponentHost0(AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.Emulated, styles_InterpolationComponentHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewInterpolationComponent0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponent_0_2 = new import1.InterpolationComponent();
    _compView_0.create(_InterpolationComponent_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(0, this, rootEl, _InterpolationComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.InterpolationComponent) &&
        (0 == nodeIndex))) {
      return _InterpolationComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InterpolationComponentHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponentHost0(parentView, parentIndex);
}

const ComponentFactory InterpolationComponentNgFactory = const ComponentFactory(
    'interpolation',
    viewFactory_InterpolationComponentHost0,
    import1.InterpolationComponent,
    _METADATA);
const List<dynamic> styles_InterpolationComponentNoWhitespace = const [];

class ViewInterpolationComponentNoWhitespace0
    extends AppView<import1.InterpolationComponentNoWhitespace> {
  DivElement _el_0;
  Text _text_1;
  var _expr_0;
  static RenderComponentType renderType;
  ViewInterpolationComponentNoWhitespace0(
      AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.COMPONENT, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    rootEl = document.createElement('interpolation');
    renderType ??= import6.appViewUtils.createRenderType(
        '', ViewEncapsulation.None, styles_InterpolationComponentNoWhitespace);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final import1.InterpolationComponentNoWhitespace _ctx = ctx;
    final HtmlElement parentRenderNode = initViewRoot(rootEl);
    var doc = document;
    _el_0 = createAndAppend(doc, 'div', parentRenderNode);
    _text_1 = new Text('');
    _el_0.append(_text_1);
    init(const [], const []);
    return null;
  }

  void detectChangesInternal() {
    final import1.InterpolationComponentNoWhitespace _ctx = ctx;
    final currVal_0 = import6.interpolate0(_ctx.foo);
    if (!import8.looseIdentical(_expr_0, currVal_0)) {
      _text_1.text = currVal_0;
      _expr_0 = currVal_0;
    }
  }
}

AppView<import1.InterpolationComponentNoWhitespace>
    viewFactory_InterpolationComponentNoWhitespace0(
        AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponentNoWhitespace0(parentView, parentIndex);
}

const List<dynamic> styles_InterpolationComponentNoWhitespaceHost = const [];

class ViewInterpolationComponentNoWhitespaceHost0 extends AppView<dynamic> {
  ViewInterpolationComponentNoWhitespace0 _compView_0;
  import1.InterpolationComponentNoWhitespace
      _InterpolationComponentNoWhitespace_0_2;
  static RenderComponentType renderType;
  ViewInterpolationComponentNoWhitespaceHost0(
      AppView<dynamic> parentView, num parentIndex)
      : super(import4.ViewType.HOST, {}, parentView, parentIndex,
            ChangeDetectionStrategy.CheckAlways) {
    renderType ??= import6.appViewUtils.createRenderType(
        '',
        ViewEncapsulation.Emulated,
        styles_InterpolationComponentNoWhitespaceHost);
    setupComponentType(renderType);
  }
  ComponentRef build() {
    final _ctx = ctx;
    _compView_0 = new ViewInterpolationComponentNoWhitespace0(this, 0);
    rootEl = _compView_0.rootEl;
    _InterpolationComponentNoWhitespace_0_2 =
        new import1.InterpolationComponentNoWhitespace();
    _compView_0.create(
        _InterpolationComponentNoWhitespace_0_2, projectableNodes);
    init([rootEl], const []);
    return new ComponentRef(
        0, this, rootEl, _InterpolationComponentNoWhitespace_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.InterpolationComponentNoWhitespace) &&
        (0 == nodeIndex))) {
      return _InterpolationComponentNoWhitespace_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    final _ctx = ctx;
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_InterpolationComponentNoWhitespaceHost0(
    AppView<dynamic> parentView, num parentIndex) {
  return new ViewInterpolationComponentNoWhitespaceHost0(
      parentView, parentIndex);
}

const ComponentFactory InterpolationComponentNoWhitespaceNgFactory =
    const ComponentFactory(
        'interpolation',
        viewFactory_InterpolationComponentNoWhitespaceHost0,
        import1.InterpolationComponentNoWhitespace,
        _METADATA);
const _METADATA = const <dynamic>[
  InterpolationComponent,
  const <dynamic>[],
  InterpolationComponentNoWhitespace,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      InterpolationComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[InterpolationComponentNgFactory],
          const [],
          () => new InterpolationComponent()));
  _ngRef.reflector.registerType(
      InterpolationComponentNoWhitespace,
      new _ngRef.ReflectionInfo(
          const <dynamic>[InterpolationComponentNoWhitespaceNgFactory],
          const [],
          () => new InterpolationComponentNoWhitespace()));
  _i1.initReflector();
}
