// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: TemplateGenerator
// Target: library
// **************************************************************************

import 'has_directives.dart';
import 'package:angular2/src/core/reflection/reflection.dart' as _ngRef;
export 'has_directives.dart';
import 'package:angular2/src/core/render/api.dart';
import 'package:angular2/src/core/linker/app_view.dart';
import 'has_directives.dart' as import2;
import 'dart:html';
import 'package:angular2/src/core/di/injector.dart' as import4;
import 'package:angular2/src/core/linker/view_type.dart' as import5;
import 'package:angular2/src/core/change_detection/change_detection.dart';
import 'package:angular2/angular2.dart';
import 'package:angular2/src/core/linker/app_view_utils.dart' as import8;

const List<dynamic> styles_TestFooComponent = const [];
RenderComponentType renderType_TestFooComponent;

class ViewTestFooComponent0 extends AppView<import2.TestFooComponent> {
  Element _el_0;
  ViewTestFooComponent0(import4.Injector parentInjector,
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponent0,
            renderType_TestFooComponent,
            import5.ViewType.COMPONENT,
            {},
            parentInjector,
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways);
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Foo');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import2.TestFooComponent> viewFactory_TestFooComponent0(
    import4.Injector parentInjector,
    AppView<dynamic> parentView,
    num parentIndex,
    dynamic parentElement) {
  if (identical(renderType_TestFooComponent, null)) {
    (renderType_TestFooComponent = import8.appViewUtils
        .createRenderComponentType(
            '', 0, ViewEncapsulation.None, styles_TestFooComponent));
  }
  return new ViewTestFooComponent0(
      parentInjector, parentView, parentIndex, parentElement);
}

const List<dynamic> styles_TestFooComponentHost = const [];
RenderComponentType renderType_TestFooComponentHost;

class ViewTestFooComponentHost0 extends AppView<dynamic> {
  Element _el_0;
  AppView<import2.TestFooComponent> _compView_0;
  import2.TestFooComponent _TestFooComponent_0_2;
  ViewTestFooComponentHost0(import4.Injector parentInjector,
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestFooComponentHost0,
            renderType_TestFooComponentHost,
            import5.ViewType.HOST,
            {},
            parentInjector,
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways);
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-foo', rootSelector, null);
    _compView_0 =
        viewFactory_TestFooComponent0(this.injector(0), this, 0, _el_0);
    _TestFooComponent_0_2 = new import2.TestFooComponent();
    _compView_0.create(_TestFooComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _TestFooComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.TestFooComponent) &&
        (0 == requestNodeIndex))) {
      return _TestFooComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestFooComponentHost0(import4.Injector parentInjector,
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  if (identical(renderType_TestFooComponentHost, null)) {
    (renderType_TestFooComponentHost = import8.appViewUtils
        .createRenderComponentType(
            '', 0, ViewEncapsulation.Emulated, styles_TestFooComponentHost));
  }
  return new ViewTestFooComponentHost0(
      parentInjector, parentView, parentIndex, parentElement);
}

const ComponentFactory TestFooComponentNgFactory = const ComponentFactory(
    'test-foo',
    viewFactory_TestFooComponentHost0,
    import2.TestFooComponent,
    _METADATA);
const List<dynamic> styles_TestSubComponent = const [];
RenderComponentType renderType_TestSubComponent;

class ViewTestSubComponent0 extends AppView<import2.TestSubComponent> {
  Element _el_0;
  ViewTestSubComponent0(import4.Injector parentInjector,
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestSubComponent0,
            renderType_TestSubComponent,
            import5.ViewType.COMPONENT,
            {},
            parentInjector,
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways);
  ComponentRef createInternal(dynamic rootSelector) {
    final Node parentRenderNode = initViewRoot(parentElement);
    var doc = document;
    _el_0 = doc.createElement('div');
    parentRenderNode.append(_el_0);
    Text _text_1 = new Text('Bar');
    _el_0.append(_text_1);
    init([], [_el_0, _text_1], []);
    return null;
  }
}

AppView<import2.TestSubComponent> viewFactory_TestSubComponent0(
    import4.Injector parentInjector,
    AppView<dynamic> parentView,
    num parentIndex,
    dynamic parentElement) {
  if (identical(renderType_TestSubComponent, null)) {
    (renderType_TestSubComponent = import8.appViewUtils
        .createRenderComponentType(
            '', 0, ViewEncapsulation.None, styles_TestSubComponent));
  }
  return new ViewTestSubComponent0(
      parentInjector, parentView, parentIndex, parentElement);
}

const List<dynamic> styles_TestSubComponentHost = const [];
RenderComponentType renderType_TestSubComponentHost;

class ViewTestSubComponentHost0 extends AppView<dynamic> {
  Element _el_0;
  AppView<import2.TestSubComponent> _compView_0;
  import2.TestSubComponent _TestSubComponent_0_2;
  ViewTestSubComponentHost0(import4.Injector parentInjector,
      AppView<dynamic> parentView, num parentIndex, dynamic parentElement)
      : super(
            ViewTestSubComponentHost0,
            renderType_TestSubComponentHost,
            import5.ViewType.HOST,
            {},
            parentInjector,
            parentView,
            parentIndex,
            parentElement,
            ChangeDetectionStrategy.CheckAlways);
  ComponentRef createInternal(dynamic rootSelector) {
    _el_0 = selectOrCreateHostElement('test-bar', rootSelector, null);
    _compView_0 =
        viewFactory_TestSubComponent0(this.injector(0), this, 0, _el_0);
    _TestSubComponent_0_2 = new import2.TestSubComponent();
    _compView_0.create(_TestSubComponent_0_2, projectableNodes, null);
    init([_el_0], [_el_0], []);
    return new ComponentRef(0, this, _el_0, _TestSubComponent_0_2);
  }

  dynamic injectorGetInternal(
      dynamic token, int requestNodeIndex, dynamic notFoundResult) {
    if ((identical(token, import2.TestSubComponent) &&
        (0 == requestNodeIndex))) {
      return _TestSubComponent_0_2;
    }
    return notFoundResult;
  }

  void detectChangesInternal() {
    _compView_0.detectChanges();
  }

  void destroyInternal() {
    _compView_0.destroy();
  }
}

AppView viewFactory_TestSubComponentHost0(import4.Injector parentInjector,
    AppView<dynamic> parentView, num parentIndex, dynamic parentElement) {
  if (identical(renderType_TestSubComponentHost, null)) {
    (renderType_TestSubComponentHost = import8.appViewUtils
        .createRenderComponentType(
            '', 0, ViewEncapsulation.Emulated, styles_TestSubComponentHost));
  }
  return new ViewTestSubComponentHost0(
      parentInjector, parentView, parentIndex, parentElement);
}

const ComponentFactory TestSubComponentNgFactory = const ComponentFactory(
    'test-bar',
    viewFactory_TestSubComponentHost0,
    import2.TestSubComponent,
    _METADATA);
const _METADATA = const <dynamic>[
  TestFooComponent,
  const <dynamic>[],
  TestDirective,
  const <dynamic>[],
  TestSubComponent,
  const <dynamic>[]
];
var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;
  _ngRef.reflector.registerType(
      TestFooComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new TestFooComponent()));
  _ngRef.reflector.registerType(
      TestDirective,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new TestDirective()));
  _ngRef.reflector.registerType(
      TestSubComponent,
      new _ngRef.ReflectionInfo(
          const <dynamic>[], const [], () => new TestSubComponent()));
}
