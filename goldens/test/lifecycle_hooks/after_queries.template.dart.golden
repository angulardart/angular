// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'after_queries.dart';
import 'package:angular/src/reflector.dart' as _ngRef;
import 'after_queries.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'after_queries.dart' as import1;
import 'package:angular/src/core/linker/view_container.dart';
import 'package:angular/src/common/directives/ng_if.dart';
import 'package:angular/src/core/linker/style_encapsulation.dart' as import4;
import 'package:angular/src/core/linker/views/view.dart' as import5;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/utilities.dart' as import7;
import 'dart:html' as import8;
import 'package:angular/src/runtime/dom_helpers.dart' as import9;
import 'package:angular/src/core/linker/template_ref.dart';
import 'package:angular/src/runtime/check_binding.dart' as import11;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/embedded_view.dart' as import13;
import 'package:angular/src/core/linker/views/render_view.dart' as import14;
import 'package:angular/src/core/linker/views/host_view.dart' as import15;

final List<Object> styles$GoldenComponent = const [];

class ViewGoldenComponent0 extends import0.ComponentView<import1.GoldenComponent> {
  late final ViewUsesAfterView0 _compView_0;
  late final import1.UsesAfterView _UsesAfterView_0_5;
  late final ViewUsesAfterContent0 _compView_1;
  late final import1.UsesAfterContent _UsesAfterContent_1_5;
  late final ViewChildComponent0 _compView_2;
  late final import1.ChildComponent _ChildComponent_2_5;
  late final ViewContainer _appEl_3;
  late final NgIf _NgIf_3_9;
  Object? _expr_0;
  static import4.ComponentStyles? _componentStyles;
  ViewGoldenComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.unsafeCast(import8.document.createElement('golden'));
  }
  static String? get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:goldens/test/lifecycle_hooks/after_queries.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewUsesAfterView0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._UsesAfterView_0_5 = import1.UsesAfterView();
    this._compView_0.create(this._UsesAfterView_0_5);
    this._compView_1 = ViewUsesAfterContent0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    parentRenderNode.append(_el_1);
    this._UsesAfterContent_1_5 = import1.UsesAfterContent();
    this._compView_2 = ViewChildComponent0(this, 2);
    final _el_2 = this._compView_2.rootElement;
    this._ChildComponent_2_5 = import1.ChildComponent();
    this._compView_2.create(this._ChildComponent_2_5);
    final _anchor_3 = import9.createAnchor();
    this._appEl_3 = ViewContainer(3, 1, this, _anchor_3);
    var _TemplateRef_3_8 = TemplateRef(this._appEl_3, viewFactory_GoldenComponent1);
    this._NgIf_3_9 = NgIf(this._appEl_3, _TemplateRef_3_8);
    this._compView_1.createAndProject(this._UsesAfterContent_1_5, [
      <Object>[_el_2, this._appEl_3]
    ]);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    bool firstCheck = this.firstCheck;
    final currVal_0 = _ctx.value;
    if (import11.checkBinding(this._expr_0, currVal_0, 'value', 'asset:goldens/test/lifecycle_hooks/after_queries.dart')) {
      this._ChildComponent_2_5.value = currVal_0;
      this._expr_0 = currVal_0;
    }
    this._NgIf_3_9.ngIf = _ctx.showValue;
    this._appEl_3.detectChangesInNestedViews();
    if ((!import11.debugThrowIfChanged)) {
      if (firstCheck) {
        this._UsesAfterContent_1_5.ngAfterContentInit();
      }
      this._UsesAfterContent_1_5.ngAfterContentChecked();
    }
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_2.detectChanges();
    if ((!import11.debugThrowIfChanged)) {
      if (firstCheck) {
        this._UsesAfterView_0_5.ngAfterViewInit();
      }
      this._UsesAfterView_0_5.ngAfterViewChecked();
    }
  }

  @override
  void destroyInternal() {
    this._appEl_3.destroyNestedViews();
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_2.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$GoldenComponent, _debugComponentUrl));
      if (import7.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _GoldenComponentNgFactory = ComponentFactory<import1.GoldenComponent>('golden', viewFactory_GoldenComponentHost0);
ComponentFactory<import1.GoldenComponent> get GoldenComponentNgFactory {
  return _GoldenComponentNgFactory;
}

ComponentFactory<import1.GoldenComponent> createGoldenComponentFactory() {
  return ComponentFactory('golden', viewFactory_GoldenComponentHost0);
}

class _ViewGoldenComponent1 extends import13.EmbeddedView<import1.GoldenComponent> {
  late final ViewChildComponent0 _compView_0;
  late final import1.ChildComponent _ChildComponent_0_5;
  Object? _expr_0;
  _ViewGoldenComponent1(import14.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._ChildComponent_0_5 = import1.ChildComponent();
    this._compView_0.create(this._ChildComponent_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.value;
    if (import11.checkBinding(this._expr_0, currVal_0, 'value', 'asset:goldens/test/lifecycle_hooks/after_queries.dart')) {
      this._ChildComponent_0_5.value = currVal_0;
      this._expr_0 = currVal_0;
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import13.EmbeddedView<void> viewFactory_GoldenComponent1(import14.RenderView parentView, int parentIndex) {
  return _ViewGoldenComponent1(parentView, parentIndex);
}

final List<Object> styles$GoldenComponentHost = const [];

class _ViewGoldenComponentHost0 extends import15.HostView<import1.GoldenComponent> {
  @override
  void build() {
    this.componentView = ViewGoldenComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.GoldenComponent();
    this.initRootNode(_el_0);
  }
}

import15.HostView<import1.GoldenComponent> viewFactory_GoldenComponentHost0() {
  return _ViewGoldenComponentHost0();
}

final List<Object> styles$UsesAfterView = const [];

class ViewUsesAfterView0 extends import0.ComponentView<import1.UsesAfterView> {
  late final ViewChildComponent0 _compView_0;
  late final import1.ChildComponent _ChildComponent_0_5;
  late final ViewContainer _appEl_1;
  late final NgIf _NgIf_1_9;
  Object? _expr_0;
  static import4.ComponentStyles? _componentStyles;
  ViewUsesAfterView0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.unsafeCast(import8.document.createElement('uses-after-view'));
  }
  static String? get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:goldens/test/lifecycle_hooks/after_queries.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._ChildComponent_0_5 = import1.ChildComponent();
    this._compView_0.create(this._ChildComponent_0_5);
    final _anchor_1 = import9.appendAnchor(parentRenderNode);
    this._appEl_1 = ViewContainer(1, null, this, _anchor_1);
    var _TemplateRef_1_8 = TemplateRef(this._appEl_1, viewFactory_UsesAfterView1);
    this._NgIf_1_9 = NgIf(this._appEl_1, _TemplateRef_1_8);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.value;
    if (import11.checkBinding(this._expr_0, currVal_0, 'value', 'asset:goldens/test/lifecycle_hooks/after_queries.dart')) {
      this._ChildComponent_0_5.value = currVal_0;
      this._expr_0 = currVal_0;
    }
    this._NgIf_1_9.ngIf = _ctx.showValue;
    this._appEl_1.detectChangesInNestedViews();
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._appEl_1.destroyNestedViews();
    this._compView_0.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesAfterView, _debugComponentUrl));
      if (import7.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesAfterViewNgFactory = ComponentFactory<import1.UsesAfterView>('uses-after-view', viewFactory_UsesAfterViewHost0);
ComponentFactory<import1.UsesAfterView> get UsesAfterViewNgFactory {
  return _UsesAfterViewNgFactory;
}

ComponentFactory<import1.UsesAfterView> createUsesAfterViewFactory() {
  return ComponentFactory('uses-after-view', viewFactory_UsesAfterViewHost0);
}

class _ViewUsesAfterView1 extends import13.EmbeddedView<import1.UsesAfterView> {
  late final ViewChildComponent0 _compView_0;
  late final import1.ChildComponent _ChildComponent_0_5;
  Object? _expr_0;
  _ViewUsesAfterView1(import14.RenderView parentView, int parentIndex) : super(parentView, parentIndex);
  @override
  void build() {
    this._compView_0 = ViewChildComponent0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    this._ChildComponent_0_5 = import1.ChildComponent();
    this._compView_0.create(this._ChildComponent_0_5);
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    final _ctx = this.ctx;
    final currVal_0 = _ctx.value;
    if (import11.checkBinding(this._expr_0, currVal_0, 'value', 'asset:goldens/test/lifecycle_hooks/after_queries.dart')) {
      this._ChildComponent_0_5.value = currVal_0;
      this._expr_0 = currVal_0;
    }
    this._compView_0.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
  }
}

import13.EmbeddedView<void> viewFactory_UsesAfterView1(import14.RenderView parentView, int parentIndex) {
  return _ViewUsesAfterView1(parentView, parentIndex);
}

final List<Object> styles$UsesAfterViewHost = const [];

class _ViewUsesAfterViewHost0 extends import15.HostView<import1.UsesAfterView> {
  @override
  void build() {
    this.componentView = ViewUsesAfterView0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesAfterView();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    this.componentView.detectChanges();
    if ((!import11.debugThrowIfChanged)) {
      if (firstCheck) {
        this.component.ngAfterViewInit();
      }
      this.component.ngAfterViewChecked();
    }
  }
}

import15.HostView<import1.UsesAfterView> viewFactory_UsesAfterViewHost0() {
  return _ViewUsesAfterViewHost0();
}

final List<Object> styles$ChildComponent = const [];

class ViewChildComponent0 extends import0.ComponentView<import1.ChildComponent> {
  static import4.ComponentStyles? _componentStyles;
  ViewChildComponent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.unsafeCast(import8.document.createElement('child'));
  }
  static String? get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:goldens/test/lifecycle_hooks/after_queries.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$ChildComponent, _debugComponentUrl));
      if (import7.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentNgFactory = ComponentFactory<import1.ChildComponent>('child', viewFactory_ChildComponentHost0);
ComponentFactory<import1.ChildComponent> get ChildComponentNgFactory {
  return _ChildComponentNgFactory;
}

ComponentFactory<import1.ChildComponent> createChildComponentFactory() {
  return ComponentFactory('child', viewFactory_ChildComponentHost0);
}

final List<Object> styles$ChildComponentHost = const [];

class _ViewChildComponentHost0 extends import15.HostView<import1.ChildComponent> {
  @override
  void build() {
    this.componentView = ViewChildComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponent();
    this.initRootNode(_el_0);
  }
}

import15.HostView<import1.ChildComponent> viewFactory_ChildComponentHost0() {
  return _ViewChildComponentHost0();
}

final List<Object> styles$UsesAfterContent = const [];

class ViewUsesAfterContent0 extends import0.ComponentView<import1.UsesAfterContent> {
  static import4.ComponentStyles? _componentStyles;
  ViewUsesAfterContent0(import5.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import7.unsafeCast(import8.document.createElement('uses-after-content'));
  }
  static String? get _debugComponentUrl {
    return (import7.isDevMode ? 'asset:goldens/test/lifecycle_hooks/after_queries.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import4.ComponentStyles.unscoped(styles$UsesAfterContent, _debugComponentUrl));
      if (import7.isDevMode) {
        import4.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _UsesAfterContentNgFactory = ComponentFactory<import1.UsesAfterContent>('uses-after-content', viewFactory_UsesAfterContentHost0);
ComponentFactory<import1.UsesAfterContent> get UsesAfterContentNgFactory {
  return _UsesAfterContentNgFactory;
}

ComponentFactory<import1.UsesAfterContent> createUsesAfterContentFactory() {
  return ComponentFactory('uses-after-content', viewFactory_UsesAfterContentHost0);
}

final List<Object> styles$UsesAfterContentHost = const [];

class _ViewUsesAfterContentHost0 extends import15.HostView<import1.UsesAfterContent> {
  @override
  void build() {
    this.componentView = ViewUsesAfterContent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.UsesAfterContent();
    this.initRootNode(_el_0);
  }

  @override
  void detectChangesInternal() {
    bool firstCheck = this.firstCheck;
    if ((!import11.debugThrowIfChanged)) {
      if (firstCheck) {
        this.component.ngAfterContentInit();
      }
      this.component.ngAfterContentChecked();
    }
    this.componentView.detectChanges();
  }
}

import15.HostView<import1.UsesAfterContent> viewFactory_UsesAfterContentHost0() {
  return _ViewUsesAfterContentHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(GoldenComponent, createGoldenComponentFactory());
  _ngRef.registerComponent(UsesAfterView, createUsesAfterViewFactory());
  _ngRef.registerComponent(ChildComponent, createChildComponentFactory());
  _ngRef.registerComponent(UsesAfterContent, createUsesAfterContentFactory());
  _ref0.initReflector();
}
