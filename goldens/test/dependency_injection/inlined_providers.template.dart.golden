// **************************************************************************
// Generator: AngularDart Compiler
// **************************************************************************

import 'inlined_providers.dart';
import 'package:angular/src/reflector.dart' as _ngRef;
import 'inlined_providers.template.dart' as _ref0;
import 'package:angular/src/core/linker/views/component_view.dart' as import0;
import 'inlined_providers.dart' as import1;
import 'package:angular/src/core/linker/style_encapsulation.dart' as import2;
import 'package:angular/src/core/linker/views/view.dart' as import3;
import 'package:angular/src/core/change_detection/change_detection.dart';
import 'package:angular/src/utilities.dart' as import5;
import 'dart:html' as import6;
import 'package:angular/src/runtime/dom_helpers.dart' as import7;
import 'package:angular/angular.dart';
import 'package:angular/src/core/linker/views/host_view.dart' as import9;
import 'package:angular/src/di/errors.dart' as import10;

final List<Object> styles$GoldenComponent = const [];

class ViewGoldenComponent0 extends import0.ComponentView<import1.GoldenComponent> {
  late final ViewChildComponentProvidingA$B$C0 _compView_0;
  late final import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_0_5;
  import1.A? __A_0_6;
  import1.B? __B_0_7;
  import1.C? __C_0_8;
  late final ViewChildComponentProvidingA$B$C0 _compView_1;
  late final import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_1_5;
  import1.A? __A_1_6;
  import1.B? __B_1_7;
  import1.C? __C_1_8;
  late final ViewChildComponentWithNgContentProviding$D0 _compView_2;
  late final import1.ChildComponentWithNgContentProviding$D _ChildComponentWithNgContentProviding$D_2_5;
  late final import1.D _D_2_6;
  late final ViewChildComponentInjecting$D0 _compView_3;
  late final import1.ChildComponentInjecting$D _ChildComponentInjecting$D_3_5;
  late final ViewChildComponentWithVisibilityAll0 _compView_4;
  late final import1.ChildComponentWithVisibilityAll _ChildComponentWithVisibilityAll_4_5;
  late final ViewChildComponentProvidingA$B$C0 _compView_5;
  late final import1.ChildComponentProvidingA$B$C _ChildComponentProvidingA$B$C_5_5;
  late final import1.DirectiveProviding$A2$D2 _DirectiveProviding$A2$D2_5_6;
  import1.A2? __A_5_7;
  import1.B? __B_5_8;
  import1.C? __C_5_9;
  import1.D2? __D_5_10;
  late final ViewChildComponentWithNgContentProviding$D0 _compView_6;
  late final import1.ChildComponentWithNgContentProviding$D _ChildComponentWithNgContentProviding$D_6_5;
  late final import1.DirectiveProviding$A2$D2 _DirectiveProviding$A2$D2_6_6;
  late final import1.D2 _D_6_7;
  import1.A2? __A_6_8;
  late final ViewChildComponentInjecting$D0 _compView_7;
  late final import1.ChildComponentInjecting$D _ChildComponentInjecting$D_7_5;
  static import2.ComponentStyles? _componentStyles;
  ViewGoldenComponent0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.unsafeCast(import6.document.createElement('golden'));
  }
  import1.A get _A_0_6 {
    var result = this.__A_0_6;
    if ((result == null)) {
      (this.__A_0_6 = (result = import1.A()));
    }
    return result;
  }

  import1.B get _B_0_7 {
    var result = this.__B_0_7;
    if ((result == null)) {
      (this.__B_0_7 = (result = import1.B()));
    }
    return result;
  }

  import1.C get _C_0_8 {
    var result = this.__C_0_8;
    if ((result == null)) {
      (this.__C_0_8 = (result = import1.C()));
    }
    return result;
  }

  import1.A get _A_1_6 {
    var result = this.__A_1_6;
    if ((result == null)) {
      (this.__A_1_6 = (result = import1.A()));
    }
    return result;
  }

  import1.B get _B_1_7 {
    var result = this.__B_1_7;
    if ((result == null)) {
      (this.__B_1_7 = (result = import1.B()));
    }
    return result;
  }

  import1.C get _C_1_8 {
    var result = this.__C_1_8;
    if ((result == null)) {
      (this.__C_1_8 = (result = import1.C()));
    }
    return result;
  }

  import1.A2 get _A_5_7 {
    var result = this.__A_5_7;
    if ((result == null)) {
      (this.__A_5_7 = (result = import1.A2()));
    }
    return result;
  }

  import1.B get _B_5_8 {
    var result = this.__B_5_8;
    if ((result == null)) {
      (this.__B_5_8 = (result = import1.B()));
    }
    return result;
  }

  import1.C get _C_5_9 {
    var result = this.__C_5_9;
    if ((result == null)) {
      (this.__C_5_9 = (result = import1.C()));
    }
    return result;
  }

  import1.D2 get _D_5_10 {
    var result = this.__D_5_10;
    if ((result == null)) {
      (this.__D_5_10 = (result = import1.D2()));
    }
    return result;
  }

  import1.A2 get _A_6_8 {
    var result = this.__A_6_8;
    if ((result == null)) {
      (this.__A_6_8 = (result = import1.A2()));
    }
    return result;
  }

  static String? get _debugComponentUrl {
    return (import5.isDevMode ? 'asset:goldens/test/dependency_injection/inlined_providers.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
    this._compView_0 = ViewChildComponentProvidingA$B$C0(this, 0);
    final _el_0 = this._compView_0.rootElement;
    parentRenderNode.append(_el_0);
    this._ChildComponentProvidingA$B$C_0_5 = import1.ChildComponentProvidingA$B$C();
    this._compView_0.create(this._ChildComponentProvidingA$B$C_0_5);
    this._compView_1 = ViewChildComponentProvidingA$B$C0(this, 1);
    final _el_1 = this._compView_1.rootElement;
    parentRenderNode.append(_el_1);
    this._ChildComponentProvidingA$B$C_1_5 = import1.ChildComponentProvidingA$B$C();
    this._compView_1.create(this._ChildComponentProvidingA$B$C_1_5);
    this._compView_2 = ViewChildComponentWithNgContentProviding$D0(this, 2);
    final _el_2 = this._compView_2.rootElement;
    parentRenderNode.append(_el_2);
    this._ChildComponentWithNgContentProviding$D_2_5 = import1.ChildComponentWithNgContentProviding$D();
    this._D_2_6 = import1.D();
    this._compView_3 = ViewChildComponentInjecting$D0(this, 3);
    final _el_3 = this._compView_3.rootElement;
    this._ChildComponentInjecting$D_3_5 = import1.ChildComponentInjecting$D(this._D_2_6);
    this._compView_3.create(this._ChildComponentInjecting$D_3_5);
    this._compView_2.createAndProject(this._ChildComponentWithNgContentProviding$D_2_5, [
      <Object>[_el_3]
    ]);
    this._compView_4 = ViewChildComponentWithVisibilityAll0(this, 4);
    final _el_4 = this._compView_4.rootElement;
    parentRenderNode.append(_el_4);
    this._ChildComponentWithVisibilityAll_4_5 = import1.ChildComponentWithVisibilityAll();
    this._compView_4.create(this._ChildComponentWithVisibilityAll_4_5);
    this._compView_5 = ViewChildComponentProvidingA$B$C0(this, 5);
    final _el_5 = this._compView_5.rootElement;
    parentRenderNode.append(_el_5);
    import7.setAttribute(_el_5, 'directive-providing-a2-d2', '');
    this._ChildComponentProvidingA$B$C_5_5 = import1.ChildComponentProvidingA$B$C();
    this._DirectiveProviding$A2$D2_5_6 = import1.DirectiveProviding$A2$D2();
    this._compView_5.create(this._ChildComponentProvidingA$B$C_5_5);
    this._compView_6 = ViewChildComponentWithNgContentProviding$D0(this, 6);
    final _el_6 = this._compView_6.rootElement;
    parentRenderNode.append(_el_6);
    import7.setAttribute(_el_6, 'directive-providing-a2-d2', '');
    this._ChildComponentWithNgContentProviding$D_6_5 = import1.ChildComponentWithNgContentProviding$D();
    this._DirectiveProviding$A2$D2_6_6 = import1.DirectiveProviding$A2$D2();
    this._D_6_7 = import1.D2();
    this._compView_7 = ViewChildComponentInjecting$D0(this, 7);
    final _el_7 = this._compView_7.rootElement;
    this._ChildComponentInjecting$D_7_5 = import1.ChildComponentInjecting$D(this._D_6_7);
    this._compView_7.create(this._ChildComponentInjecting$D_7_5);
    this._compView_6.createAndProject(this._ChildComponentWithNgContentProviding$D_6_5, [
      <Object>[_el_7]
    ]);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    if ((1 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_1_6;
      }
      if (identical(token, import1.B)) {
        return this._B_1_7;
      }
      if (identical(token, import1.C)) {
        return this._C_1_8;
      }
    }
    if ((identical(token, import1.D) && ((2 <= nodeIndex) && (nodeIndex <= 3)))) {
      return this._D_2_6;
    }
    if ((identical(token, import1.ChildComponentWithVisibilityAll) && (4 == nodeIndex))) {
      return this._ChildComponentWithVisibilityAll_4_5;
    }
    if ((5 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_5_7;
      }
      if (identical(token, import1.B)) {
        return this._B_5_8;
      }
      if (identical(token, import1.C)) {
        return this._C_5_9;
      }
      if (identical(token, import1.D)) {
        return this._D_5_10;
      }
    }
    if (((6 <= nodeIndex) && (nodeIndex <= 7))) {
      if (identical(token, import1.D)) {
        return this._D_6_7;
      }
      if (identical(token, import1.A)) {
        return this._A_6_8;
      }
    }
    return notFoundResult;
  }

  @override
  void detectChangesInternal() {
    this._compView_0.detectChanges();
    this._compView_1.detectChanges();
    this._compView_2.detectChanges();
    this._compView_3.detectChanges();
    this._compView_4.detectChanges();
    this._compView_5.detectChanges();
    this._compView_6.detectChanges();
    this._compView_7.detectChanges();
  }

  @override
  void destroyInternal() {
    this._compView_0.destroyInternalState();
    this._compView_1.destroyInternalState();
    this._compView_2.destroyInternalState();
    this._compView_3.destroyInternalState();
    this._compView_4.destroyInternalState();
    this._compView_5.destroyInternalState();
    this._compView_6.destroyInternalState();
    this._compView_7.destroyInternalState();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$GoldenComponent, _debugComponentUrl));
      if (import5.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _GoldenComponentNgFactory = ComponentFactory<import1.GoldenComponent>('golden', viewFactory_GoldenComponentHost0);
ComponentFactory<import1.GoldenComponent> get GoldenComponentNgFactory {
  return _GoldenComponentNgFactory;
}

ComponentFactory<import1.GoldenComponent> createGoldenComponentFactory() {
  return ComponentFactory('golden', viewFactory_GoldenComponentHost0);
}

final List<Object> styles$GoldenComponentHost = const [];

class _ViewGoldenComponentHost0 extends import9.HostView<import1.GoldenComponent> {
  @override
  void build() {
    this.componentView = ViewGoldenComponent0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.GoldenComponent(this.injector(0));
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.GoldenComponent> viewFactory_GoldenComponentHost0() {
  return _ViewGoldenComponentHost0();
}

final List<Object> styles$ChildComponentProvidingA$B$C = const [];

class ViewChildComponentProvidingA$B$C0 extends import0.ComponentView<import1.ChildComponentProvidingA$B$C> {
  static import2.ComponentStyles? _componentStyles;
  ViewChildComponentProvidingA$B$C0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.unsafeCast(import6.document.createElement('child-component-providing-a-b-c'));
  }
  static String? get _debugComponentUrl {
    return (import5.isDevMode ? 'asset:goldens/test/dependency_injection/inlined_providers.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ChildComponentProvidingA$B$C, _debugComponentUrl));
      if (import5.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentProvidingA$B$CNgFactory = ComponentFactory<import1.ChildComponentProvidingA$B$C>('child-component-providing-a-b-c', viewFactory_ChildComponentProvidingA$B$CHost0);
ComponentFactory<import1.ChildComponentProvidingA$B$C> get ChildComponentProvidingA$B$CNgFactory {
  return _ChildComponentProvidingA$B$CNgFactory;
}

ComponentFactory<import1.ChildComponentProvidingA$B$C> createChildComponentProvidingA$B$CFactory() {
  return ComponentFactory('child-component-providing-a-b-c', viewFactory_ChildComponentProvidingA$B$CHost0);
}

final List<Object> styles$ChildComponentProvidingA$B$CHost = const [];

class _ViewChildComponentProvidingA$B$CHost0 extends import9.HostView<import1.ChildComponentProvidingA$B$C> {
  import1.A? __A_0_6;
  import1.B? __B_0_7;
  import1.C? __C_0_8;
  import1.A get _A_0_6 {
    var result = this.__A_0_6;
    if ((result == null)) {
      (this.__A_0_6 = (result = import1.A()));
    }
    return result;
  }

  import1.B get _B_0_7 {
    var result = this.__B_0_7;
    if ((result == null)) {
      (this.__B_0_7 = (result = import1.B()));
    }
    return result;
  }

  import1.C get _C_0_8 {
    var result = this.__C_0_8;
    if ((result == null)) {
      (this.__C_0_8 = (result = import1.C()));
    }
    return result;
  }

  @override
  void build() {
    this.componentView = ViewChildComponentProvidingA$B$C0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponentProvidingA$B$C();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((0 == nodeIndex)) {
      if (identical(token, import1.A)) {
        return this._A_0_6;
      }
      if (identical(token, import1.B)) {
        return this._B_0_7;
      }
      if (identical(token, import1.C)) {
        return this._C_0_8;
      }
    }
    return notFoundResult;
  }
}

import9.HostView<import1.ChildComponentProvidingA$B$C> viewFactory_ChildComponentProvidingA$B$CHost0() {
  return _ViewChildComponentProvidingA$B$CHost0();
}

final List<Object> styles$ChildComponentWithNgContentProviding$D = const [];

class ViewChildComponentWithNgContentProviding$D0 extends import0.ComponentView<import1.ChildComponentWithNgContentProviding$D> {
  static import2.ComponentStyles? _componentStyles;
  ViewChildComponentWithNgContentProviding$D0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.unsafeCast(import6.document.createElement('child-component-with-ngcontent-providing-d'));
  }
  static String? get _debugComponentUrl {
    return (import5.isDevMode ? 'asset:goldens/test/dependency_injection/inlined_providers.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
    this.project(parentRenderNode, 0);
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ChildComponentWithNgContentProviding$D, _debugComponentUrl));
      if (import5.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentWithNgContentProviding$DNgFactory = ComponentFactory<import1.ChildComponentWithNgContentProviding$D>('child-component-with-ngcontent-providing-d', viewFactory_ChildComponentWithNgContentProviding$DHost0);
ComponentFactory<import1.ChildComponentWithNgContentProviding$D> get ChildComponentWithNgContentProviding$DNgFactory {
  return _ChildComponentWithNgContentProviding$DNgFactory;
}

ComponentFactory<import1.ChildComponentWithNgContentProviding$D> createChildComponentWithNgContentProviding$DFactory() {
  return ComponentFactory('child-component-with-ngcontent-providing-d', viewFactory_ChildComponentWithNgContentProviding$DHost0);
}

final List<Object> styles$ChildComponentWithNgContentProviding$DHost = const [];

class _ViewChildComponentWithNgContentProviding$DHost0 extends import9.HostView<import1.ChildComponentWithNgContentProviding$D> {
  import1.D? __D_0_6;
  import1.D get _D_0_6 {
    var result = this.__D_0_6;
    if ((result == null)) {
      (this.__D_0_6 = (result = import1.D()));
    }
    return result;
  }

  @override
  void build() {
    this.componentView = ViewChildComponentWithNgContentProviding$D0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponentWithNgContentProviding$D();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.D) && (0 == nodeIndex))) {
      return this._D_0_6;
    }
    return notFoundResult;
  }
}

import9.HostView<import1.ChildComponentWithNgContentProviding$D> viewFactory_ChildComponentWithNgContentProviding$DHost0() {
  return _ViewChildComponentWithNgContentProviding$DHost0();
}

final List<Object> styles$ChildComponentInjecting$D = const [];

class ViewChildComponentInjecting$D0 extends import0.ComponentView<import1.ChildComponentInjecting$D> {
  static import2.ComponentStyles? _componentStyles;
  ViewChildComponentInjecting$D0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.unsafeCast(import6.document.createElement('child-component-injecting-d'));
  }
  static String? get _debugComponentUrl {
    return (import5.isDevMode ? 'asset:goldens/test/dependency_injection/inlined_providers.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ChildComponentInjecting$D, _debugComponentUrl));
      if (import5.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentInjecting$DNgFactory = ComponentFactory<import1.ChildComponentInjecting$D>('child-component-injecting-d', viewFactory_ChildComponentInjecting$DHost0);
ComponentFactory<import1.ChildComponentInjecting$D> get ChildComponentInjecting$DNgFactory {
  return _ChildComponentInjecting$DNgFactory;
}

ComponentFactory<import1.ChildComponentInjecting$D> createChildComponentInjecting$DFactory() {
  return ComponentFactory('child-component-injecting-d', viewFactory_ChildComponentInjecting$DHost0);
}

final List<Object> styles$ChildComponentInjecting$DHost = const [];

class _ViewChildComponentInjecting$DHost0 extends import9.HostView<import1.ChildComponentInjecting$D> {
  @override
  void build() {
    this.componentView = ViewChildComponentInjecting$D0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = (import5.isDevMode
        ? import10.debugInjectorWrap(import1.ChildComponentInjecting$D, () {
            return import1.ChildComponentInjecting$D(this.injectorGet(import1.D, this.parentIndex));
          })
        : import1.ChildComponentInjecting$D(this.injectorGet(import1.D, this.parentIndex)));
    this.initRootNode(_el_0);
  }
}

import9.HostView<import1.ChildComponentInjecting$D> viewFactory_ChildComponentInjecting$DHost0() {
  return _ViewChildComponentInjecting$DHost0();
}

final List<Object> styles$ChildComponentWithVisibilityAll = const [];

class ViewChildComponentWithVisibilityAll0 extends import0.ComponentView<import1.ChildComponentWithVisibilityAll> {
  static import2.ComponentStyles? _componentStyles;
  ViewChildComponentWithVisibilityAll0(import3.View parentView, int parentIndex) : super(parentView, parentIndex, ChangeDetectionStrategy.CheckAlways) {
    this.initComponentStyles();
    this.rootElement = import5.unsafeCast(import6.document.createElement('child-component-with-visibility-all'));
  }
  static String? get _debugComponentUrl {
    return (import5.isDevMode ? 'asset:goldens/test/dependency_injection/inlined_providers.dart' : null);
  }

  @override
  void build() {
    final parentRenderNode = this.initViewRoot();
  }

  static void _debugClearComponentStyles() {
    _componentStyles = null;
  }

  void initComponentStyles() {
    var styles = _componentStyles;
    if ((styles == null)) {
      _componentStyles = (styles = import2.ComponentStyles.unscoped(styles$ChildComponentWithVisibilityAll, _debugComponentUrl));
      if (import5.isDevMode) {
        import2.ComponentStyles.debugOnClear(_debugClearComponentStyles);
      }
    }
    this.componentStyles = styles;
  }
}

const _ChildComponentWithVisibilityAllNgFactory = ComponentFactory<import1.ChildComponentWithVisibilityAll>('child-component-with-visibility-all', viewFactory_ChildComponentWithVisibilityAllHost0);
ComponentFactory<import1.ChildComponentWithVisibilityAll> get ChildComponentWithVisibilityAllNgFactory {
  return _ChildComponentWithVisibilityAllNgFactory;
}

ComponentFactory<import1.ChildComponentWithVisibilityAll> createChildComponentWithVisibilityAllFactory() {
  return ComponentFactory('child-component-with-visibility-all', viewFactory_ChildComponentWithVisibilityAllHost0);
}

final List<Object> styles$ChildComponentWithVisibilityAllHost = const [];

class _ViewChildComponentWithVisibilityAllHost0 extends import9.HostView<import1.ChildComponentWithVisibilityAll> {
  @override
  void build() {
    this.componentView = ViewChildComponentWithVisibilityAll0(this, 0);
    final _el_0 = this.componentView.rootElement;
    this.component = import1.ChildComponentWithVisibilityAll();
    this.initRootNode(_el_0);
  }

  @override
  dynamic injectorGetInternal(dynamic token, int nodeIndex, dynamic notFoundResult) {
    if ((identical(token, import1.ChildComponentWithVisibilityAll) && (0 == nodeIndex))) {
      return this.component;
    }
    return notFoundResult;
  }
}

import9.HostView<import1.ChildComponentWithVisibilityAll> viewFactory_ChildComponentWithVisibilityAllHost0() {
  return _ViewChildComponentWithVisibilityAllHost0();
}

var _visited = false;
void initReflector() {
  if (_visited) {
    return;
  }
  _visited = true;

  _ngRef.registerComponent(GoldenComponent, createGoldenComponentFactory());
  _ngRef.registerComponent(ChildComponentProvidingA$B$C, createChildComponentProvidingA$B$CFactory());
  _ngRef.registerComponent(ChildComponentWithNgContentProviding$D, createChildComponentWithNgContentProviding$DFactory());
  _ngRef.registerComponent(ChildComponentInjecting$D, createChildComponentInjecting$DFactory());
  _ngRef.registerComponent(ChildComponentWithVisibilityAll, createChildComponentWithVisibilityAllFactory());
  _ref0.initReflector();
}
